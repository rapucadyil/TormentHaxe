// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBitmap
#include <openfl/_internal/renderer/context3D/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6746d5f480a0c115_31_render,"openfl._internal.renderer.context3D.Context3DBitmap","render",0xf96cd13e,"openfl._internal.renderer.context3D.Context3DBitmap.render","openfl/_internal/renderer/context3D/Context3DBitmap.hx",31,0x96bf4e38)
HX_LOCAL_STACK_FRAME(_hx_pos_6746d5f480a0c115_73_renderMask,"openfl._internal.renderer.context3D.Context3DBitmap","renderMask",0xc4b0b54a,"openfl._internal.renderer.context3D.Context3DBitmap.renderMask","openfl/_internal/renderer/context3D/Context3DBitmap.hx",73,0x96bf4e38)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DBitmap_obj::__construct() { }

Dynamic Context3DBitmap_obj::__CreateEmpty() { return new Context3DBitmap_obj; }

void *Context3DBitmap_obj::_hx_vtable = 0;

Dynamic Context3DBitmap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DBitmap_obj > _hx_result = new Context3DBitmap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3DBitmap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f3e2682;
}

void Context3DBitmap_obj::render( ::openfl::display::Bitmap bitmap, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_6746d5f480a0c115_31_render)
HXLINE(  33)		bool _hx_tmp;
HXDLIN(  33)		if (!(!(bitmap->_hx___renderable))) {
HXLINE(  33)			_hx_tmp = (bitmap->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(  33)			_hx_tmp = true;
            		}
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  33)			return;
            		}
HXLINE(  35)		bool _hx_tmp1;
HXDLIN(  35)		if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXLINE(  35)			_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            		}
            		else {
HXLINE(  35)			_hx_tmp1 = false;
            		}
HXDLIN(  35)		if (_hx_tmp1) {
HXLINE(  37)			 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(  39)			renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXLINE(  40)			renderer->_hx___pushMaskObject(bitmap,null());
HXLINE(  43)			 ::openfl::display::Shader shader = renderer->_hx___initDisplayShader(bitmap->_hx___worldShader);
HXLINE(  44)			renderer->setShader(shader);
HXLINE(  45)			bool _hx_tmp2;
HXDLIN(  45)			if (renderer->_hx___allowSmoothing) {
HXLINE(  45)				if (!(bitmap->smoothing)) {
HXLINE(  45)					_hx_tmp2 = renderer->_hx___upscaled;
            				}
            				else {
HXLINE(  45)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE(  45)				_hx_tmp2 = false;
            			}
HXDLIN(  45)			renderer->applyBitmapData(bitmap->_hx___bitmapData,_hx_tmp2,null());
HXLINE(  46)			renderer->applyMatrix(renderer->_hx___getMatrix(bitmap->_hx___renderTransform,bitmap->pixelSnapping));
HXLINE(  47)			renderer->applyAlpha(bitmap->_hx___worldAlpha);
HXLINE(  48)			renderer->applyColorTransform(bitmap->_hx___worldColorTransform);
HXLINE(  49)			renderer->updateShader();
HXLINE(  51)			 ::openfl::display3D::VertexBuffer3D vertexBuffer = bitmap->_hx___bitmapData->getVertexBuffer(context);
HXLINE(  52)			if (hx::IsNotNull( shader->_hx___position )) {
HXLINE(  52)				context->setVertexBufferAt(shader->_hx___position->index,vertexBuffer,(int)0,(int)3);
            			}
HXLINE(  53)			if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE(  53)				context->setVertexBufferAt(shader->_hx___textureCoord->index,vertexBuffer,(int)3,(int)2);
            			}
HXLINE(  54)			 ::openfl::display3D::IndexBuffer3D indexBuffer = bitmap->_hx___bitmapData->getIndexBuffer(context);
HXLINE(  55)			context->drawTriangles(indexBuffer,null(),null());
HXLINE(  61)			renderer->_hx___clearShader();
HXLINE(  64)			renderer->_hx___popMaskObject(bitmap,null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DBitmap_obj,render,(void))

void Context3DBitmap_obj::renderMask( ::openfl::display::Bitmap bitmap, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_6746d5f480a0c115_73_renderMask)
HXDLIN(  73)		bool _hx_tmp;
HXDLIN(  73)		if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXDLIN(  73)			_hx_tmp = bitmap->_hx___bitmapData->_hx___isValid;
            		}
            		else {
HXDLIN(  73)			_hx_tmp = false;
            		}
HXDLIN(  73)		if (_hx_tmp) {
HXLINE(  75)			 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(  77)			 ::openfl::_internal::renderer::context3D::Context3DMaskShader shader = renderer->_hx___maskShader;
HXLINE(  78)			renderer->setShader(shader);
HXLINE(  79)			renderer->applyBitmapData(::openfl::_internal::renderer::context3D::Context3DMaskShader_obj::opaqueBitmapData,true,null());
HXLINE(  80)			renderer->applyMatrix(renderer->_hx___getMatrix(bitmap->_hx___renderTransform,bitmap->pixelSnapping));
HXLINE(  81)			renderer->updateShader();
HXLINE(  83)			 ::openfl::display3D::VertexBuffer3D vertexBuffer = bitmap->_hx___bitmapData->getVertexBuffer(context);
HXLINE(  84)			if (hx::IsNotNull( shader->_hx___position )) {
HXLINE(  84)				context->setVertexBufferAt(shader->_hx___position->index,vertexBuffer,(int)0,(int)3);
            			}
HXLINE(  85)			if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE(  85)				context->setVertexBufferAt(shader->_hx___textureCoord->index,vertexBuffer,(int)3,(int)2);
            			}
HXLINE(  86)			 ::openfl::display3D::IndexBuffer3D indexBuffer = bitmap->_hx___bitmapData->getIndexBuffer(context);
HXLINE(  87)			context->drawTriangles(indexBuffer,null(),null());
HXLINE(  93)			renderer->_hx___clearShader();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DBitmap_obj,renderMask,(void))


Context3DBitmap_obj::Context3DBitmap_obj()
{
}

bool Context3DBitmap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Context3DBitmap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Context3DBitmap_obj_sStaticStorageInfo = 0;
#endif

static void Context3DBitmap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3DBitmap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3DBitmap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3DBitmap_obj::__mClass,"__mClass");
};

#endif

hx::Class Context3DBitmap_obj::__mClass;

static ::String Context3DBitmap_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	::String(null())
};

void Context3DBitmap_obj::__register()
{
	hx::Object *dummy = new Context3DBitmap_obj;
	Context3DBitmap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.context3D.Context3DBitmap","\x86","\x4d","\xb3","\x0d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3DBitmap_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Context3DBitmap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DBitmap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Context3DBitmap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3DBitmap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DBitmap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DBitmap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
