// Generated by Haxe 3.4.7
#ifndef INCLUDED_InputHandler
#define INCLUDED_InputHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(InputHandler)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES InputHandler_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef InputHandler_obj OBJ_;
		InputHandler_obj();

	public:
		enum { _hx_ClassId = 0x247661c8 };

		void __construct( ::Dynamic __o_X, ::Dynamic __o_Y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="InputHandler")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"InputHandler"); }
		static hx::ObjectPtr< InputHandler_obj > __new( ::Dynamic __o_X, ::Dynamic __o_Y);
		static hx::ObjectPtr< InputHandler_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InputHandler_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("InputHandler","\x00","\x55","\x14","\xa6"); }

		void update(Float elapsed);

		void processUserInput();
		::Dynamic processUserInput_dyn();

};


#endif /* INCLUDED_InputHandler */ 
