// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_Vector_openfl_display_DisplayObject
#include <lime/utils/ObjectPool_openfl_Vector_openfl_display_DisplayObject.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_ColorTransform
#include <lime/utils/ObjectPool_openfl_geom_ColorTransform.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Matrix
#include <lime/utils/ObjectPool_openfl_geom_Matrix.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_Lib
#include <openfl/_internal/Lib.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBitmap
#include <openfl/_internal/renderer/context3D/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DGraphics
#include <openfl/_internal/renderer/context3D/Context3DGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DShape
#include <openfl/_internal/renderer/context3D/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMDisplayObject
#include <openfl/_internal/renderer/dom/DOMDisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_RenderEvent
#include <openfl/events/RenderEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26400284d5456c16_845_new,"openfl.display.DisplayObject","new",0xb225b469,"openfl.display.DisplayObject.new","openfl/display/DisplayObject.hx",845,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_881_addEventListener,"openfl.display.DisplayObject","addEventListener",0xe74b9624,"openfl.display.DisplayObject.addEventListener","openfl/display/DisplayObject.hx",881,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_921_dispatchEvent,"openfl.display.DisplayObject","dispatchEvent",0xe6cd7049,"openfl.display.DisplayObject.dispatchEvent","openfl/display/DisplayObject.hx",921,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_968_getBounds,"openfl.display.DisplayObject","getBounds",0xdb0a2074,"openfl.display.DisplayObject.getBounds","openfl/display/DisplayObject.hx",968,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1022_getRect,"openfl.display.DisplayObject","getRect",0x17591963,"openfl.display.DisplayObject.getRect","openfl/display/DisplayObject.hx",1022,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1046_globalToLocal,"openfl.display.DisplayObject","globalToLocal",0x8c16f816,"openfl.display.DisplayObject.globalToLocal","openfl/display/DisplayObject.hx",1046,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1062_hitTestObject,"openfl.display.DisplayObject","hitTestObject",0xf7ccfe2d,"openfl.display.DisplayObject.hitTestObject","openfl/display/DisplayObject.hx",1062,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1096_hitTestPoint,"openfl.display.DisplayObject","hitTestPoint",0x05917ca2,"openfl.display.DisplayObject.hitTestPoint","openfl/display/DisplayObject.hx",1096,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1115_invalidate,"openfl.display.DisplayObject","invalidate",0x11e2b892,"openfl.display.DisplayObject.invalidate","openfl/display/DisplayObject.hx",1115,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1145_localToGlobal,"openfl.display.DisplayObject","localToGlobal",0x6853eb12,"openfl.display.DisplayObject.localToGlobal","openfl/display/DisplayObject.hx",1145,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1153_removeEventListener,"openfl.display.DisplayObject","removeEventListener",0x3ae1cdd3,"openfl.display.DisplayObject.removeEventListener","openfl/display/DisplayObject.hx",1153,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1198___cleanup,"openfl.display.DisplayObject","__cleanup",0x25266dcd,"openfl.display.DisplayObject.__cleanup","openfl/display/DisplayObject.hx",1198,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1230___dispatch,"openfl.display.DisplayObject","__dispatch",0x4c54e0f1,"openfl.display.DisplayObject.__dispatch","openfl/display/DisplayObject.hx",1230,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1251___dispatchChildren,"openfl.display.DisplayObject","__dispatchChildren",0xdb948f50,"openfl.display.DisplayObject.__dispatchChildren","openfl/display/DisplayObject.hx",1251,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1258___dispatchEvent,"openfl.display.DisplayObject","__dispatchEvent",0xd8f34d69,"openfl.display.DisplayObject.__dispatchEvent","openfl/display/DisplayObject.hx",1258,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1288___dispatchWithCapture,"openfl.display.DisplayObject","__dispatchWithCapture",0x81f3d9af,"openfl.display.DisplayObject.__dispatchWithCapture","openfl/display/DisplayObject.hx",1288,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1337___enterFrame,"openfl.display.DisplayObject","__enterFrame",0x5c5351ec,"openfl.display.DisplayObject.__enterFrame","openfl/display/DisplayObject.hx",1337,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1346___getBounds,"openfl.display.DisplayObject","__getBounds",0xe772ed94,"openfl.display.DisplayObject.__getBounds","openfl/display/DisplayObject.hx",1346,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1357___getCursor,"openfl.display.DisplayObject","__getCursor",0xc03df5f5,"openfl.display.DisplayObject.__getCursor","openfl/display/DisplayObject.hx",1357,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1362___getFilterBounds,"openfl.display.DisplayObject","__getFilterBounds",0x4d6bbcac,"openfl.display.DisplayObject.__getFilterBounds","openfl/display/DisplayObject.hx",1362,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1390___getInteractive,"openfl.display.DisplayObject","__getInteractive",0xee1ea663,"openfl.display.DisplayObject.__getInteractive","openfl/display/DisplayObject.hx",1390,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1395___getLocalBounds,"openfl.display.DisplayObject","__getLocalBounds",0xd51d8ec1,"openfl.display.DisplayObject.__getLocalBounds","openfl/display/DisplayObject.hx",1395,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1414___getRenderBounds,"openfl.display.DisplayObject","__getRenderBounds",0xb06992ca,"openfl.display.DisplayObject.__getRenderBounds","openfl/display/DisplayObject.hx",1414,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1431___getRenderTransform,"openfl.display.DisplayObject","__getRenderTransform",0x9985c437,"openfl.display.DisplayObject.__getRenderTransform","openfl/display/DisplayObject.hx",1431,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1439___getWorldTransform,"openfl.display.DisplayObject","__getWorldTransform",0x71693ad9,"openfl.display.DisplayObject.__getWorldTransform","openfl/display/DisplayObject.hx",1439,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1479___globalToLocal,"openfl.display.DisplayObject","__globalToLocal",0x7e3cd536,"openfl.display.DisplayObject.__globalToLocal","openfl/display/DisplayObject.hx",1479,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1499___hitTest,"openfl.display.DisplayObject","__hitTest",0x5c63c1ee,"openfl.display.DisplayObject.__hitTest","openfl/display/DisplayObject.hx",1499,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1525___hitTestMask,"openfl.display.DisplayObject","__hitTestMask",0x5c65bdfa,"openfl.display.DisplayObject.__hitTestMask","openfl/display/DisplayObject.hx",1525,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1544___readGraphicsData,"openfl.display.DisplayObject","__readGraphicsData",0xd9311e42,"openfl.display.DisplayObject.__readGraphicsData","openfl/display/DisplayObject.hx",1544,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1553___renderCairo,"openfl.display.DisplayObject","__renderCairo",0x75ab477b,"openfl.display.DisplayObject.__renderCairo","openfl/display/DisplayObject.hx",1553,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1577___renderCairoMask,"openfl.display.DisplayObject","__renderCairoMask",0x9fd38e07,"openfl.display.DisplayObject.__renderCairoMask","openfl/display/DisplayObject.hx",1577,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1587___renderCanvas,"openfl.display.DisplayObject","__renderCanvas",0x83845285,"openfl.display.DisplayObject.__renderCanvas","openfl/display/DisplayObject.hx",1587,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1612___renderCanvasMask,"openfl.display.DisplayObject","__renderCanvasMask",0x388fe611,"openfl.display.DisplayObject.__renderCanvasMask","openfl/display/DisplayObject.hx",1612,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1621___renderDOM,"openfl.display.DisplayObject","__renderDOM",0xd2568ab5,"openfl.display.DisplayObject.__renderDOM","openfl/display/DisplayObject.hx",1621,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1645___renderDOMClear,"openfl.display.DisplayObject","__renderDOMClear",0x6fd66698,"openfl.display.DisplayObject.__renderDOMClear","openfl/display/DisplayObject.hx",1645,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1652___renderEvent,"openfl.display.DisplayObject","__renderEvent",0xaa56df0d,"openfl.display.DisplayObject.__renderEvent","openfl/display/DisplayObject.hx",1652,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1716___renderGL,"openfl.display.DisplayObject","__renderGL",0xe0ccbd32,"openfl.display.DisplayObject.__renderGL","openfl/display/DisplayObject.hx",1716,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1737___renderGLMask,"openfl.display.DisplayObject","__renderGLMask",0xefa7ab3e,"openfl.display.DisplayObject.__renderGLMask","openfl/display/DisplayObject.hx",1737,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1747___setParentRenderDirty,"openfl.display.DisplayObject","__setParentRenderDirty",0x844e2287,"openfl.display.DisplayObject.__setParentRenderDirty","openfl/display/DisplayObject.hx",1747,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1762___setRenderDirty,"openfl.display.DisplayObject","__setRenderDirty",0x7766cdd1,"openfl.display.DisplayObject.__setRenderDirty","openfl/display/DisplayObject.hx",1762,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1774___setStageReference,"openfl.display.DisplayObject","__setStageReference",0xda522b58,"openfl.display.DisplayObject.__setStageReference","openfl/display/DisplayObject.hx",1774,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1781___setTransformDirty,"openfl.display.DisplayObject","__setTransformDirty",0x7e906131,"openfl.display.DisplayObject.__setTransformDirty","openfl/display/DisplayObject.hx",1781,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1795___setWorldTransformInvalid,"openfl.display.DisplayObject","__setWorldTransformInvalid",0x82c84692,"openfl.display.DisplayObject.__setWorldTransformInvalid","openfl/display/DisplayObject.hx",1795,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1800___shouldCacheHardware,"openfl.display.DisplayObject","__shouldCacheHardware",0xd7864a00,"openfl.display.DisplayObject.__shouldCacheHardware","openfl/display/DisplayObject.hx",1800,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1815___stopAllMovieClips,"openfl.display.DisplayObject","__stopAllMovieClips",0x3954cfdb,"openfl.display.DisplayObject.__stopAllMovieClips","openfl/display/DisplayObject.hx",1815,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1822___update,"openfl.display.DisplayObject","__update",0x3f3ecc80,"openfl.display.DisplayObject.__update","openfl/display/DisplayObject.hx",1822,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1947___updateCacheBitmap,"openfl.display.DisplayObject","__updateCacheBitmap",0x0c735731,"openfl.display.DisplayObject.__updateCacheBitmap","openfl/display/DisplayObject.hx",1947,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2485___updateTransforms,"openfl.display.DisplayObject","__updateTransforms",0x37510227,"openfl.display.DisplayObject.__updateTransforms","openfl/display/DisplayObject.hx",2485,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2542_get_alpha,"openfl.display.DisplayObject","get_alpha",0x5dd6147e,"openfl.display.DisplayObject.get_alpha","openfl/display/DisplayObject.hx",2542,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2547_set_alpha,"openfl.display.DisplayObject","set_alpha",0x4127008a,"openfl.display.DisplayObject.set_alpha","openfl/display/DisplayObject.hx",2547,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2560_get_blendMode,"openfl.display.DisplayObject","get_blendMode",0xee046174,"openfl.display.DisplayObject.get_blendMode","openfl/display/DisplayObject.hx",2560,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2565_set_blendMode,"openfl.display.DisplayObject","set_blendMode",0x330a4380,"openfl.display.DisplayObject.set_blendMode","openfl/display/DisplayObject.hx",2565,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2577_get_cacheAsBitmap,"openfl.display.DisplayObject","get_cacheAsBitmap",0xa5311003,"openfl.display.DisplayObject.get_cacheAsBitmap","openfl/display/DisplayObject.hx",2577,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2582_set_cacheAsBitmap,"openfl.display.DisplayObject","set_cacheAsBitmap",0xc89ee80f,"openfl.display.DisplayObject.set_cacheAsBitmap","openfl/display/DisplayObject.hx",2582,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2597_get_cacheAsBitmapMatrix,"openfl.display.DisplayObject","get_cacheAsBitmapMatrix",0xe47a1ea4,"openfl.display.DisplayObject.get_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",2597,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2602_set_cacheAsBitmapMatrix,"openfl.display.DisplayObject","set_cacheAsBitmapMatrix",0xe6db87b0,"openfl.display.DisplayObject.set_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",2602,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2612_get_filters,"openfl.display.DisplayObject","get_filters",0x661396db,"openfl.display.DisplayObject.get_filters","openfl/display/DisplayObject.hx",2612,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2625_set_filters,"openfl.display.DisplayObject","set_filters",0x70809de7,"openfl.display.DisplayObject.set_filters","openfl/display/DisplayObject.hx",2625,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2648_get_height,"openfl.display.DisplayObject","get_height",0x7d8c16c7,"openfl.display.DisplayObject.get_height","openfl/display/DisplayObject.hx",2648,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2659_set_height,"openfl.display.DisplayObject","set_height",0x8109b53b,"openfl.display.DisplayObject.set_height","openfl/display/DisplayObject.hx",2659,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2685_get_loaderInfo,"openfl.display.DisplayObject","get_loaderInfo",0x6805b101,"openfl.display.DisplayObject.get_loaderInfo","openfl/display/DisplayObject.hx",2685,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2700_get_mask,"openfl.display.DisplayObject","get_mask",0xd81ad7cc,"openfl.display.DisplayObject.get_mask","openfl/display/DisplayObject.hx",2700,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2705_set_mask,"openfl.display.DisplayObject","set_mask",0x86783140,"openfl.display.DisplayObject.set_mask","openfl/display/DisplayObject.hx",2705,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2748_get_mouseX,"openfl.display.DisplayObject","get_mouseX",0x474e5973,"openfl.display.DisplayObject.get_mouseX","openfl/display/DisplayObject.hx",2748,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2758_get_mouseY,"openfl.display.DisplayObject","get_mouseY",0x474e5974,"openfl.display.DisplayObject.get_mouseY","openfl/display/DisplayObject.hx",2758,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2770_get_name,"openfl.display.DisplayObject","get_name",0xd8c4092b,"openfl.display.DisplayObject.get_name","openfl/display/DisplayObject.hx",2770,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2777_set_name,"openfl.display.DisplayObject","set_name",0x8721629f,"openfl.display.DisplayObject.set_name","openfl/display/DisplayObject.hx",2777,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2782_get_root,"openfl.display.DisplayObject","get_root",0xdb738502,"openfl.display.DisplayObject.get_root","openfl/display/DisplayObject.hx",2782,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2797_get_rotation,"openfl.display.DisplayObject","get_rotation",0xdf0fc41e,"openfl.display.DisplayObject.get_rotation","openfl/display/DisplayObject.hx",2797,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2802_set_rotation,"openfl.display.DisplayObject","set_rotation",0xf408e792,"openfl.display.DisplayObject.set_rotation","openfl/display/DisplayObject.hx",2802,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2827_get_scaleX,"openfl.display.DisplayObject","get_scaleX",0xb765f96e,"openfl.display.DisplayObject.get_scaleX","openfl/display/DisplayObject.hx",2827,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2832_set_scaleX,"openfl.display.DisplayObject","set_scaleX",0xbae397e2,"openfl.display.DisplayObject.set_scaleX","openfl/display/DisplayObject.hx",2832,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2868_get_scaleY,"openfl.display.DisplayObject","get_scaleY",0xb765f96f,"openfl.display.DisplayObject.get_scaleY","openfl/display/DisplayObject.hx",2868,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2873_set_scaleY,"openfl.display.DisplayObject","set_scaleY",0xbae397e3,"openfl.display.DisplayObject.set_scaleY","openfl/display/DisplayObject.hx",2873,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2907_get_scrollRect,"openfl.display.DisplayObject","get_scrollRect",0xba87dab1,"openfl.display.DisplayObject.get_scrollRect","openfl/display/DisplayObject.hx",2907,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2920_set_scrollRect,"openfl.display.DisplayObject","set_scrollRect",0xdaa7c325,"openfl.display.DisplayObject.set_scrollRect","openfl/display/DisplayObject.hx",2920,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2941_get_shader,"openfl.display.DisplayObject","get_shader",0x9860ce05,"openfl.display.DisplayObject.get_shader","openfl/display/DisplayObject.hx",2941,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2946_set_shader,"openfl.display.DisplayObject","set_shader",0x9bde6c79,"openfl.display.DisplayObject.set_shader","openfl/display/DisplayObject.hx",2946,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2955_get_transform,"openfl.display.DisplayObject","get_transform",0x275faa8c,"openfl.display.DisplayObject.get_transform","openfl/display/DisplayObject.hx",2955,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2968_set_transform,"openfl.display.DisplayObject","set_transform",0x6c658c98,"openfl.display.DisplayObject.set_transform","openfl/display/DisplayObject.hx",2968,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_2999_get_visible,"openfl.display.DisplayObject","get_visible",0xfff16d92,"openfl.display.DisplayObject.get_visible","openfl/display/DisplayObject.hx",2999,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_3004_set_visible,"openfl.display.DisplayObject","set_visible",0x0a5e749e,"openfl.display.DisplayObject.set_visible","openfl/display/DisplayObject.hx",3004,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_3012_get_width,"openfl.display.DisplayObject","get_width",0x06a22326,"openfl.display.DisplayObject.get_width","openfl/display/DisplayObject.hx",3012,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_3023_set_width,"openfl.display.DisplayObject","set_width",0xe9f30f32,"openfl.display.DisplayObject.set_width","openfl/display/DisplayObject.hx",3023,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_3051_get_x,"openfl.display.DisplayObject","get_x",0xc67a5d98,"openfl.display.DisplayObject.get_x","openfl/display/DisplayObject.hx",3051,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_3056_set_x,"openfl.display.DisplayObject","set_x",0xaf4953a4,"openfl.display.DisplayObject.set_x","openfl/display/DisplayObject.hx",3056,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_3066_get_y,"openfl.display.DisplayObject","get_y",0xc67a5d99,"openfl.display.DisplayObject.get_y","openfl/display/DisplayObject.hx",3066,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_3071_set_y,"openfl.display.DisplayObject","set_y",0xaf4953a5,"openfl.display.DisplayObject.set_y","openfl/display/DisplayObject.hx",3071,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1186___calculateAbsoluteTransform,"openfl.display.DisplayObject","__calculateAbsoluteTransform",0xba65dba6,"openfl.display.DisplayObject.__calculateAbsoluteTransform","openfl/display/DisplayObject.hx",1186,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_201_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",201,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_203_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",203,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_204_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",204,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_205_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",205,0xc7539829)
namespace openfl{
namespace display{

void DisplayObject_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_845_new)
HXLINE( 847)		super::__construct(null());
HXLINE( 849)		this->_hx___alpha = (int)1;
HXLINE( 850)		this->_hx___blendMode = (int)10;
HXLINE( 851)		this->_hx___cacheAsBitmap = false;
HXLINE( 852)		this->_hx___transform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 853)		this->_hx___visible = true;
HXLINE( 855)		this->_hx___rotation = (int)0;
HXLINE( 856)		this->_hx___rotationSine = (int)0;
HXLINE( 857)		this->_hx___rotationCosine = (int)1;
HXLINE( 858)		this->_hx___scaleX = (int)1;
HXLINE( 859)		this->_hx___scaleY = (int)1;
HXLINE( 861)		this->_hx___worldAlpha = (int)1;
HXLINE( 862)		this->_hx___worldBlendMode = (int)10;
HXLINE( 863)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 864)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 865)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 866)		this->_hx___worldVisible = true;
HXLINE( 868)		this->set_name((HX_("instance",95,1f,e1,59) + ++::openfl::display::DisplayObject_obj::_hx___instanceCount));
HXLINE( 870)		if (hx::IsNotNull( ::openfl::display::DisplayObject_obj::_hx___initStage )) {
HXLINE( 872)			this->stage = ::openfl::display::DisplayObject_obj::_hx___initStage;
HXLINE( 873)			::openfl::display::DisplayObject_obj::_hx___initStage = null();
HXLINE( 874)			this->stage->addChild(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic DisplayObject_obj::__CreateEmpty() { return new DisplayObject_obj; }

void *DisplayObject_obj::_hx_vtable = 0;

Dynamic DisplayObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::geom::Rectangle, ::openfl::geom::Matrix))&::openfl::display::DisplayObject_obj::_hx___getBounds,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::DisplayObject_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::DisplayObject_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::DisplayObject_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::DisplayObject_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::display::DOMRenderer))&::openfl::display::DisplayObject_obj::_hx___renderDOM,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::DisplayObject_obj::_hx___renderGL,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::DisplayObject_obj::_hx___renderGLMask,
	( void (hx::Object::*)(bool,bool))&::openfl::display::DisplayObject_obj::_hx___update,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::DisplayObject_obj::_hx___updateTransforms,
};

void *DisplayObject_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable;
	}
	return super::_hx_getInterface(inHash);
}

void DisplayObject_obj::addEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture,hx::Null< int >  __o_priority,hx::Null< bool >  __o_useWeakReference){
bool useCapture = __o_useCapture.Default(false);
int priority = __o_priority.Default(0);
bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_881_addEventListener)
HXLINE( 883)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE( 887)			if (!(::haxe::IMap_obj::exists(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type))) {
HXLINE( 889)				::haxe::IMap_obj::set(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type,::Array_obj< ::Dynamic>::__new(0));
            			}
HXLINE( 893)			::Array< ::Dynamic> dispatchers = ( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) );
HXLINE( 895)			if ((dispatchers->indexOf(hx::ObjectPtr<OBJ_>(this),null()) == (int)-1)) {
HXLINE( 897)				dispatchers->push(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 885)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("clearDOM",f5,22,08,31)) ||  (_hx_switch_0==HX_("renderCairo",52,5d,ca,0c)) ||  (_hx_switch_0==HX_("renderCanvas",ce,58,98,27)) ||  (_hx_switch_0==HX_("renderDOM",cc,ac,57,cd)) ||  (_hx_switch_0==HX_("renderOpenGL",65,4c,ea,90)) ){
HXLINE( 903)			if (hx::IsNull( this->_hx___customRenderEvent )) {
HXLINE( 905)				this->_hx___customRenderEvent =  ::openfl::events::RenderEvent_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 906)				this->_hx___customRenderEvent->objectColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 907)				this->_hx___customRenderEvent->objectMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 908)				this->_hx___customRenderClear = true;
            			}
HXLINE( 903)			goto _hx_goto_1;
            		}
            		/* default */{
            		}
            		_hx_goto_1:;
HXLINE( 916)		this->super::addEventListener(type,listener,useCapture,priority,useWeakReference);
            	}


bool DisplayObject_obj::dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_921_dispatchEvent)
HXLINE( 923)		if (::Std_obj::is(event,hx::ClassOf< ::openfl::events::MouseEvent >())) {
HXLINE( 925)			 ::openfl::events::MouseEvent mouseEvent = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 926)			 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 926)			Float _hx_tmp = (mouseEvent->localX * _this->a);
HXDLIN( 926)			mouseEvent->stageX = ((_hx_tmp + (mouseEvent->localY * _this->c)) + _this->tx);
HXLINE( 927)			 ::openfl::geom::Matrix _this1 = this->_hx___getRenderTransform();
HXDLIN( 927)			Float _hx_tmp1 = (mouseEvent->localX * _this1->b);
HXDLIN( 927)			mouseEvent->stageY = ((_hx_tmp1 + (mouseEvent->localY * _this1->d)) + _this1->ty);
            		}
            		else {
HXLINE( 929)			if (::Std_obj::is(event,hx::ClassOf< ::openfl::events::TouchEvent >())) {
HXLINE( 931)				 ::openfl::events::TouchEvent touchEvent = ( ( ::openfl::events::TouchEvent)(event) );
HXLINE( 932)				 ::openfl::geom::Matrix _this2 = this->_hx___getRenderTransform();
HXDLIN( 932)				Float _hx_tmp2 = (touchEvent->localX * _this2->a);
HXDLIN( 932)				touchEvent->stageX = ((_hx_tmp2 + (touchEvent->localY * _this2->c)) + _this2->tx);
HXLINE( 933)				 ::openfl::geom::Matrix _this3 = this->_hx___getRenderTransform();
HXDLIN( 933)				Float _hx_tmp3 = (touchEvent->localX * _this3->b);
HXDLIN( 933)				touchEvent->stageY = ((_hx_tmp3 + (touchEvent->localY * _this3->d)) + _this3->ty);
            			}
            		}
HXLINE( 937)		event->target = hx::ObjectPtr<OBJ_>(this);
HXLINE( 939)		return this->_hx___dispatchWithCapture(event);
            	}


 ::openfl::geom::Rectangle DisplayObject_obj::getBounds( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_968_getBounds)
HXLINE( 970)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 972)		bool _hx_tmp;
HXDLIN( 972)		if (hx::IsNotNull( targetCoordinateSpace )) {
HXLINE( 972)			_hx_tmp = hx::IsNotEq( targetCoordinateSpace,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 972)			_hx_tmp = false;
            		}
HXDLIN( 972)		if (_hx_tmp) {
HXLINE( 974)			matrix->copyFrom(this->_hx___getWorldTransform());
HXLINE( 976)			 ::openfl::geom::Matrix targetMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 978)			targetMatrix->copyFrom(targetCoordinateSpace->_hx___getWorldTransform());
HXLINE( 979)			targetMatrix->invert();
HXLINE( 981)			matrix->concat(targetMatrix);
HXLINE( 983)			::openfl::geom::Matrix_obj::_hx___pool->release(targetMatrix);
            		}
            		else {
HXLINE( 987)			matrix->identity();
            		}
HXLINE( 991)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 992)		this->_hx___getBounds(bounds,matrix);
HXLINE( 994)		::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE( 996)		return bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getBounds,return )

 ::openfl::geom::Rectangle DisplayObject_obj::getRect( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1022_getRect)
HXDLIN(1022)		return this->getBounds(targetCoordinateSpace);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getRect,return )

 ::openfl::geom::Point DisplayObject_obj::globalToLocal( ::openfl::geom::Point pos){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1046_globalToLocal)
HXDLIN(1046)		return this->_hx___globalToLocal(pos, ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,globalToLocal,return )

bool DisplayObject_obj::hitTestObject( ::openfl::display::DisplayObject obj){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1062_hitTestObject)
HXLINE(1064)		bool _hx_tmp;
HXDLIN(1064)		bool _hx_tmp1;
HXDLIN(1064)		if (hx::IsNotNull( obj )) {
HXLINE(1064)			_hx_tmp1 = hx::IsNotNull( obj->parent );
            		}
            		else {
HXLINE(1064)			_hx_tmp1 = false;
            		}
HXDLIN(1064)		if (_hx_tmp1) {
HXLINE(1064)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE(1064)			_hx_tmp = false;
            		}
HXDLIN(1064)		if (_hx_tmp) {
HXLINE(1066)			 ::openfl::geom::Rectangle currentBounds = this->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE(1067)			 ::openfl::geom::Rectangle targetBounds = obj->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE(1069)			return currentBounds->intersects(targetBounds);
            		}
HXLINE(1073)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTestObject,return )

bool DisplayObject_obj::hitTestPoint(Float x,Float y,hx::Null< bool >  __o_shapeFlag){
bool shapeFlag = __o_shapeFlag.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1096_hitTestPoint)
HXDLIN(1096)		if (hx::IsNotNull( this->stage )) {
HXLINE(1098)			return this->_hx___hitTest(x,y,shapeFlag,null(),false,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE(1102)			return false;
            		}
HXLINE(1096)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,hitTestPoint,return )

void DisplayObject_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1115_invalidate)
HXDLIN(1115)		if (!(this->_hx___renderDirty)) {
HXDLIN(1115)			this->_hx___renderDirty = true;
HXDLIN(1115)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,invalidate,(void))

 ::openfl::geom::Point DisplayObject_obj::localToGlobal( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1145_localToGlobal)
HXDLIN(1145)		return this->_hx___getRenderTransform()->transformPoint(point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,localToGlobal,return )

void DisplayObject_obj::removeEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture){
bool useCapture = __o_useCapture.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1153_removeEventListener)
HXLINE(1155)		this->super::removeEventListener(type,listener,useCapture);
HXLINE(1157)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE(1161)			if (!(this->hasEventListener(type))) {
HXLINE(1163)				if (::haxe::IMap_obj::exists(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) {
HXLINE(1165)					( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) )->remove(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE(1161)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("clearDOM",f5,22,08,31)) ||  (_hx_switch_0==HX_("renderCairo",52,5d,ca,0c)) ||  (_hx_switch_0==HX_("renderCanvas",ce,58,98,27)) ||  (_hx_switch_0==HX_("renderDOM",cc,ac,57,cd)) ||  (_hx_switch_0==HX_("renderOpenGL",65,4c,ea,90)) ){
HXLINE(1173)			bool _hx_tmp;
HXDLIN(1173)			bool _hx_tmp1;
HXDLIN(1173)			bool _hx_tmp2;
HXDLIN(1173)			bool _hx_tmp3;
HXDLIN(1173)			if (!(this->hasEventListener(HX_("clearDOM",f5,22,08,31)))) {
HXLINE(1173)				_hx_tmp3 = !(this->hasEventListener(HX_("renderCairo",52,5d,ca,0c)));
            			}
            			else {
HXLINE(1173)				_hx_tmp3 = false;
            			}
HXDLIN(1173)			if (_hx_tmp3) {
HXLINE(1173)				_hx_tmp2 = !(this->hasEventListener(HX_("renderCanvas",ce,58,98,27)));
            			}
            			else {
HXLINE(1173)				_hx_tmp2 = false;
            			}
HXDLIN(1173)			if (_hx_tmp2) {
HXLINE(1173)				_hx_tmp1 = !(this->hasEventListener(HX_("renderDOM",cc,ac,57,cd)));
            			}
            			else {
HXLINE(1173)				_hx_tmp1 = false;
            			}
HXDLIN(1173)			if (_hx_tmp1) {
HXLINE(1173)				_hx_tmp = !(this->hasEventListener(HX_("renderOpenGL",65,4c,ea,90)));
            			}
            			else {
HXLINE(1173)				_hx_tmp = false;
            			}
HXDLIN(1173)			if (_hx_tmp) {
HXLINE(1175)				this->_hx___customRenderEvent = null();
            			}
HXLINE(1173)			goto _hx_goto_11;
            		}
            		/* default */{
            		}
            		_hx_goto_11:;
            	}


void DisplayObject_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1198___cleanup)
HXLINE(1200)		this->_hx___cairo = null();
HXLINE(1207)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1209)			this->_hx___graphics->_hx___cleanup();
            		}
HXLINE(1213)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1215)			this->_hx___cacheBitmap->_hx___cleanup();
HXLINE(1216)			this->_hx___cacheBitmap = null();
            		}
HXLINE(1220)		if (hx::IsNotNull( this->_hx___cacheBitmapData )) {
HXLINE(1222)			this->_hx___cacheBitmapData->dispose();
HXLINE(1223)			this->_hx___cacheBitmapData = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___cleanup,(void))

bool DisplayObject_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1230___dispatch)
HXLINE(1232)		bool _hx_tmp;
HXDLIN(1232)		if (hx::IsNotNull( this->_hx___eventMap )) {
HXLINE(1232)			_hx_tmp = this->hasEventListener(event->type);
            		}
            		else {
HXLINE(1232)			_hx_tmp = false;
            		}
HXDLIN(1232)		if (_hx_tmp) {
HXLINE(1234)			bool result = this->super::_hx___dispatchEvent(event);
HXLINE(1236)			if (event->_hx___isCanceled) {
HXLINE(1238)				return true;
            			}
HXLINE(1242)			return result;
            		}
HXLINE(1246)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatch,return )

void DisplayObject_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1251___dispatchChildren)
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatchChildren,(void))

bool DisplayObject_obj::_hx___dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1258___dispatchEvent)
HXLINE(1260)		 ::openfl::display::DisplayObjectContainer parent;
HXDLIN(1260)		if (event->bubbles) {
HXLINE(1260)			parent = this->parent;
            		}
            		else {
HXLINE(1260)			parent = null();
            		}
HXLINE(1261)		bool result = this->super::_hx___dispatchEvent(event);
HXLINE(1263)		if (event->_hx___isCanceled) {
HXLINE(1265)			return true;
            		}
HXLINE(1269)		bool _hx_tmp;
HXDLIN(1269)		if (hx::IsNotNull( parent )) {
HXLINE(1269)			_hx_tmp = hx::IsNotEq( parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(1269)			_hx_tmp = false;
            		}
HXDLIN(1269)		if (_hx_tmp) {
HXLINE(1271)			event->eventPhase = (int)3;
HXLINE(1273)			if (hx::IsNull( event->target )) {
HXLINE(1275)				event->target = hx::ObjectPtr<OBJ_>(this);
            			}
HXLINE(1279)			parent->_hx___dispatchEvent(event);
            		}
HXLINE(1283)		return result;
            	}


bool DisplayObject_obj::_hx___dispatchWithCapture( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1288___dispatchWithCapture)
HXLINE(1290)		if (hx::IsNull( event->target )) {
HXLINE(1292)			event->target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1296)		if (hx::IsNotNull( this->parent )) {
HXLINE(1298)			event->eventPhase = (int)1;
HXLINE(1300)			if (hx::IsEq( this->parent,this->stage )) {
HXLINE(1302)				this->parent->_hx___dispatch(event);
            			}
            			else {
HXLINE(1306)				 ::openfl::_Vector::ObjectVector stack = ::openfl::display::DisplayObject_obj::_hx___tempStack->get();
HXLINE(1307)				 ::openfl::display::DisplayObjectContainer parent = this->parent;
HXLINE(1308)				int i = (int)0;
HXLINE(1310)				while(hx::IsNotNull( parent )){
HXLINE(1312)					stack->set(i,parent).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1313)					parent = parent->parent;
HXLINE(1314)					i = (i + (int)1);
            				}
HXLINE(1318)				{
HXLINE(1318)					int _g1 = (int)0;
HXDLIN(1318)					int _g = i;
HXDLIN(1318)					while((_g1 < _g)){
HXLINE(1318)						_g1 = (_g1 + (int)1);
HXDLIN(1318)						int j = (_g1 - (int)1);
HXLINE(1320)						stack->get(((i - j) - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
            					}
            				}
HXLINE(1324)				::openfl::display::DisplayObject_obj::_hx___tempStack->release(stack);
            			}
            		}
HXLINE(1330)		event->eventPhase = (int)2;
HXLINE(1332)		return this->_hx___dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatchWithCapture,return )

void DisplayObject_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1337___enterFrame)
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___enterFrame,(void))

void DisplayObject_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1346___getBounds)
HXDLIN(1346)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1348)			this->_hx___graphics->_hx___getBounds(rect,matrix);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getBounds,(void))

 ::lime::ui::MouseCursor DisplayObject_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1357___getCursor)
HXDLIN(1357)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getCursor,return )

void DisplayObject_obj::_hx___getFilterBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1362___getFilterBounds)
HXLINE(1366)		this->_hx___getBounds(rect,matrix);
HXLINE(1368)		if (hx::IsNotNull( this->_hx___filters )) {
HXLINE(1370)			 ::openfl::geom::Rectangle extension = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1372)			{
HXLINE(1372)				int _g = (int)0;
HXDLIN(1372)				::Array< ::Dynamic> _g1 = this->_hx___filters;
HXDLIN(1372)				while((_g < _g1->length)){
HXLINE(1372)					 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1372)					_g = (_g + (int)1);
HXLINE(1373)					int _hx_tmp = -(filter->_hx___leftExtension);
HXDLIN(1373)					int _hx_tmp1 = -(filter->_hx___topExtension);
HXDLIN(1373)					int _hx_tmp2 = (filter->_hx___leftExtension + filter->_hx___rightExtension);
HXDLIN(1373)					extension->_hx___expand(_hx_tmp,_hx_tmp1,_hx_tmp2,(filter->_hx___topExtension + filter->_hx___bottomExtension));
            				}
            			}
HXLINE(1376)			 ::openfl::geom::Rectangle rect1 = rect;
HXDLIN(1376)			rect1->width = (rect1->width + extension->width);
HXLINE(1377)			 ::openfl::geom::Rectangle rect2 = rect;
HXDLIN(1377)			rect2->height = (rect2->height + extension->height);
HXLINE(1378)			 ::openfl::geom::Rectangle rect3 = rect;
HXDLIN(1378)			rect3->x = (rect3->x + extension->x);
HXLINE(1379)			 ::openfl::geom::Rectangle rect4 = rect;
HXDLIN(1379)			rect4->y = (rect4->y + extension->y);
HXLINE(1381)			::openfl::geom::Rectangle_obj::_hx___pool->release(extension);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getFilterBounds,(void))

bool DisplayObject_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1390___getInteractive)
HXDLIN(1390)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getInteractive,return )

void DisplayObject_obj::_hx___getLocalBounds( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1395___getLocalBounds)
HXLINE(1401)		this->_hx___getBounds(rect,this->_hx___transform);
HXLINE(1406)		 ::openfl::geom::Rectangle rect1 = rect;
HXDLIN(1406)		rect1->x = (rect1->x - this->_hx___transform->tx);
HXLINE(1407)		 ::openfl::geom::Rectangle rect2 = rect;
HXDLIN(1407)		rect2->y = (rect2->y - this->_hx___transform->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getLocalBounds,(void))

void DisplayObject_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1414___getRenderBounds)
HXDLIN(1414)		if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE(1416)			this->_hx___getBounds(rect,matrix);
            		}
            		else {
HXLINE(1420)			 ::openfl::geom::Rectangle r = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1421)			r->copyFrom(this->_hx___scrollRect);
HXLINE(1422)			r->_hx___transform(r,matrix);
HXLINE(1423)			rect->_hx___expand(matrix->tx,matrix->ty,r->width,r->height);
HXLINE(1424)			::openfl::geom::Rectangle_obj::_hx___pool->release(r);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getRenderBounds,(void))

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getRenderTransform(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1431___getRenderTransform)
HXLINE(1433)		this->_hx___getWorldTransform();
HXLINE(1434)		return this->_hx___renderTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getRenderTransform,return )

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getWorldTransform(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1439___getWorldTransform)
HXLINE(1441)		bool transformDirty;
HXDLIN(1441)		if (!(this->_hx___transformDirty)) {
HXLINE(1441)			transformDirty = this->_hx___worldTransformInvalid;
            		}
            		else {
HXLINE(1441)			transformDirty = true;
            		}
HXLINE(1443)		if (transformDirty) {
HXLINE(1445)			::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1446)			 ::openfl::display::DisplayObject current = hx::ObjectPtr<OBJ_>(this);
HXLINE(1448)			if (hx::IsNull( this->parent )) {
HXLINE(1450)				this->_hx___update(true,false);
            			}
            			else {
HXLINE(1454)				while(hx::IsNotEq( current,this->stage )){
HXLINE(1456)					list->push(current);
HXLINE(1457)					current = current->parent;
HXLINE(1459)					if (hx::IsNull( current )) {
HXLINE(1459)						goto _hx_goto_29;
            					}
            				}
            				_hx_goto_29:;
            			}
HXLINE(1464)			int i = list->length;
HXLINE(1465)			while(true){
HXLINE(1465)				i = (i - (int)1);
HXDLIN(1465)				if (!((i >= (int)0))) {
HXLINE(1465)					goto _hx_goto_30;
            				}
HXLINE(1467)				current = list->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1468)				current->_hx___update(true,false);
            			}
            			_hx_goto_30:;
            		}
HXLINE(1474)		return this->_hx___worldTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getWorldTransform,return )

 ::openfl::geom::Point DisplayObject_obj::_hx___globalToLocal( ::openfl::geom::Point global, ::openfl::geom::Point local){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1479___globalToLocal)
HXLINE(1481)		this->_hx___getRenderTransform();
HXLINE(1483)		if (hx::IsEq( global,local )) {
HXLINE(1485)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1485)			Float norm = (_this->a * _this->d);
HXDLIN(1485)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1485)			if ((norm1 == (int)0)) {
HXLINE(1485)				global->x = -(_this->tx);
HXDLIN(1485)				global->y = -(_this->ty);
            			}
            			else {
HXLINE(1485)				Float _this1 = _this->c;
HXDLIN(1485)				Float px = (_this1 * (_this->ty - global->y));
HXDLIN(1485)				Float _this2 = _this->d;
HXDLIN(1485)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (global->x - _this->tx))));
HXDLIN(1485)				Float _this3 = _this->a;
HXDLIN(1485)				Float _hx_tmp = (_this3 * (global->y - _this->ty));
HXDLIN(1485)				Float _this4 = _this->b;
HXDLIN(1485)				global->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - global->x))));
HXDLIN(1485)				global->x = px1;
            			}
            		}
            		else {
HXLINE(1489)			 ::openfl::geom::Matrix _this5 = this->_hx___renderTransform;
HXDLIN(1489)			Float norm2 = (_this5->a * _this5->d);
HXDLIN(1489)			Float norm3 = (norm2 - (_this5->b * _this5->c));
HXDLIN(1489)			Float _hx_tmp1;
HXDLIN(1489)			if ((norm3 == (int)0)) {
HXLINE(1489)				_hx_tmp1 = -(_this5->tx);
            			}
            			else {
HXLINE(1489)				Float _this6 = _this5->c;
HXDLIN(1489)				Float _hx_tmp2 = (_this6 * (_this5->ty - global->y));
HXDLIN(1489)				Float _this7 = _this5->d;
HXDLIN(1489)				_hx_tmp1 = (((Float)((Float)1.0) / (Float)norm3) * (_hx_tmp2 + (_this7 * (global->x - _this5->tx))));
            			}
HXDLIN(1489)			local->x = _hx_tmp1;
HXLINE(1490)			 ::openfl::geom::Matrix _this8 = this->_hx___renderTransform;
HXDLIN(1490)			Float norm4 = (_this8->a * _this8->d);
HXDLIN(1490)			Float norm5 = (norm4 - (_this8->b * _this8->c));
HXDLIN(1490)			Float _hx_tmp3;
HXDLIN(1490)			if ((norm5 == (int)0)) {
HXLINE(1490)				_hx_tmp3 = -(_this8->ty);
            			}
            			else {
HXLINE(1490)				Float _this9 = _this8->a;
HXDLIN(1490)				Float _hx_tmp4 = (_this9 * (global->y - _this8->ty));
HXDLIN(1490)				Float _this10 = _this8->b;
HXDLIN(1490)				_hx_tmp3 = (((Float)((Float)1.0) / (Float)norm5) * (_hx_tmp4 + (_this10 * (_this8->tx - global->x))));
            			}
HXDLIN(1490)			local->y = _hx_tmp3;
            		}
HXLINE(1494)		return local;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___globalToLocal,return )

bool DisplayObject_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1499___hitTest)
HXLINE(1501)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1503)			bool _hx_tmp;
HXDLIN(1503)			if (!(!(hitObject->_hx___visible))) {
HXLINE(1503)				_hx_tmp = this->_hx___isMask;
            			}
            			else {
HXLINE(1503)				_hx_tmp = true;
            			}
HXDLIN(1503)			if (_hx_tmp) {
HXLINE(1503)				return false;
            			}
HXLINE(1504)			bool _hx_tmp1;
HXDLIN(1504)			if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1504)				_hx_tmp1 = !(this->get_mask()->_hx___hitTestMask(x,y));
            			}
            			else {
HXLINE(1504)				_hx_tmp1 = false;
            			}
HXDLIN(1504)			if (_hx_tmp1) {
HXLINE(1504)				return false;
            			}
HXLINE(1506)			 ::openfl::display::Graphics _hx_tmp2 = this->_hx___graphics;
HXDLIN(1506)			if (_hx_tmp2->_hx___hitTest(x,y,shapeFlag,this->_hx___getRenderTransform())) {
HXLINE(1508)				bool _hx_tmp3;
HXDLIN(1508)				if (hx::IsNotNull( stack )) {
HXLINE(1508)					_hx_tmp3 = !(interactiveOnly);
            				}
            				else {
HXLINE(1508)					_hx_tmp3 = false;
            				}
HXDLIN(1508)				if (_hx_tmp3) {
HXLINE(1510)					stack->push(hitObject);
            				}
HXLINE(1514)				return true;
            			}
            		}
HXLINE(1520)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC6(DisplayObject_obj,_hx___hitTest,return )

bool DisplayObject_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1525___hitTestMask)
HXLINE(1527)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1529)			 ::openfl::display::Graphics _hx_tmp = this->_hx___graphics;
HXDLIN(1529)			if (_hx_tmp->_hx___hitTest(x,y,true,this->_hx___getRenderTransform())) {
HXLINE(1531)				return true;
            			}
            		}
HXLINE(1537)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___hitTestMask,return )

void DisplayObject_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1544___readGraphicsData)
HXDLIN(1544)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1546)			this->_hx___graphics->_hx___readGraphicsData(graphicsData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___readGraphicsData,(void))

void DisplayObject_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1553___renderCairo)
HXLINE(1556)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE(1558)		bool _hx_tmp;
HXDLIN(1558)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1558)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1558)			_hx_tmp = false;
            		}
HXDLIN(1558)		if (_hx_tmp) {
HXLINE(1560)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN(1560)			if (!(!(bitmap->_hx___renderable))) {
HXLINE(1560)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN(1560)				bool _hx_tmp1;
HXDLIN(1560)				bool _hx_tmp2;
HXDLIN(1560)				if ((alpha > (int)0)) {
HXLINE(1560)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE(1560)					_hx_tmp2 = false;
            				}
HXDLIN(1560)				if (_hx_tmp2) {
HXLINE(1560)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE(1560)					_hx_tmp1 = false;
            				}
HXDLIN(1560)				if (_hx_tmp1) {
HXLINE(1560)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN(1560)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN(1560)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN(1560)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN(1560)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN(1560)					if (hx::IsNotNull( surface )) {
HXLINE(1560)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN(1560)						int _hx_tmp3;
HXDLIN(1560)						bool _hx_tmp4;
HXDLIN(1560)						if (renderer->_hx___allowSmoothing) {
HXLINE(1560)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE(1560)							_hx_tmp4 = false;
            						}
HXDLIN(1560)						if (_hx_tmp4) {
HXLINE(1560)							_hx_tmp3 = (int)1;
            						}
            						else {
HXLINE(1560)							_hx_tmp3 = (int)3;
            						}
HXDLIN(1560)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN(1560)						cairo->set_source(pattern);
HXDLIN(1560)						if ((alpha == (int)1)) {
HXLINE(1560)							cairo->paint();
            						}
            						else {
HXLINE(1560)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN(1560)					renderer->_hx___popMaskObject(bitmap,null());
            				}
            			}
            		}
            		else {
HXLINE(1564)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE(1568)		this->_hx___renderEvent(renderer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairo,(void))

void DisplayObject_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1577___renderCairoMask)
HXDLIN(1577)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1579)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairoMask,(void))

void DisplayObject_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1587___renderCanvas)
HXLINE(1589)		bool _hx_tmp;
HXDLIN(1589)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1589)			if ((this->get_mask()->get_width() > (int)0)) {
HXLINE(1589)				_hx_tmp = (this->get_mask()->get_height() > (int)0);
            			}
            			else {
HXLINE(1589)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1589)			_hx_tmp = true;
            		}
HXDLIN(1589)		if (_hx_tmp) {
HXLINE(1591)			this->_hx___updateCacheBitmap(renderer,false);
HXLINE(1593)			bool _hx_tmp1;
HXDLIN(1593)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1593)				_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            			}
            			else {
HXLINE(1593)				_hx_tmp1 = false;
            			}
HXDLIN(1593)			if (_hx_tmp1) {
HXLINE(1595)				 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            			}
            		}
HXLINE(1605)		this->_hx___renderEvent(renderer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvas,(void))

void DisplayObject_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1612___renderCanvasMask)
HXDLIN(1612)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1614)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvasMask,(void))

void DisplayObject_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1621___renderDOM)
HXLINE(1623)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE(1625)		bool _hx_tmp;
HXDLIN(1625)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1625)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1625)			_hx_tmp = false;
            		}
HXDLIN(1625)		if (_hx_tmp) {
HXLINE(1627)			this->_hx___renderDOMClear(renderer);
HXLINE(1628)			this->_hx___cacheBitmap->stage = this->stage;
HXLINE(1630)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            		}
HXLINE(1638)		this->_hx___renderEvent(renderer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderDOM,(void))

void DisplayObject_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1645___renderDOMClear)
HXDLIN(1645)		::openfl::_internal::renderer::dom::DOMDisplayObject_obj::clear(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderDOMClear,(void))

void DisplayObject_obj::_hx___renderEvent( ::openfl::display::DisplayObjectRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1652___renderEvent)
HXDLIN(1652)		bool _hx_tmp;
HXDLIN(1652)		if (hx::IsNotNull( this->_hx___customRenderEvent )) {
HXDLIN(1652)			_hx_tmp = this->_hx___renderable;
            		}
            		else {
HXDLIN(1652)			_hx_tmp = false;
            		}
HXDLIN(1652)		if (_hx_tmp) {
HXLINE(1654)			this->_hx___customRenderEvent->allowSmoothing = renderer->_hx___allowSmoothing;
HXLINE(1655)			this->_hx___customRenderEvent->objectMatrix->copyFrom(this->_hx___renderTransform);
HXLINE(1656)			this->_hx___customRenderEvent->objectColorTransform->_hx___copyFrom(this->_hx___worldColorTransform);
HXLINE(1657)			this->_hx___customRenderEvent->renderer = renderer;
HXLINE(1659)			{
HXLINE(1659)				::String _g = renderer->_hx___type;
HXDLIN(1659)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("cairo",88,30,19,41)) ){
HXLINE(1673)					this->_hx___customRenderEvent->type = HX_("renderCairo",52,5d,ca,0c);
HXDLIN(1673)					goto _hx_goto_42;
            				}
            				if (  (_hx_switch_0==HX_("canvas",d8,54,42,b8)) ){
HXLINE(1689)					this->_hx___customRenderEvent->type = HX_("renderCanvas",ce,58,98,27);
HXDLIN(1689)					goto _hx_goto_42;
            				}
            				if (  (_hx_switch_0==HX_("dom",82,42,4c,00)) ){
HXLINE(1677)					bool _hx_tmp1;
HXDLIN(1677)					if (hx::IsNotNull( this->stage )) {
HXLINE(1677)						_hx_tmp1 = this->_hx___worldVisible;
            					}
            					else {
HXLINE(1677)						_hx_tmp1 = false;
            					}
HXDLIN(1677)					if (_hx_tmp1) {
HXLINE(1679)						this->_hx___customRenderEvent->type = HX_("renderDOM",cc,ac,57,cd);
            					}
            					else {
HXLINE(1683)						this->_hx___customRenderEvent->type = HX_("clearDOM",f5,22,08,31);
            					}
HXLINE(1677)					goto _hx_goto_42;
            				}
            				if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ){
HXLINE(1663)					if (!(renderer->_hx___cleared)) {
HXLINE(1663)						renderer->_hx___clear();
            					}
HXLINE(1665)					 ::openfl::display::OpenGLRenderer renderer1 = ( ( ::openfl::display::OpenGLRenderer)(renderer) );
HXLINE(1666)					renderer1->setShader(this->_hx___worldShader);
HXLINE(1667)					renderer1->_hx___context3D->_hx___flushGL();
HXLINE(1669)					this->_hx___customRenderEvent->type = HX_("renderOpenGL",65,4c,ea,90);
HXLINE(1661)					goto _hx_goto_42;
            				}
            				/* default */{
HXLINE(1693)					return;
            				}
            				_hx_goto_42:;
            			}
HXLINE(1697)			renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXLINE(1698)			renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1700)			this->dispatchEvent(this->_hx___customRenderEvent);
HXLINE(1702)			renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1704)			if ((renderer->_hx___type == HX_("opengl",6f,64,94,21))) {
HXLINE(1706)				 ::openfl::display::OpenGLRenderer renderer2 = ( ( ::openfl::display::OpenGLRenderer)(renderer) );
HXLINE(1707)				renderer2->setViewport();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderEvent,(void))

void DisplayObject_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1716___renderGL)
HXLINE(1718)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE(1720)		bool _hx_tmp;
HXDLIN(1720)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1720)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1720)			_hx_tmp = false;
            		}
HXDLIN(1720)		if (_hx_tmp) {
HXLINE(1722)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE(1726)			bool _hx_tmp1;
HXDLIN(1726)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE(1726)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE(1726)				_hx_tmp1 = false;
            			}
HXDLIN(1726)			if (!(_hx_tmp1)) {
HXLINE(1726)				bool _hx_tmp2;
HXDLIN(1726)				if (!(!(this->_hx___renderable))) {
HXLINE(1726)					_hx_tmp2 = (this->_hx___worldAlpha <= (int)0);
            				}
            				else {
HXLINE(1726)					_hx_tmp2 = true;
            				}
HXDLIN(1726)				if (!(_hx_tmp2)) {
HXLINE(1726)					bool _hx_tmp3;
HXDLIN(1726)					bool _hx_tmp4;
HXDLIN(1726)					bool _hx_tmp5;
HXDLIN(1726)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE(1726)						_hx_tmp5 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(1726)						_hx_tmp5 = false;
            					}
HXDLIN(1726)					if (_hx_tmp5) {
HXLINE(1726)						_hx_tmp4 = (this->get_width() > (int)0);
            					}
            					else {
HXLINE(1726)						_hx_tmp4 = false;
            					}
HXDLIN(1726)					if (_hx_tmp4) {
HXLINE(1726)						_hx_tmp3 = (this->get_height() > (int)0);
            					}
            					else {
HXLINE(1726)						_hx_tmp3 = false;
            					}
HXDLIN(1726)					if (_hx_tmp3) {
HXLINE(1726)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN(1726)						renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(1726)						 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXDLIN(1726)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXDLIN(1726)						Float _hx_tmp6 = this->get_width();
HXDLIN(1726)						rect->setTo((int)0,(int)0,_hx_tmp6,this->get_height());
HXDLIN(1726)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN(1726)						int color = this->opaqueBackground;
HXDLIN(1726)						context->clear(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1,(int)0,(int)0,(int)1);
HXDLIN(1726)						renderer->_hx___popMaskRect();
HXDLIN(1726)						renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(1726)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(1726)					if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1726)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
            		}
HXLINE(1730)		this->_hx___renderEvent(renderer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderGL,(void))

void DisplayObject_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1737___renderGLMask)
HXDLIN(1737)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1740)			::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderGLMask,(void))

void DisplayObject_obj::_hx___setParentRenderDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1747___setParentRenderDirty)
HXLINE(1749)		 ::openfl::display::DisplayObject renderParent;
HXDLIN(1749)		if (hx::IsNotNull( this->_hx___renderParent )) {
HXLINE(1749)			renderParent = this->_hx___renderParent;
            		}
            		else {
HXLINE(1749)			renderParent = this->parent;
            		}
HXLINE(1750)		bool _hx_tmp;
HXDLIN(1750)		if (hx::IsNotNull( renderParent )) {
HXLINE(1750)			_hx_tmp = !(renderParent->_hx___renderDirty);
            		}
            		else {
HXLINE(1750)			_hx_tmp = false;
            		}
HXDLIN(1750)		if (_hx_tmp) {
HXLINE(1752)			renderParent->_hx___renderDirty = true;
HXLINE(1753)			renderParent->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setParentRenderDirty,(void))

void DisplayObject_obj::_hx___setRenderDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1762___setRenderDirty)
HXDLIN(1762)		if (!(this->_hx___renderDirty)) {
HXLINE(1764)			this->_hx___renderDirty = true;
HXLINE(1765)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setRenderDirty,(void))

void DisplayObject_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1774___setStageReference)
HXDLIN(1774)		this->stage = stage;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___setStageReference,(void))

void DisplayObject_obj::_hx___setTransformDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1781___setTransformDirty)
HXDLIN(1781)		if (!(this->_hx___transformDirty)) {
HXLINE(1783)			this->_hx___transformDirty = true;
HXLINE(1785)			this->_hx___setWorldTransformInvalid();
HXLINE(1786)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setTransformDirty,(void))

void DisplayObject_obj::_hx___setWorldTransformInvalid(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1795___setWorldTransformInvalid)
HXDLIN(1795)		this->_hx___worldTransformInvalid = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setWorldTransformInvalid,(void))

 ::Dynamic DisplayObject_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1800___shouldCacheHardware)
HXLINE(1802)		bool _hx_tmp;
HXDLIN(1802)		if (hx::IsNotEq( value,true )) {
HXLINE(1802)			_hx_tmp = hx::IsNotNull( this->_hx___filters );
            		}
            		else {
HXLINE(1802)			_hx_tmp = true;
            		}
HXDLIN(1802)		if (_hx_tmp) {
HXLINE(1802)			return true;
            		}
HXLINE(1804)		bool _hx_tmp1;
HXDLIN(1804)		if (hx::IsNotEq( value,false )) {
HXLINE(1804)			if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1804)				_hx_tmp1 = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::isCompatible(this->_hx___graphics));
            			}
            			else {
HXLINE(1804)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1804)			_hx_tmp1 = true;
            		}
HXDLIN(1804)		if (_hx_tmp1) {
HXLINE(1806)			return false;
            		}
HXLINE(1810)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___shouldCacheHardware,return )

void DisplayObject_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1815___stopAllMovieClips)
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___stopAllMovieClips,(void))

void DisplayObject_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1822___update)
HXLINE(1824)		 ::openfl::display::DisplayObject renderParent;
HXDLIN(1824)		if (hx::IsNotNull( this->_hx___renderParent )) {
HXLINE(1824)			renderParent = this->_hx___renderParent;
            		}
            		else {
HXLINE(1824)			renderParent = this->parent;
            		}
HXLINE(1825)		bool _hx_tmp;
HXDLIN(1825)		if (this->_hx___isMask) {
HXLINE(1825)			_hx_tmp = hx::IsNull( renderParent );
            		}
            		else {
HXLINE(1825)			_hx_tmp = false;
            		}
HXDLIN(1825)		if (_hx_tmp) {
HXLINE(1825)			renderParent = this->_hx___maskTarget;
            		}
HXLINE(1826)		bool _hx_tmp1;
HXDLIN(1826)		bool _hx_tmp2;
HXDLIN(1826)		bool _hx_tmp3;
HXDLIN(1826)		bool _hx_tmp4;
HXDLIN(1826)		if (this->_hx___visible) {
HXLINE(1826)			_hx_tmp4 = (this->_hx___scaleX != (int)0);
            		}
            		else {
HXLINE(1826)			_hx_tmp4 = false;
            		}
HXDLIN(1826)		if (_hx_tmp4) {
HXLINE(1826)			_hx_tmp3 = (this->_hx___scaleY != (int)0);
            		}
            		else {
HXLINE(1826)			_hx_tmp3 = false;
            		}
HXDLIN(1826)		if (_hx_tmp3) {
HXLINE(1826)			_hx_tmp2 = !(this->_hx___isMask);
            		}
            		else {
HXLINE(1826)			_hx_tmp2 = false;
            		}
HXDLIN(1826)		if (_hx_tmp2) {
HXLINE(1826)			if (hx::IsNotNull( renderParent )) {
HXLINE(1826)				_hx_tmp1 = !(renderParent->_hx___isMask);
            			}
            			else {
HXLINE(1826)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(1826)			_hx_tmp1 = false;
            		}
HXDLIN(1826)		this->_hx___renderable = _hx_tmp1;
HXLINE(1827)		this->_hx___updateTransforms(null());
HXLINE(1831)		this->_hx___transformDirty = false;
HXLINE(1835)		this->_hx___worldTransformInvalid = false;
HXLINE(1837)		if (!(transformOnly)) {
HXLINE(1855)			if (hx::IsNotNull( renderParent )) {
HXLINE(1869)				Float _hx_tmp5 = this->get_alpha();
HXDLIN(1869)				this->_hx___worldAlpha = (_hx_tmp5 * renderParent->_hx___worldAlpha);
HXLINE(1873)				if (hx::IsNotNull( this->_hx___objectTransform )) {
HXLINE(1875)					 ::openfl::geom::ColorTransform _hx_tmp6 = this->_hx___worldColorTransform;
HXDLIN(1875)					_hx_tmp6->_hx___copyFrom(this->_hx___objectTransform->get_colorTransform());
HXLINE(1876)					this->_hx___worldColorTransform->_hx___combine(renderParent->_hx___worldColorTransform);
            				}
            				else {
HXLINE(1880)					this->_hx___worldColorTransform->_hx___copyFrom(renderParent->_hx___worldColorTransform);
            				}
HXLINE(1884)				bool _hx_tmp7;
HXDLIN(1884)				if (hx::IsNotNull( this->_hx___blendMode )) {
HXLINE(1884)					_hx_tmp7 = hx::IsEq( this->_hx___blendMode,(int)10 );
            				}
            				else {
HXLINE(1884)					_hx_tmp7 = true;
            				}
HXDLIN(1884)				if (_hx_tmp7) {
HXLINE(1887)					this->_hx___worldBlendMode = renderParent->_hx___blendMode;
            				}
            				else {
HXLINE(1891)					this->_hx___worldBlendMode = this->_hx___blendMode;
            				}
HXLINE(1895)				if (hx::IsNull( this->_hx___shader )) {
HXLINE(1897)					this->_hx___worldShader = renderParent->_hx___shader;
            				}
            				else {
HXLINE(1901)					this->_hx___worldShader = this->_hx___shader;
            				}
            			}
            			else {
HXLINE(1907)				this->_hx___worldAlpha = this->get_alpha();
HXLINE(1918)				if (hx::IsNotNull( this->_hx___objectTransform )) {
HXLINE(1920)					 ::openfl::geom::ColorTransform _hx_tmp8 = this->_hx___worldColorTransform;
HXDLIN(1920)					_hx_tmp8->_hx___copyFrom(this->_hx___objectTransform->get_colorTransform());
            				}
            				else {
HXLINE(1924)					this->_hx___worldColorTransform->_hx___identity();
            				}
            			}
            		}
HXLINE(1938)		bool _hx_tmp9;
HXDLIN(1938)		if (updateChildren) {
HXLINE(1938)			_hx_tmp9 = hx::IsNotNull( this->get_mask() );
            		}
            		else {
HXLINE(1938)			_hx_tmp9 = false;
            		}
HXDLIN(1938)		if (_hx_tmp9) {
HXLINE(1940)			this->get_mask()->_hx___update(transformOnly,true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___update,(void))

bool DisplayObject_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1947___updateCacheBitmap)
HXLINE(1949)		if (this->_hx___isCacheBitmapRender) {
HXLINE(1949)			return false;
            		}
HXLINE(1952)		 ::openfl::geom::ColorTransform colorTransform = ::openfl::geom::ColorTransform_obj::_hx___pool->get();
HXLINE(1953)		colorTransform->_hx___copyFrom(this->_hx___worldColorTransform);
HXLINE(1954)		if (hx::IsNotNull( renderer->_hx___worldColorTransform )) {
HXLINE(1954)			colorTransform->_hx___combine(renderer->_hx___worldColorTransform);
            		}
HXLINE(1955)		bool updated = false;
HXLINE(1957)		bool _hx_tmp;
HXDLIN(1957)		if (!(this->get_cacheAsBitmap())) {
HXLINE(1957)			if ((renderer->_hx___type != HX_("opengl",6f,64,94,21))) {
HXLINE(1957)				_hx_tmp = !(colorTransform->_hx___isDefault(true));
            			}
            			else {
HXLINE(1957)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1957)			_hx_tmp = true;
            		}
HXDLIN(1957)		if (_hx_tmp) {
HXLINE(1959)			 ::openfl::geom::Rectangle rect = null();
HXLINE(1961)			bool needRender;
HXDLIN(1961)			bool needRender1;
HXDLIN(1961)			bool needRender2;
HXDLIN(1961)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1961)				if (this->_hx___renderDirty) {
HXLINE(1961)					bool needRender3;
HXDLIN(1961)					if (!(force)) {
HXLINE(1961)						if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1961)							needRender3 = (this->_hx___children->length > (int)0);
            						}
            						else {
HXLINE(1961)							needRender3 = false;
            						}
            					}
            					else {
HXLINE(1961)						needRender3 = true;
            					}
HXDLIN(1961)					if (!(needRender3)) {
HXLINE(1961)						if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1961)							needRender2 = this->_hx___graphics->_hx___dirty;
            						}
            						else {
HXLINE(1961)							needRender2 = false;
            						}
            					}
            					else {
HXLINE(1961)						needRender2 = true;
            					}
            				}
            				else {
HXLINE(1961)					needRender2 = false;
            				}
            			}
            			else {
HXLINE(1961)				needRender2 = true;
            			}
HXDLIN(1961)			if (!(needRender2)) {
HXLINE(1961)				needRender1 = hx::IsNotEq( this->opaqueBackground,this->_hx___cacheBitmapBackground );
            			}
            			else {
HXLINE(1961)				needRender1 = true;
            			}
HXDLIN(1961)			if (!(needRender1)) {
HXLINE(1961)				if ((renderer->_hx___type != HX_("opengl",6f,64,94,21))) {
HXLINE(1961)					needRender = !(this->_hx___cacheBitmapColorTransform->_hx___equals(colorTransform,true));
            				}
            				else {
HXLINE(1961)					needRender = false;
            				}
            			}
            			else {
HXLINE(1961)				needRender = true;
            			}
HXLINE(1962)			bool updateTransform;
HXDLIN(1962)			if (!(needRender)) {
HXLINE(1962)				updateTransform = !(this->_hx___cacheBitmap->_hx___worldTransform->equals(this->_hx___worldTransform));
            			}
            			else {
HXLINE(1962)				updateTransform = true;
            			}
HXLINE(1963)			bool hasFilters = hx::IsNotNull( this->_hx___filters );
HXLINE(1965)			bool _hx_tmp1;
HXDLIN(1965)			if (hasFilters) {
HXLINE(1965)				_hx_tmp1 = !(needRender);
            			}
            			else {
HXLINE(1965)				_hx_tmp1 = false;
            			}
HXDLIN(1965)			if (_hx_tmp1) {
HXLINE(1967)				int _g = (int)0;
HXDLIN(1967)				::Array< ::Dynamic> _g1 = this->_hx___filters;
HXDLIN(1967)				while((_g < _g1->length)){
HXLINE(1967)					 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1967)					_g = (_g + (int)1);
HXLINE(1969)					if (filter->_hx___renderDirty) {
HXLINE(1971)						needRender = true;
HXLINE(1972)						goto _hx_goto_54;
            					}
            				}
            				_hx_goto_54:;
            			}
HXLINE(1980)			if (hx::IsNull( this->_hx___cacheBitmapMatrix )) {
HXLINE(1982)				this->_hx___cacheBitmapMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE(1986)			 ::openfl::geom::Matrix bitmapMatrix;
HXDLIN(1986)			if (hx::IsNotNull( this->_hx___cacheAsBitmapMatrix )) {
HXLINE(1986)				bitmapMatrix = this->_hx___cacheAsBitmapMatrix;
            			}
            			else {
HXLINE(1986)				bitmapMatrix = this->_hx___renderTransform;
            			}
HXLINE(1988)			bool _hx_tmp2;
HXDLIN(1988)			if (!(needRender)) {
HXLINE(1988)				bool _hx_tmp3;
HXDLIN(1988)				bool _hx_tmp4;
HXDLIN(1988)				if ((bitmapMatrix->a == this->_hx___cacheBitmapMatrix->a)) {
HXLINE(1988)					_hx_tmp4 = (bitmapMatrix->b != this->_hx___cacheBitmapMatrix->b);
            				}
            				else {
HXLINE(1988)					_hx_tmp4 = true;
            				}
HXDLIN(1988)				if (!(_hx_tmp4)) {
HXLINE(1988)					_hx_tmp3 = (bitmapMatrix->c != this->_hx___cacheBitmapMatrix->c);
            				}
            				else {
HXLINE(1988)					_hx_tmp3 = true;
            				}
HXDLIN(1988)				if (!(_hx_tmp3)) {
HXLINE(1988)					_hx_tmp2 = (bitmapMatrix->d != this->_hx___cacheBitmapMatrix->d);
            				}
            				else {
HXLINE(1988)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE(1988)				_hx_tmp2 = false;
            			}
HXDLIN(1988)			if (_hx_tmp2) {
HXLINE(1990)				needRender = true;
            			}
HXLINE(1994)			bool _hx_tmp5;
HXDLIN(1994)			bool _hx_tmp6;
HXDLIN(1994)			bool _hx_tmp7;
HXDLIN(1994)			bool _hx_tmp8;
HXDLIN(1994)			if (!(needRender)) {
HXLINE(1994)				_hx_tmp8 = (renderer->_hx___type != HX_("opengl",6f,64,94,21));
            			}
            			else {
HXLINE(1994)				_hx_tmp8 = false;
            			}
HXDLIN(1994)			if (_hx_tmp8) {
HXLINE(1994)				_hx_tmp7 = hx::IsNotNull( this->_hx___cacheBitmapData );
            			}
            			else {
HXLINE(1994)				_hx_tmp7 = false;
            			}
HXDLIN(1994)			if (_hx_tmp7) {
HXLINE(1994)				_hx_tmp6 = hx::IsNotNull( this->_hx___cacheBitmapData->image );
            			}
            			else {
HXLINE(1994)				_hx_tmp6 = false;
            			}
HXDLIN(1994)			if (_hx_tmp6) {
HXLINE(1994)				_hx_tmp5 = (this->_hx___cacheBitmapData->image->version < this->_hx___cacheBitmapData->_hx___textureVersion);
            			}
            			else {
HXLINE(1994)				_hx_tmp5 = false;
            			}
HXDLIN(1994)			if (_hx_tmp5) {
HXLINE(1996)				needRender = true;
            			}
HXLINE(2000)			this->_hx___cacheBitmapMatrix->copyFrom(bitmapMatrix);
HXLINE(2001)			this->_hx___cacheBitmapMatrix->tx = (int)0;
HXLINE(2002)			this->_hx___cacheBitmapMatrix->ty = (int)0;
HXLINE(2006)			int bitmapWidth = (int)0;
HXDLIN(2006)			int bitmapHeight = (int)0;
HXLINE(2007)			int filterWidth = (int)0;
HXDLIN(2007)			int filterHeight = (int)0;
HXLINE(2008)			Float offsetX = ((Float)0.);
HXDLIN(2008)			Float offsetY = ((Float)0.);
HXLINE(2010)			bool _hx_tmp9;
HXDLIN(2010)			if (!(updateTransform)) {
HXLINE(2010)				_hx_tmp9 = needRender;
            			}
            			else {
HXLINE(2010)				_hx_tmp9 = true;
            			}
HXDLIN(2010)			if (_hx_tmp9) {
HXLINE(2012)				rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(2014)				this->_hx___getFilterBounds(rect,this->_hx___cacheBitmapMatrix);
HXLINE(2016)				filterWidth = ::Math_obj::ceil(rect->width);
HXLINE(2017)				filterHeight = ::Math_obj::ceil(rect->height);
HXLINE(2019)				if ((rect->x > (int)0)) {
HXLINE(2019)					offsetX = ::Math_obj::ceil(rect->x);
            				}
            				else {
HXLINE(2019)					offsetX = ::Math_obj::floor(rect->x);
            				}
HXLINE(2020)				if ((rect->y > (int)0)) {
HXLINE(2020)					offsetY = ::Math_obj::ceil(rect->y);
            				}
            				else {
HXLINE(2020)					offsetY = ::Math_obj::floor(rect->y);
            				}
HXLINE(2022)				if (hx::IsNotNull( this->_hx___cacheBitmapData )) {
HXLINE(2024)					bool _hx_tmp10;
HXDLIN(2024)					if ((filterWidth <= this->_hx___cacheBitmapData->width)) {
HXLINE(2024)						_hx_tmp10 = (filterHeight > this->_hx___cacheBitmapData->height);
            					}
            					else {
HXLINE(2024)						_hx_tmp10 = true;
            					}
HXDLIN(2024)					if (_hx_tmp10) {
HXLINE(2026)						bitmapWidth = ::Math_obj::ceil(::Math_obj::max((filterWidth * ((Float)1.25)),this->_hx___cacheBitmapData->width));
HXLINE(2027)						bitmapHeight = ::Math_obj::ceil(::Math_obj::max((filterHeight * ((Float)1.25)),this->_hx___cacheBitmapData->height));
HXLINE(2028)						needRender = true;
            					}
            					else {
HXLINE(2032)						bitmapWidth = this->_hx___cacheBitmapData->width;
HXLINE(2033)						bitmapHeight = this->_hx___cacheBitmapData->height;
            					}
            				}
            				else {
HXLINE(2039)					bitmapWidth = filterWidth;
HXLINE(2040)					bitmapHeight = filterHeight;
            				}
            			}
HXLINE(2046)			if (needRender) {
HXLINE(2048)				updateTransform = true;
HXLINE(2049)				this->_hx___cacheBitmapBackground = this->opaqueBackground;
HXLINE(2051)				bool _hx_tmp11;
HXDLIN(2051)				if ((filterWidth >= ((Float)0.5))) {
HXLINE(2051)					_hx_tmp11 = (filterHeight >= ((Float)0.5));
            				}
            				else {
HXLINE(2051)					_hx_tmp11 = false;
            				}
HXDLIN(2051)				if (_hx_tmp11) {
HXLINE(2053)					bool needsFill;
HXDLIN(2053)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE(2053)						if ((bitmapWidth == filterWidth)) {
HXLINE(2053)							needsFill = (bitmapHeight != filterHeight);
            						}
            						else {
HXLINE(2053)							needsFill = true;
            						}
            					}
            					else {
HXLINE(2053)						needsFill = false;
            					}
HXLINE(2054)					int fillColor;
HXDLIN(2054)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE(2054)						fillColor = ((int)(int)-16777216 | (int)this->opaqueBackground);
            					}
            					else {
HXLINE(2054)						fillColor = (int)0;
            					}
HXLINE(2055)					int bitmapColor;
HXDLIN(2055)					if (needsFill) {
HXLINE(2055)						bitmapColor = (int)0;
            					}
            					else {
HXLINE(2055)						bitmapColor = fillColor;
            					}
HXLINE(2056)					bool allowFramebuffer = (renderer->_hx___type == HX_("opengl",6f,64,94,21));
HXLINE(2058)					bool _hx_tmp12;
HXDLIN(2058)					bool _hx_tmp13;
HXDLIN(2058)					if (hx::IsNotNull( this->_hx___cacheBitmapData )) {
HXLINE(2058)						_hx_tmp13 = (bitmapWidth > this->_hx___cacheBitmapData->width);
            					}
            					else {
HXLINE(2058)						_hx_tmp13 = true;
            					}
HXDLIN(2058)					if (!(_hx_tmp13)) {
HXLINE(2058)						_hx_tmp12 = (bitmapHeight > this->_hx___cacheBitmapData->height);
            					}
            					else {
HXLINE(2058)						_hx_tmp12 = true;
            					}
HXDLIN(2058)					if (_hx_tmp12) {
HXLINE(2060)						this->_hx___cacheBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,bitmapColor);
HXLINE(2062)						if (hx::IsNull( this->_hx___cacheBitmap )) {
HXLINE(2062)							this->_hx___cacheBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
            						}
HXLINE(2063)						this->_hx___cacheBitmap->_hx___bitmapData = this->_hx___cacheBitmapData;
HXLINE(2064)						this->_hx___cacheBitmapRenderer = null();
            					}
            					else {
HXLINE(2068)						this->_hx___cacheBitmapData->_hx___fillRect(this->_hx___cacheBitmapData->rect,bitmapColor,allowFramebuffer);
            					}
HXLINE(2072)					if (needsFill) {
HXLINE(2074)						rect->setTo((int)0,(int)0,filterWidth,filterHeight);
HXLINE(2075)						this->_hx___cacheBitmapData->_hx___fillRect(rect,fillColor,allowFramebuffer);
            					}
            				}
            				else {
HXLINE(2081)					::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
HXLINE(2083)					this->_hx___cacheBitmap = null();
HXLINE(2084)					this->_hx___cacheBitmapData = null();
HXLINE(2085)					this->_hx___cacheBitmapData2 = null();
HXLINE(2086)					this->_hx___cacheBitmapData3 = null();
HXLINE(2087)					this->_hx___cacheBitmapRenderer = null();
HXLINE(2089)					return true;
            				}
            			}
            			else {
HXLINE(2097)				this->_hx___cacheBitmapData = this->_hx___cacheBitmap->get_bitmapData();
HXLINE(2098)				this->_hx___cacheBitmapData2 = null();
HXLINE(2099)				this->_hx___cacheBitmapData3 = null();
            			}
HXLINE(2103)			bool _hx_tmp14;
HXDLIN(2103)			if (!(updateTransform)) {
HXLINE(2103)				_hx_tmp14 = needRender;
            			}
            			else {
HXLINE(2103)				_hx_tmp14 = true;
            			}
HXDLIN(2103)			if (_hx_tmp14) {
HXLINE(2105)				this->_hx___cacheBitmap->_hx___worldTransform->copyFrom(this->_hx___worldTransform);
HXLINE(2107)				if (hx::IsEq( bitmapMatrix,this->_hx___renderTransform )) {
HXLINE(2109)					this->_hx___cacheBitmap->_hx___renderTransform->identity();
HXLINE(2110)					this->_hx___cacheBitmap->_hx___renderTransform->tx = (this->_hx___renderTransform->tx + offsetX);
HXLINE(2111)					this->_hx___cacheBitmap->_hx___renderTransform->ty = (this->_hx___renderTransform->ty + offsetY);
            				}
            				else {
HXLINE(2115)					this->_hx___cacheBitmap->_hx___renderTransform->copyFrom(this->_hx___cacheBitmapMatrix);
HXLINE(2116)					this->_hx___cacheBitmap->_hx___renderTransform->invert();
HXLINE(2117)					this->_hx___cacheBitmap->_hx___renderTransform->concat(this->_hx___renderTransform);
HXLINE(2118)					 ::openfl::geom::Matrix _hx_tmp15 = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(2118)					_hx_tmp15->tx = (_hx_tmp15->tx + offsetX);
HXLINE(2119)					 ::openfl::geom::Matrix _hx_tmp16 = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(2119)					_hx_tmp16->ty = (_hx_tmp16->ty + offsetY);
            				}
            			}
HXLINE(2125)			this->_hx___cacheBitmap->smoothing = renderer->_hx___allowSmoothing;
HXLINE(2126)			this->_hx___cacheBitmap->_hx___renderable = this->_hx___renderable;
HXLINE(2127)			this->_hx___cacheBitmap->_hx___worldAlpha = this->_hx___worldAlpha;
HXLINE(2128)			this->_hx___cacheBitmap->_hx___worldBlendMode = this->_hx___worldBlendMode;
HXLINE(2129)			this->_hx___cacheBitmap->_hx___worldShader = this->_hx___worldShader;
HXLINE(2130)			this->_hx___cacheBitmap->_hx___scrollRect = this->_hx___scrollRect;
HXLINE(2132)			this->_hx___cacheBitmap->set_mask(this->_hx___mask);
HXLINE(2134)			if (needRender) {
HXLINE(2136)				::String renderType = renderer->_hx___type;
HXLINE(2139)				if ((renderType == HX_("opengl",6f,64,94,21))) {
HXLINE(2141)					if (hx::IsEq( this->_hx___shouldCacheHardware(null()),false )) {
HXLINE(2146)						renderType = HX_("cairo",88,30,19,41);
            					}
            				}
HXLINE(2154)				bool _hx_tmp17;
HXDLIN(2154)				if (hx::IsNotNull( this->_hx___cacheBitmapRenderer )) {
HXLINE(2154)					_hx_tmp17 = (renderType != this->_hx___cacheBitmapRenderer->_hx___type);
            				}
            				else {
HXLINE(2154)					_hx_tmp17 = true;
            				}
HXDLIN(2154)				if (_hx_tmp17) {
HXLINE(2156)					if ((renderType == HX_("opengl",6f,64,94,21))) {
HXLINE(2158)						this->_hx___cacheBitmapRenderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,hx::TCast<  ::openfl::display::OpenGLRenderer >::cast(renderer)->_hx___context3D,this->_hx___cacheBitmapData);
            					}
            					else {
HXLINE(2162)						if (hx::IsNull( this->_hx___cacheBitmapData->image )) {
HXLINE(2164)							int color;
HXDLIN(2164)							if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE(2164)								color = ((int)(int)-16777216 | (int)this->opaqueBackground);
            							}
            							else {
HXLINE(2164)								color = (int)0;
            							}
HXLINE(2165)							this->_hx___cacheBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,color);
HXLINE(2166)							this->_hx___cacheBitmap->_hx___bitmapData = this->_hx___cacheBitmapData;
            						}
HXLINE(2174)						this->_hx___cacheBitmapRenderer =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX , ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,this->_hx___cacheBitmapData->getSurface()));
            					}
HXLINE(2179)					this->_hx___cacheBitmapRenderer->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(2180)					this->_hx___cacheBitmapRenderer->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXLINE(2184)				if (hx::IsNull( this->_hx___cacheBitmapColorTransform )) {
HXLINE(2184)					this->_hx___cacheBitmapColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXLINE(2186)				this->_hx___cacheBitmapRenderer->_hx___stage = this->stage;
HXLINE(2188)				this->_hx___cacheBitmapRenderer->_hx___allowSmoothing = renderer->_hx___allowSmoothing;
HXLINE(2189)				this->_hx___cacheBitmapRenderer->_hx___setBlendMode((int)10);
HXLINE(2190)				this->_hx___cacheBitmapRenderer->_hx___worldAlpha = ((Float)(int)1 / (Float)this->_hx___worldAlpha);
HXLINE(2192)				this->_hx___cacheBitmapRenderer->_hx___worldTransform->copyFrom(this->_hx___renderTransform);
HXLINE(2193)				this->_hx___cacheBitmapRenderer->_hx___worldTransform->invert();
HXLINE(2194)				this->_hx___cacheBitmapRenderer->_hx___worldTransform->concat(this->_hx___cacheBitmapMatrix);
HXLINE(2195)				 ::openfl::geom::Matrix _hx_tmp18 = this->_hx___cacheBitmapRenderer->_hx___worldTransform;
HXDLIN(2195)				_hx_tmp18->tx = (_hx_tmp18->tx - offsetX);
HXLINE(2196)				 ::openfl::geom::Matrix _hx_tmp19 = this->_hx___cacheBitmapRenderer->_hx___worldTransform;
HXDLIN(2196)				_hx_tmp19->ty = (_hx_tmp19->ty - offsetY);
HXLINE(2198)				this->_hx___cacheBitmapRenderer->_hx___worldColorTransform->_hx___copyFrom(colorTransform);
HXLINE(2199)				this->_hx___cacheBitmapRenderer->_hx___worldColorTransform->_hx___invert();
HXLINE(2201)				this->_hx___isCacheBitmapRender = true;
HXLINE(2203)				if ((this->_hx___cacheBitmapRenderer->_hx___type == HX_("opengl",6f,64,94,21))) {
HXLINE(2205)					 ::openfl::display::OpenGLRenderer parentRenderer = ( ( ::openfl::display::OpenGLRenderer)(renderer) );
HXLINE(2206)					 ::openfl::display::OpenGLRenderer childRenderer = ( ( ::openfl::display::OpenGLRenderer)(this->_hx___cacheBitmapRenderer) );
HXLINE(2208)					 ::openfl::display3D::Context3D context = childRenderer->_hx___context3D;
HXLINE(2210)					 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE(2211)					bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE(2212)					int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE(2213)					int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE(2217)					 ::Dynamic cacheBlendMode = parentRenderer->_hx___blendMode;
HXLINE(2218)					parentRenderer->_hx___suspendClipAndMask();
HXLINE(2219)					childRenderer->_hx___copyShader(parentRenderer);
HXLINE(2222)					this->_hx___cacheBitmapData->_hx___setUVRect(context,(int)0,(int)0,filterWidth,filterHeight);
HXLINE(2223)					childRenderer->_hx___setRenderTarget(this->_hx___cacheBitmapData);
HXLINE(2224)					if (hx::IsNotNull( this->_hx___cacheBitmapData->image )) {
HXLINE(2224)						this->_hx___cacheBitmapData->_hx___textureVersion = (this->_hx___cacheBitmapData->image->version + (int)1);
            					}
HXLINE(2226)					this->_hx___cacheBitmapData->_hx___drawGL(hx::ObjectPtr<OBJ_>(this),childRenderer);
HXLINE(2228)					if (hasFilters) {
HXLINE(2230)						bool needSecondBitmapData = true;
HXLINE(2231)						bool needCopyOfOriginal = false;
HXLINE(2233)						{
HXLINE(2233)							int _g2 = (int)0;
HXDLIN(2233)							::Array< ::Dynamic> _g11 = this->_hx___filters;
HXDLIN(2233)							while((_g2 < _g11->length)){
HXLINE(2233)								 ::openfl::filters::BitmapFilter filter1 = _g11->__get(_g2).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(2233)								_g2 = (_g2 + (int)1);
HXLINE(2237)								if (filter1->_hx___preserveObject) {
HXLINE(2238)									needCopyOfOriginal = true;
            								}
            							}
            						}
HXLINE(2242)						 ::openfl::display::BitmapData bitmap = this->_hx___cacheBitmapData;
HXLINE(2243)						 ::openfl::display::BitmapData bitmap2 = null();
HXLINE(2244)						 ::openfl::display::BitmapData bitmap3 = null();
HXLINE(2247)						bool _hx_tmp20;
HXDLIN(2247)						bool _hx_tmp21;
HXDLIN(2247)						if (hx::IsNotNull( this->_hx___cacheBitmapData2 )) {
HXLINE(2247)							_hx_tmp21 = (bitmapWidth > this->_hx___cacheBitmapData2->width);
            						}
            						else {
HXLINE(2247)							_hx_tmp21 = true;
            						}
HXDLIN(2247)						if (!(_hx_tmp21)) {
HXLINE(2247)							_hx_tmp20 = (bitmapHeight > this->_hx___cacheBitmapData2->height);
            						}
            						else {
HXLINE(2247)							_hx_tmp20 = true;
            						}
HXDLIN(2247)						if (_hx_tmp20) {
HXLINE(2248)							this->_hx___cacheBitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,(int)0);
            						}
            						else {
HXLINE(2250)							this->_hx___cacheBitmapData2->fillRect(this->_hx___cacheBitmapData2->rect,(int)0);
HXLINE(2251)							if (hx::IsNotNull( this->_hx___cacheBitmapData2->image )) {
HXLINE(2252)								this->_hx___cacheBitmapData2->_hx___textureVersion = (this->_hx___cacheBitmapData2->image->version + (int)1);
            							}
            						}
HXLINE(2255)						this->_hx___cacheBitmapData2->_hx___setUVRect(context,(int)0,(int)0,filterWidth,filterHeight);
HXLINE(2256)						bitmap2 = this->_hx___cacheBitmapData2;
HXLINE(2261)						if (needCopyOfOriginal) {
HXLINE(2262)							bool _hx_tmp22;
HXDLIN(2262)							bool _hx_tmp23;
HXDLIN(2262)							if (hx::IsNotNull( this->_hx___cacheBitmapData3 )) {
HXLINE(2262)								_hx_tmp23 = (bitmapWidth > this->_hx___cacheBitmapData3->width);
            							}
            							else {
HXLINE(2262)								_hx_tmp23 = true;
            							}
HXDLIN(2262)							if (!(_hx_tmp23)) {
HXLINE(2262)								_hx_tmp22 = (bitmapHeight > this->_hx___cacheBitmapData3->height);
            							}
            							else {
HXLINE(2262)								_hx_tmp22 = true;
            							}
HXDLIN(2262)							if (_hx_tmp22) {
HXLINE(2263)								this->_hx___cacheBitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,(int)0);
            							}
            							else {
HXLINE(2265)								this->_hx___cacheBitmapData3->fillRect(this->_hx___cacheBitmapData3->rect,(int)0);
HXLINE(2266)								if (hx::IsNotNull( this->_hx___cacheBitmapData3->image )) {
HXLINE(2267)									this->_hx___cacheBitmapData3->_hx___textureVersion = (this->_hx___cacheBitmapData3->image->version + (int)1);
            								}
            							}
HXLINE(2270)							this->_hx___cacheBitmapData3->_hx___setUVRect(context,(int)0,(int)0,filterWidth,filterHeight);
HXLINE(2271)							bitmap3 = this->_hx___cacheBitmapData3;
            						}
HXLINE(2274)						childRenderer->_hx___setBlendMode((int)10);
HXLINE(2275)						childRenderer->_hx___worldAlpha = (int)1;
HXLINE(2276)						childRenderer->_hx___worldTransform->identity();
HXLINE(2277)						childRenderer->_hx___worldColorTransform->_hx___identity();
HXLINE(2282)						 ::openfl::display::Shader shader;
HXDLIN(2282)						 ::openfl::display::BitmapData cacheBitmap;
HXLINE(2284)						{
HXLINE(2284)							int _g3 = (int)0;
HXDLIN(2284)							::Array< ::Dynamic> _g12 = this->_hx___filters;
HXDLIN(2284)							while((_g3 < _g12->length)){
HXLINE(2284)								 ::openfl::filters::BitmapFilter filter2 = _g12->__get(_g3).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(2284)								_g3 = (_g3 + (int)1);
HXLINE(2286)								if (filter2->_hx___preserveObject) {
HXLINE(2288)									childRenderer->_hx___setRenderTarget(bitmap3);
HXLINE(2289)									childRenderer->_hx___renderFilterPass(bitmap,childRenderer->_hx___defaultDisplayShader,filter2->_hx___smooth,null());
            								}
HXLINE(2293)								{
HXLINE(2293)									int _g31 = (int)0;
HXDLIN(2293)									int _g21 = filter2->_hx___numShaderPasses;
HXDLIN(2293)									while((_g31 < _g21)){
HXLINE(2293)										_g31 = (_g31 + (int)1);
HXDLIN(2293)										int i = (_g31 - (int)1);
HXLINE(2295)										shader = filter2->_hx___initShader(childRenderer,i);
HXLINE(2296)										childRenderer->_hx___setBlendMode(filter2->_hx___shaderBlendMode);
HXLINE(2297)										childRenderer->_hx___setRenderTarget(bitmap2);
HXLINE(2298)										childRenderer->_hx___renderFilterPass(bitmap,shader,filter2->_hx___smooth,null());
HXLINE(2300)										cacheBitmap = bitmap;
HXLINE(2301)										bitmap = bitmap2;
HXLINE(2302)										bitmap2 = cacheBitmap;
            									}
            								}
HXLINE(2306)								if (filter2->_hx___preserveObject) {
HXLINE(2308)									childRenderer->_hx___setBlendMode((int)10);
HXLINE(2309)									childRenderer->_hx___setRenderTarget(bitmap);
HXLINE(2310)									childRenderer->_hx___renderFilterPass(bitmap3,childRenderer->_hx___defaultDisplayShader,filter2->_hx___smooth,false);
            								}
HXLINE(2314)								filter2->_hx___renderDirty = false;
            							}
            						}
HXLINE(2318)						this->_hx___cacheBitmap->_hx___bitmapData = bitmap;
            					}
HXLINE(2322)					parentRenderer->_hx___blendMode = (int)10;
HXLINE(2323)					parentRenderer->_hx___setBlendMode(cacheBlendMode);
HXLINE(2324)					parentRenderer->_hx___copyShader(childRenderer);
HXLINE(2326)					if (hx::IsNotNull( cacheRTT )) {
HXLINE(2328)						context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            					}
            					else {
HXLINE(2332)						context->setRenderToBackBuffer();
            					}
HXLINE(2339)					parentRenderer->_hx___resumeClipAndMask(childRenderer);
HXLINE(2340)					parentRenderer->setViewport();
HXLINE(2342)					this->_hx___cacheBitmapColorTransform->_hx___copyFrom(colorTransform);
            				}
            				else {
HXLINE(2349)					this->_hx___cacheBitmapData->_hx___drawCairo(hx::ObjectPtr<OBJ_>(this),( ( ::openfl::display::CairoRenderer)(this->_hx___cacheBitmapRenderer) ));
HXLINE(2352)					if (hasFilters) {
HXLINE(2354)						bool needSecondBitmapData1 = false;
HXLINE(2355)						bool needCopyOfOriginal1 = false;
HXLINE(2357)						{
HXLINE(2357)							int _g4 = (int)0;
HXDLIN(2357)							::Array< ::Dynamic> _g13 = this->_hx___filters;
HXDLIN(2357)							while((_g4 < _g13->length)){
HXLINE(2357)								 ::openfl::filters::BitmapFilter filter3 = _g13->__get(_g4).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(2357)								_g4 = (_g4 + (int)1);
HXLINE(2358)								if (filter3->_hx___needSecondBitmapData) {
HXLINE(2359)									needSecondBitmapData1 = true;
            								}
HXLINE(2361)								if (filter3->_hx___preserveObject) {
HXLINE(2362)									needCopyOfOriginal1 = true;
            								}
            							}
            						}
HXLINE(2366)						 ::openfl::display::BitmapData bitmap1 = this->_hx___cacheBitmapData;
HXLINE(2367)						 ::openfl::display::BitmapData bitmap21 = null();
HXLINE(2368)						 ::openfl::display::BitmapData bitmap31 = null();
HXLINE(2370)						if (needSecondBitmapData1) {
HXLINE(2371)							bool _hx_tmp24;
HXDLIN(2371)							bool _hx_tmp25;
HXDLIN(2371)							bool _hx_tmp26;
HXDLIN(2371)							if (hx::IsNotNull( this->_hx___cacheBitmapData2 )) {
HXLINE(2371)								_hx_tmp26 = hx::IsNull( this->_hx___cacheBitmapData2->image );
            							}
            							else {
HXLINE(2371)								_hx_tmp26 = true;
            							}
HXDLIN(2371)							if (!(_hx_tmp26)) {
HXLINE(2371)								_hx_tmp25 = (bitmapWidth > this->_hx___cacheBitmapData2->width);
            							}
            							else {
HXLINE(2371)								_hx_tmp25 = true;
            							}
HXDLIN(2371)							if (!(_hx_tmp25)) {
HXLINE(2371)								_hx_tmp24 = (bitmapHeight > this->_hx___cacheBitmapData2->height);
            							}
            							else {
HXLINE(2371)								_hx_tmp24 = true;
            							}
HXDLIN(2371)							if (_hx_tmp24) {
HXLINE(2372)								this->_hx___cacheBitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,(int)0);
            							}
            							else {
HXLINE(2374)								this->_hx___cacheBitmapData2->fillRect(this->_hx___cacheBitmapData2->rect,(int)0);
            							}
HXLINE(2376)							bitmap21 = this->_hx___cacheBitmapData2;
            						}
            						else {
HXLINE(2378)							bitmap21 = bitmap1;
            						}
HXLINE(2381)						if (needCopyOfOriginal1) {
HXLINE(2382)							bool _hx_tmp27;
HXDLIN(2382)							bool _hx_tmp28;
HXDLIN(2382)							bool _hx_tmp29;
HXDLIN(2382)							if (hx::IsNotNull( this->_hx___cacheBitmapData3 )) {
HXLINE(2382)								_hx_tmp29 = hx::IsNull( this->_hx___cacheBitmapData3->image );
            							}
            							else {
HXLINE(2382)								_hx_tmp29 = true;
            							}
HXDLIN(2382)							if (!(_hx_tmp29)) {
HXLINE(2382)								_hx_tmp28 = (bitmapWidth > this->_hx___cacheBitmapData3->width);
            							}
            							else {
HXLINE(2382)								_hx_tmp28 = true;
            							}
HXDLIN(2382)							if (!(_hx_tmp28)) {
HXLINE(2382)								_hx_tmp27 = (bitmapHeight > this->_hx___cacheBitmapData3->height);
            							}
            							else {
HXLINE(2382)								_hx_tmp27 = true;
            							}
HXDLIN(2382)							if (_hx_tmp27) {
HXLINE(2383)								this->_hx___cacheBitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,(int)0);
            							}
            							else {
HXLINE(2385)								this->_hx___cacheBitmapData3->fillRect(this->_hx___cacheBitmapData3->rect,(int)0);
            							}
HXLINE(2387)							bitmap31 = this->_hx___cacheBitmapData3;
            						}
HXLINE(2391)						if (hx::IsNull( this->_hx___tempPoint )) {
HXLINE(2391)							this->_hx___tempPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            						}
HXLINE(2392)						 ::openfl::geom::Point destPoint = this->_hx___tempPoint;
HXLINE(2393)						 ::openfl::display::BitmapData cacheBitmap1;
HXDLIN(2393)						 ::openfl::display::BitmapData lastBitmap;
HXLINE(2395)						{
HXLINE(2395)							int _g5 = (int)0;
HXDLIN(2395)							::Array< ::Dynamic> _g14 = this->_hx___filters;
HXDLIN(2395)							while((_g5 < _g14->length)){
HXLINE(2395)								 ::openfl::filters::BitmapFilter filter4 = _g14->__get(_g5).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(2395)								_g5 = (_g5 + (int)1);
HXLINE(2397)								if (filter4->_hx___preserveObject) {
HXLINE(2398)									bitmap31->copyPixels(bitmap1,bitmap1->rect,destPoint,null(),null(),null());
            								}
HXLINE(2401)								lastBitmap = filter4->_hx___applyFilter(bitmap21,bitmap1,bitmap1->rect,destPoint);
HXLINE(2403)								if (filter4->_hx___preserveObject) {
HXLINE(2404)									 ::openfl::geom::ColorTransform _hx_tmp30;
HXDLIN(2404)									if (hx::IsNotNull( this->_hx___objectTransform )) {
HXLINE(2404)										_hx_tmp30 = this->_hx___objectTransform->get_colorTransform();
            									}
            									else {
HXLINE(2404)										_hx_tmp30 = null();
            									}
HXDLIN(2404)									lastBitmap->draw(bitmap31,null(),_hx_tmp30,null(),null(),null());
            								}
HXLINE(2406)								filter4->_hx___renderDirty = false;
HXLINE(2408)								bool _hx_tmp31;
HXDLIN(2408)								if (needSecondBitmapData1) {
HXLINE(2408)									_hx_tmp31 = hx::IsEq( lastBitmap,bitmap21 );
            								}
            								else {
HXLINE(2408)									_hx_tmp31 = false;
            								}
HXDLIN(2408)								if (_hx_tmp31) {
HXLINE(2410)									cacheBitmap1 = bitmap1;
HXLINE(2411)									bitmap1 = bitmap21;
HXLINE(2412)									bitmap21 = cacheBitmap1;
            								}
            							}
            						}
HXLINE(2418)						if (hx::IsNotEq( this->_hx___cacheBitmapData,bitmap1 )) {
HXLINE(2424)							cacheBitmap1 = this->_hx___cacheBitmapData;
HXLINE(2425)							this->_hx___cacheBitmapData = bitmap1;
HXLINE(2426)							this->_hx___cacheBitmapData2 = cacheBitmap1;
HXLINE(2427)							this->_hx___cacheBitmap->_hx___bitmapData = this->_hx___cacheBitmapData;
HXLINE(2428)							this->_hx___cacheBitmapRenderer = null();
            						}
HXLINE(2432)						this->_hx___cacheBitmap->_hx___imageVersion = this->_hx___cacheBitmapData->_hx___textureVersion;
            					}
HXLINE(2436)					this->_hx___cacheBitmapColorTransform->_hx___copyFrom(colorTransform);
HXLINE(2438)					if (!(this->_hx___cacheBitmapColorTransform->_hx___isDefault(true))) {
HXLINE(2440)						this->_hx___cacheBitmapColorTransform->alphaMultiplier = (int)1;
HXLINE(2441)						this->_hx___cacheBitmapData->colorTransform(this->_hx___cacheBitmapData->rect,this->_hx___cacheBitmapColorTransform);
            					}
            				}
HXLINE(2447)				this->_hx___isCacheBitmapRender = false;
            			}
HXLINE(2451)			bool _hx_tmp32;
HXDLIN(2451)			if (!(updateTransform)) {
HXLINE(2451)				_hx_tmp32 = needRender;
            			}
            			else {
HXLINE(2451)				_hx_tmp32 = true;
            			}
HXDLIN(2451)			if (_hx_tmp32) {
HXLINE(2453)				::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            			}
HXLINE(2457)			updated = updateTransform;
            		}
            		else {
HXLINE(2459)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(2461)				if ((renderer->_hx___type == HX_("dom",82,42,4c,00))) {
HXLINE(2463)					this->_hx___cacheBitmap->_hx___renderDOMClear(( ( ::openfl::display::DOMRenderer)(renderer) ));
            				}
HXLINE(2467)				this->_hx___cacheBitmap = null();
HXLINE(2468)				this->_hx___cacheBitmapData = null();
HXLINE(2469)				this->_hx___cacheBitmapData2 = null();
HXLINE(2470)				this->_hx___cacheBitmapData3 = null();
HXLINE(2471)				this->_hx___cacheBitmapColorTransform = null();
HXLINE(2472)				this->_hx___cacheBitmapRenderer = null();
HXLINE(2474)				updated = true;
            			}
            		}
HXLINE(2478)		::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
HXLINE(2480)		return updated;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___updateCacheBitmap,return )

void DisplayObject_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_2485___updateTransforms)
HXLINE(2487)		bool overrided = hx::IsNotNull( overrideTransform );
HXLINE(2488)		 ::openfl::geom::Matrix local;
HXDLIN(2488)		if (overrided) {
HXLINE(2488)			local = overrideTransform;
            		}
            		else {
HXLINE(2488)			local = this->_hx___transform;
            		}
HXLINE(2490)		if (hx::IsNull( this->_hx___worldTransform )) {
HXLINE(2492)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(2496)		if (hx::IsNull( this->_hx___renderTransform )) {
HXLINE(2498)			this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(2502)		 ::openfl::display::DisplayObject renderParent;
HXDLIN(2502)		if (hx::IsNotNull( this->_hx___renderParent )) {
HXLINE(2502)			renderParent = this->_hx___renderParent;
            		}
            		else {
HXLINE(2502)			renderParent = this->parent;
            		}
HXLINE(2504)		bool _hx_tmp;
HXDLIN(2504)		if (!(overrided)) {
HXLINE(2504)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE(2504)			_hx_tmp = false;
            		}
HXDLIN(2504)		if (_hx_tmp) {
HXLINE(2506)			 ::openfl::geom::Matrix parentTransform = this->parent->_hx___worldTransform;
HXDLIN(2506)			 ::openfl::geom::Matrix target = this->_hx___worldTransform;
HXDLIN(2506)			Float _hx_tmp1 = (local->a * parentTransform->a);
HXDLIN(2506)			target->a = (_hx_tmp1 + (local->b * parentTransform->c));
HXDLIN(2506)			Float _hx_tmp2 = (local->a * parentTransform->b);
HXDLIN(2506)			target->b = (_hx_tmp2 + (local->b * parentTransform->d));
HXDLIN(2506)			Float _hx_tmp3 = (local->c * parentTransform->a);
HXDLIN(2506)			target->c = (_hx_tmp3 + (local->d * parentTransform->c));
HXDLIN(2506)			Float _hx_tmp4 = (local->c * parentTransform->b);
HXDLIN(2506)			target->d = (_hx_tmp4 + (local->d * parentTransform->d));
HXDLIN(2506)			Float _hx_tmp5 = (local->tx * parentTransform->a);
HXDLIN(2506)			target->tx = ((_hx_tmp5 + (local->ty * parentTransform->c)) + parentTransform->tx);
HXDLIN(2506)			Float _hx_tmp6 = (local->tx * parentTransform->b);
HXDLIN(2506)			target->ty = ((_hx_tmp6 + (local->ty * parentTransform->d)) + parentTransform->ty);
            		}
            		else {
HXLINE(2510)			this->_hx___worldTransform->copyFrom(local);
            		}
HXLINE(2514)		bool _hx_tmp7;
HXDLIN(2514)		if (!(overrided)) {
HXLINE(2514)			_hx_tmp7 = hx::IsNotNull( renderParent );
            		}
            		else {
HXLINE(2514)			_hx_tmp7 = false;
            		}
HXDLIN(2514)		if (_hx_tmp7) {
HXLINE(2516)			 ::openfl::geom::Matrix parentTransform1 = renderParent->_hx___renderTransform;
HXDLIN(2516)			 ::openfl::geom::Matrix target1 = this->_hx___renderTransform;
HXDLIN(2516)			Float _hx_tmp8 = (local->a * parentTransform1->a);
HXDLIN(2516)			target1->a = (_hx_tmp8 + (local->b * parentTransform1->c));
HXDLIN(2516)			Float _hx_tmp9 = (local->a * parentTransform1->b);
HXDLIN(2516)			target1->b = (_hx_tmp9 + (local->b * parentTransform1->d));
HXDLIN(2516)			Float _hx_tmp10 = (local->c * parentTransform1->a);
HXDLIN(2516)			target1->c = (_hx_tmp10 + (local->d * parentTransform1->c));
HXDLIN(2516)			Float _hx_tmp11 = (local->c * parentTransform1->b);
HXDLIN(2516)			target1->d = (_hx_tmp11 + (local->d * parentTransform1->d));
HXDLIN(2516)			Float _hx_tmp12 = (local->tx * parentTransform1->a);
HXDLIN(2516)			target1->tx = ((_hx_tmp12 + (local->ty * parentTransform1->c)) + parentTransform1->tx);
HXDLIN(2516)			Float _hx_tmp13 = (local->tx * parentTransform1->b);
HXDLIN(2516)			target1->ty = ((_hx_tmp13 + (local->ty * parentTransform1->d)) + parentTransform1->ty);
            		}
            		else {
HXLINE(2520)			this->_hx___renderTransform->copyFrom(local);
            		}
HXLINE(2524)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE(2526)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2526)			Float px = -(this->_hx___scrollRect->x);
HXDLIN(2526)			Float py = -(this->_hx___scrollRect->y);
HXDLIN(2526)			Float _hx_tmp14 = (px * _this->a);
HXDLIN(2526)			_this->tx = ((_hx_tmp14 + (py * _this->c)) + _this->tx);
HXDLIN(2526)			Float _hx_tmp15 = (px * _this->b);
HXDLIN(2526)			_this->ty = ((_hx_tmp15 + (py * _this->d)) + _this->ty);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateTransforms,(void))

Float DisplayObject_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2542_get_alpha)
HXDLIN(2542)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_alpha,return )

Float DisplayObject_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2547_set_alpha)
HXLINE(2549)		if ((value > ((Float)1.0))) {
HXLINE(2549)			value = ((Float)1.0);
            		}
HXLINE(2550)		if ((value < ((Float)0.0))) {
HXLINE(2550)			value = ((Float)0.0);
            		}
HXLINE(2552)		if ((value != this->_hx___alpha)) {
HXLINE(2552)			if (!(this->_hx___renderDirty)) {
HXLINE(2552)				this->_hx___renderDirty = true;
HXDLIN(2552)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2553)		return (this->_hx___alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_alpha,return )

 ::Dynamic DisplayObject_obj::get_blendMode(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2560_get_blendMode)
HXDLIN(2560)		return this->_hx___blendMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_blendMode,return )

 ::Dynamic DisplayObject_obj::set_blendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2565_set_blendMode)
HXLINE(2567)		if (hx::IsNull( value )) {
HXLINE(2567)			value = (int)10;
            		}
HXLINE(2569)		if (hx::IsNotEq( value,this->_hx___blendMode )) {
HXLINE(2569)			if (!(this->_hx___renderDirty)) {
HXLINE(2569)				this->_hx___renderDirty = true;
HXDLIN(2569)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2570)		return (this->_hx___blendMode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_blendMode,return )

bool DisplayObject_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2577_get_cacheAsBitmap)
HXDLIN(2577)		if (hx::IsNull( this->_hx___filters )) {
HXDLIN(2577)			return this->_hx___cacheAsBitmap;
            		}
            		else {
HXDLIN(2577)			return true;
            		}
HXDLIN(2577)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmap,return )

bool DisplayObject_obj::set_cacheAsBitmap(bool value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2582_set_cacheAsBitmap)
HXLINE(2584)		if ((value != this->_hx___cacheAsBitmap)) {
HXLINE(2586)			if (!(this->_hx___renderDirty)) {
HXLINE(2586)				this->_hx___renderDirty = true;
HXDLIN(2586)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2590)		return (this->_hx___cacheAsBitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmap,return )

 ::openfl::geom::Matrix DisplayObject_obj::get_cacheAsBitmapMatrix(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2597_get_cacheAsBitmapMatrix)
HXDLIN(2597)		return this->_hx___cacheAsBitmapMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmapMatrix,return )

 ::openfl::geom::Matrix DisplayObject_obj::set_cacheAsBitmapMatrix( ::openfl::geom::Matrix value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2602_set_cacheAsBitmapMatrix)
HXLINE(2604)		if (!(this->_hx___renderDirty)) {
HXLINE(2604)			this->_hx___renderDirty = true;
HXDLIN(2604)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2605)		 ::openfl::geom::Matrix _hx_tmp;
HXDLIN(2605)		if (hx::IsNotNull( value )) {
HXLINE(2605)			_hx_tmp = value->clone();
            		}
            		else {
HXLINE(2605)			_hx_tmp = value;
            		}
HXDLIN(2605)		return (this->_hx___cacheAsBitmapMatrix = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmapMatrix,return )

::Array< ::Dynamic> DisplayObject_obj::get_filters(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2612_get_filters)
HXDLIN(2612)		if (hx::IsNull( this->_hx___filters )) {
HXLINE(2614)			return ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE(2618)			return this->_hx___filters->copy();
            		}
HXLINE(2612)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_filters,return )

::Array< ::Dynamic> DisplayObject_obj::set_filters(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2625_set_filters)
HXLINE(2627)		bool _hx_tmp;
HXDLIN(2627)		if (hx::IsNotNull( value )) {
HXLINE(2627)			_hx_tmp = (value->length > (int)0);
            		}
            		else {
HXLINE(2627)			_hx_tmp = false;
            		}
HXDLIN(2627)		if (_hx_tmp) {
HXLINE(2631)			this->_hx___filters = value;
HXLINE(2633)			if (!(this->_hx___renderDirty)) {
HXLINE(2633)				this->_hx___renderDirty = true;
HXDLIN(2633)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2635)			if (hx::IsNotNull( this->_hx___filters )) {
HXLINE(2637)				this->_hx___filters = null();
HXLINE(2639)				if (!(this->_hx___renderDirty)) {
HXLINE(2639)					this->_hx___renderDirty = true;
HXDLIN(2639)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
HXLINE(2643)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_filters,return )

Float DisplayObject_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2648_get_height)
HXLINE(2650)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(2651)		this->_hx___getLocalBounds(rect);
HXLINE(2652)		Float height = rect->height;
HXLINE(2653)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(2654)		return height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_height,return )

Float DisplayObject_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2659_set_height)
HXLINE(2661)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(2662)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE(2663)		matrix->identity();
HXLINE(2665)		this->_hx___getBounds(rect,matrix);
HXLINE(2667)		if ((value != rect->height)) {
HXLINE(2669)			this->set_scaleY(((Float)value / (Float)rect->height));
            		}
            		else {
HXLINE(2673)			this->set_scaleY((int)1);
            		}
HXLINE(2677)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(2678)		::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE(2680)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_height,return )

 ::openfl::display::LoaderInfo DisplayObject_obj::get_loaderInfo(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2685_get_loaderInfo)
HXLINE(2687)		if (hx::IsNotNull( this->stage )) {
HXLINE(2689)			return ::openfl::_internal::Lib_obj::current->_hx___loaderInfo;
            		}
HXLINE(2693)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_loaderInfo,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_mask(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2700_get_mask)
HXDLIN(2700)		return this->_hx___mask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mask,return )

 ::openfl::display::DisplayObject DisplayObject_obj::set_mask( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2705_set_mask)
HXLINE(2707)		if (hx::IsEq( value,this->_hx___mask )) {
HXLINE(2709)			return value;
            		}
HXLINE(2713)		if (hx::IsNotEq( value,this->_hx___mask )) {
HXLINE(2715)			this->_hx___setTransformDirty();
HXLINE(2716)			if (!(this->_hx___renderDirty)) {
HXLINE(2716)				this->_hx___renderDirty = true;
HXDLIN(2716)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2720)		if (hx::IsNotNull( this->_hx___mask )) {
HXLINE(2722)			this->_hx___mask->_hx___isMask = false;
HXLINE(2723)			this->_hx___mask->_hx___maskTarget = null();
HXLINE(2724)			this->_hx___mask->_hx___setTransformDirty();
HXLINE(2725)			{
HXLINE(2725)				 ::openfl::display::DisplayObject _this = this->_hx___mask;
HXDLIN(2725)				if (!(_this->_hx___renderDirty)) {
HXLINE(2725)					_this->_hx___renderDirty = true;
HXDLIN(2725)					_this->_hx___setParentRenderDirty();
            				}
            			}
            		}
HXLINE(2729)		if (hx::IsNotNull( value )) {
HXLINE(2731)			value->_hx___isMask = true;
HXLINE(2732)			value->_hx___maskTarget = hx::ObjectPtr<OBJ_>(this);
HXLINE(2733)			value->_hx___setWorldTransformInvalid();
            		}
HXLINE(2737)		bool _hx_tmp;
HXDLIN(2737)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(2737)			_hx_tmp = hx::IsNotEq( this->_hx___cacheBitmap->get_mask(),value );
            		}
            		else {
HXLINE(2737)			_hx_tmp = false;
            		}
HXDLIN(2737)		if (_hx_tmp) {
HXLINE(2739)			this->_hx___cacheBitmap->set_mask(value);
            		}
HXLINE(2743)		return (this->_hx___mask = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_mask,return )

Float DisplayObject_obj::get_mouseX(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2748_get_mouseX)
HXLINE(2750)		Float mouseX;
HXDLIN(2750)		if (hx::IsNotNull( this->stage )) {
HXLINE(2750)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(2750)			mouseX = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(2751)		Float mouseY;
HXDLIN(2751)		if (hx::IsNotNull( this->stage )) {
HXLINE(2751)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(2751)			mouseY = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(2753)		 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN(2753)		Float norm = (_this->a * _this->d);
HXDLIN(2753)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2753)		if ((norm1 == (int)0)) {
HXLINE(2753)			return -(_this->tx);
            		}
            		else {
HXLINE(2753)			Float _this1 = _this->c;
HXDLIN(2753)			Float _hx_tmp = (_this1 * (_this->ty - mouseY));
HXDLIN(2753)			Float _this2 = _this->d;
HXDLIN(2753)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this2 * (mouseX - _this->tx))));
            		}
HXDLIN(2753)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseX,return )

Float DisplayObject_obj::get_mouseY(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2758_get_mouseY)
HXLINE(2760)		Float mouseX;
HXDLIN(2760)		if (hx::IsNotNull( this->stage )) {
HXLINE(2760)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(2760)			mouseX = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(2761)		Float mouseY;
HXDLIN(2761)		if (hx::IsNotNull( this->stage )) {
HXLINE(2761)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(2761)			mouseY = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(2763)		 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN(2763)		Float norm = (_this->a * _this->d);
HXDLIN(2763)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2763)		if ((norm1 == (int)0)) {
HXLINE(2763)			return -(_this->ty);
            		}
            		else {
HXLINE(2763)			Float _this1 = _this->a;
HXDLIN(2763)			Float _hx_tmp = (_this1 * (mouseY - _this->ty));
HXDLIN(2763)			Float _this2 = _this->b;
HXDLIN(2763)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this2 * (_this->tx - mouseX))));
            		}
HXDLIN(2763)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseY,return )

::String DisplayObject_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2770_get_name)
HXDLIN(2770)		return this->_hx___name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_name,return )

::String DisplayObject_obj::set_name(::String value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2777_set_name)
HXDLIN(2777)		return (this->_hx___name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_name,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2782_get_root)
HXLINE(2784)		if (hx::IsNotNull( this->stage )) {
HXLINE(2786)			return ::openfl::_internal::Lib_obj::current;
            		}
HXLINE(2790)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_root,return )

Float DisplayObject_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2797_get_rotation)
HXDLIN(2797)		return this->_hx___rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_rotation,return )

Float DisplayObject_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2802_set_rotation)
HXLINE(2804)		if ((value != this->_hx___rotation)) {
HXLINE(2806)			this->_hx___rotation = value;
HXLINE(2807)			Float radians = this->_hx___rotation;
HXDLIN(2807)			Float radians1 = (radians * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE(2808)			this->_hx___rotationSine = ::Math_obj::sin(radians1);
HXLINE(2809)			this->_hx___rotationCosine = ::Math_obj::cos(radians1);
HXLINE(2811)			this->_hx___transform->a = (this->_hx___rotationCosine * this->_hx___scaleX);
HXLINE(2812)			this->_hx___transform->b = (this->_hx___rotationSine * this->_hx___scaleX);
HXLINE(2813)			this->_hx___transform->c = (-(this->_hx___rotationSine) * this->_hx___scaleY);
HXLINE(2814)			this->_hx___transform->d = (this->_hx___rotationCosine * this->_hx___scaleY);
HXLINE(2816)			this->_hx___setTransformDirty();
            		}
HXLINE(2820)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_rotation,return )

Float DisplayObject_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2827_get_scaleX)
HXDLIN(2827)		return this->_hx___scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleX,return )

Float DisplayObject_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2832_set_scaleX)
HXLINE(2834)		if ((value != this->_hx___scaleX)) {
HXLINE(2836)			this->_hx___scaleX = value;
HXLINE(2838)			if ((this->_hx___transform->b == (int)0)) {
HXLINE(2840)				if ((value != this->_hx___transform->a)) {
HXLINE(2840)					this->_hx___setTransformDirty();
            				}
HXLINE(2841)				this->_hx___transform->a = value;
            			}
            			else {
HXLINE(2845)				Float a = (this->_hx___rotationCosine * value);
HXLINE(2846)				Float b = (this->_hx___rotationSine * value);
HXLINE(2848)				bool _hx_tmp;
HXDLIN(2848)				if ((this->_hx___transform->a == a)) {
HXLINE(2848)					_hx_tmp = (this->_hx___transform->b != b);
            				}
            				else {
HXLINE(2848)					_hx_tmp = true;
            				}
HXDLIN(2848)				if (_hx_tmp) {
HXLINE(2850)					this->_hx___setTransformDirty();
            				}
HXLINE(2854)				this->_hx___transform->a = a;
HXLINE(2855)				this->_hx___transform->b = b;
            			}
            		}
HXLINE(2861)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleX,return )

Float DisplayObject_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2868_get_scaleY)
HXDLIN(2868)		return this->_hx___scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleY,return )

Float DisplayObject_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2873_set_scaleY)
HXLINE(2875)		if ((value != this->_hx___scaleY)) {
HXLINE(2877)			this->_hx___scaleY = value;
HXLINE(2879)			if ((this->_hx___transform->c == (int)0)) {
HXLINE(2881)				if ((value != this->_hx___transform->d)) {
HXLINE(2881)					this->_hx___setTransformDirty();
            				}
HXLINE(2882)				this->_hx___transform->d = value;
            			}
            			else {
HXLINE(2886)				Float c = (-(this->_hx___rotationSine) * value);
HXLINE(2887)				Float d = (this->_hx___rotationCosine * value);
HXLINE(2889)				bool _hx_tmp;
HXDLIN(2889)				if ((this->_hx___transform->d == d)) {
HXLINE(2889)					_hx_tmp = (this->_hx___transform->c != c);
            				}
            				else {
HXLINE(2889)					_hx_tmp = true;
            				}
HXDLIN(2889)				if (_hx_tmp) {
HXLINE(2891)					this->_hx___setTransformDirty();
            				}
HXLINE(2895)				this->_hx___transform->c = c;
HXLINE(2896)				this->_hx___transform->d = d;
            			}
            		}
HXLINE(2902)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleY,return )

 ::openfl::geom::Rectangle DisplayObject_obj::get_scrollRect(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2907_get_scrollRect)
HXLINE(2909)		if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE(2911)			return null();
            		}
HXLINE(2915)		return this->_hx___scrollRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scrollRect,return )

 ::openfl::geom::Rectangle DisplayObject_obj::set_scrollRect( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2920_set_scrollRect)
HXLINE(2922)		if (hx::IsNotEq( value,this->_hx___scrollRect )) {
HXLINE(2924)			this->_hx___setTransformDirty();
            		}
HXLINE(2934)		return (this->_hx___scrollRect = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scrollRect,return )

 ::openfl::display::Shader DisplayObject_obj::get_shader(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2941_get_shader)
HXDLIN(2941)		return this->_hx___shader;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_shader,return )

 ::openfl::display::Shader DisplayObject_obj::set_shader( ::openfl::display::Shader value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2946_set_shader)
HXLINE(2948)		this->_hx___shader = value;
HXLINE(2949)		if (!(this->_hx___renderDirty)) {
HXLINE(2949)			this->_hx___renderDirty = true;
HXDLIN(2949)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2950)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_shader,return )

 ::openfl::geom::Transform DisplayObject_obj::get_transform(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_2955_get_transform)
HXLINE(2957)		if (hx::IsNull( this->_hx___objectTransform )) {
HXLINE(2959)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2963)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transform,return )

 ::openfl::geom::Transform DisplayObject_obj::set_transform( ::openfl::geom::Transform value){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_2968_set_transform)
HXLINE(2970)		if (hx::IsNull( value )) {
HXLINE(2972)			HX_STACK_DO_THROW( ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Parameter transform must be non-null.",56,12,fe,6e)));
            		}
HXLINE(2976)		if (hx::IsNull( this->_hx___objectTransform )) {
HXLINE(2978)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2982)		this->_hx___setTransformDirty();
HXLINE(2983)		 ::openfl::geom::Transform _hx_tmp = this->_hx___objectTransform;
HXDLIN(2983)		_hx_tmp->set_matrix(value->get_matrix());
HXLINE(2985)		 ::openfl::geom::ColorTransform _hx_tmp1 = this->_hx___objectTransform->get_colorTransform();
HXDLIN(2985)		if (!(_hx_tmp1->_hx___equals(value->get_colorTransform(),true))) {
HXLINE(2987)			 ::openfl::geom::ColorTransform _hx_tmp2 = this->_hx___objectTransform->get_colorTransform();
HXDLIN(2987)			_hx_tmp2->_hx___copyFrom(value->get_colorTransform());
HXLINE(2988)			if (!(this->_hx___renderDirty)) {
HXLINE(2988)				this->_hx___renderDirty = true;
HXDLIN(2988)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2992)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_transform,return )

bool DisplayObject_obj::get_visible(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_2999_get_visible)
HXDLIN(2999)		return this->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_visible,return )

bool DisplayObject_obj::set_visible(bool value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_3004_set_visible)
HXLINE(3006)		if ((value != this->_hx___visible)) {
HXLINE(3006)			if (!(this->_hx___renderDirty)) {
HXLINE(3006)				this->_hx___renderDirty = true;
HXDLIN(3006)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3007)		return (this->_hx___visible = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_visible,return )

Float DisplayObject_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_3012_get_width)
HXLINE(3014)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(3015)		this->_hx___getLocalBounds(rect);
HXLINE(3016)		Float width = rect->width;
HXLINE(3017)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(3018)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_width,return )

Float DisplayObject_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_3023_set_width)
HXLINE(3025)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(3026)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE(3027)		matrix->identity();
HXLINE(3029)		this->_hx___getBounds(rect,matrix);
HXLINE(3031)		if ((value != rect->width)) {
HXLINE(3033)			this->set_scaleX(((Float)value / (Float)rect->width));
            		}
            		else {
HXLINE(3037)			this->set_scaleX((int)1);
            		}
HXLINE(3041)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(3042)		::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE(3044)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_width,return )

Float DisplayObject_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_3051_get_x)
HXDLIN(3051)		return this->_hx___transform->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_x,return )

Float DisplayObject_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_3056_set_x)
HXLINE(3058)		if ((value != this->_hx___transform->tx)) {
HXLINE(3058)			this->_hx___setTransformDirty();
            		}
HXLINE(3059)		return (this->_hx___transform->tx = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_x,return )

Float DisplayObject_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_3066_get_y)
HXDLIN(3066)		return this->_hx___transform->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_y,return )

Float DisplayObject_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_3071_set_y)
HXLINE(3073)		if ((value != this->_hx___transform->ty)) {
HXLINE(3073)			this->_hx___setTransformDirty();
            		}
HXLINE(3074)		return (this->_hx___transform->ty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_y,return )

 ::haxe::ds::StringMap DisplayObject_obj::_hx___broadcastEvents;

 ::openfl::display::Stage DisplayObject_obj::_hx___initStage;

int DisplayObject_obj::_hx___instanceCount;

bool DisplayObject_obj::_hx___supportDOM;

 ::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject DisplayObject_obj::_hx___tempStack;

void DisplayObject_obj::_hx___calculateAbsoluteTransform( ::openfl::geom::Matrix local, ::openfl::geom::Matrix parentTransform, ::openfl::geom::Matrix target){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1186___calculateAbsoluteTransform)
HXLINE(1188)		Float _hx_tmp = (local->a * parentTransform->a);
HXDLIN(1188)		target->a = (_hx_tmp + (local->b * parentTransform->c));
HXLINE(1189)		Float _hx_tmp1 = (local->a * parentTransform->b);
HXDLIN(1189)		target->b = (_hx_tmp1 + (local->b * parentTransform->d));
HXLINE(1190)		Float _hx_tmp2 = (local->c * parentTransform->a);
HXDLIN(1190)		target->c = (_hx_tmp2 + (local->d * parentTransform->c));
HXLINE(1191)		Float _hx_tmp3 = (local->c * parentTransform->b);
HXDLIN(1191)		target->d = (_hx_tmp3 + (local->d * parentTransform->d));
HXLINE(1192)		Float _hx_tmp4 = (local->tx * parentTransform->a);
HXDLIN(1192)		target->tx = ((_hx_tmp4 + (local->ty * parentTransform->c)) + parentTransform->tx);
HXLINE(1193)		Float _hx_tmp5 = (local->tx * parentTransform->b);
HXDLIN(1193)		target->ty = ((_hx_tmp5 + (local->ty * parentTransform->d)) + parentTransform->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,_hx___calculateAbsoluteTransform,(void))


hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__new() {
	hx::ObjectPtr< DisplayObject_obj > __this = new DisplayObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObject_obj *__this = (DisplayObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObject_obj), true, "openfl.display.DisplayObject"));
	*(void **)__this = DisplayObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObject_obj::DisplayObject_obj()
{
}

void DisplayObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObject);
	HX_MARK_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmap,"__cacheBitmap");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapBackground,"__cacheBitmapBackground");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapColorTransform,"__cacheBitmapColorTransform");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapData,"__cacheBitmapData");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapData2,"__cacheBitmapData2");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapData3,"__cacheBitmapData3");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapMatrix,"__cacheBitmapMatrix");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapRenderer,"__cacheBitmapRenderer");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___children,"__children");
	HX_MARK_MEMBER_NAME(_hx___customRenderClear,"__customRenderClear");
	HX_MARK_MEMBER_NAME(_hx___customRenderEvent,"__customRenderEvent");
	HX_MARK_MEMBER_NAME(_hx___filters,"__filters");
	HX_MARK_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_MARK_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_MARK_MEMBER_NAME(_hx___isCacheBitmapRender,"__isCacheBitmapRender");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___loaderInfo,"__loaderInfo");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___maskTarget,"__maskTarget");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	HX_MARK_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_MARK_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___renderTransformCache,"__renderTransformCache");
	HX_MARK_MEMBER_NAME(_hx___renderTransformChanged,"__renderTransformChanged");
	HX_MARK_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_MARK_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_MARK_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_MARK_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_MARK_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___shader,"__shader");
	HX_MARK_MEMBER_NAME(_hx___tempPoint,"__tempPoint");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_MARK_MEMBER_NAME(_hx___worldBlendMode,"__worldBlendMode");
	HX_MARK_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_MARK_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldShader,"__worldShader");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_MARK_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_MARK_MEMBER_NAME(_hx___worldTransformInvalid,"__worldTransformInvalid");
	HX_MARK_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmap,"__cacheBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapBackground,"__cacheBitmapBackground");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapColorTransform,"__cacheBitmapColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapData,"__cacheBitmapData");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapData2,"__cacheBitmapData2");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapData3,"__cacheBitmapData3");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapMatrix,"__cacheBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapRenderer,"__cacheBitmapRenderer");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___children,"__children");
	HX_VISIT_MEMBER_NAME(_hx___customRenderClear,"__customRenderClear");
	HX_VISIT_MEMBER_NAME(_hx___customRenderEvent,"__customRenderEvent");
	HX_VISIT_MEMBER_NAME(_hx___filters,"__filters");
	HX_VISIT_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_VISIT_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_VISIT_MEMBER_NAME(_hx___isCacheBitmapRender,"__isCacheBitmapRender");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___loaderInfo,"__loaderInfo");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___maskTarget,"__maskTarget");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	HX_VISIT_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_VISIT_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___renderTransformCache,"__renderTransformCache");
	HX_VISIT_MEMBER_NAME(_hx___renderTransformChanged,"__renderTransformChanged");
	HX_VISIT_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_VISIT_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_VISIT_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_VISIT_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_VISIT_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___shader,"__shader");
	HX_VISIT_MEMBER_NAME(_hx___tempPoint,"__tempPoint");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldBlendMode,"__worldBlendMode");
	HX_VISIT_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_VISIT_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldShader,"__worldShader");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_VISIT_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldTransformInvalid,"__worldTransformInvalid");
	HX_VISIT_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mask() ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_root() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"stage") ) { return hx::Val( stage ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseX() ); }
		if (HX_FIELD_EQ(inName,"mouseY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseY() ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleY() ); }
		if (HX_FIELD_EQ(inName,"shader") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shader() ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_filters() ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_visible() ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo ); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return hx::Val( getRect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask ); }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { return hx::Val( _hx___scaleX ); }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { return hx::Val( _hx___scaleY ); }
		if (HX_FIELD_EQ(inName,"__shader") ) { return hx::Val( _hx___shader ); }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { return hx::Val( _hx___worldZ ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mask") ) { return hx::Val( get_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mask") ) { return hx::Val( set_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blendMode() ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transform() ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { return hx::Val( _hx___filters ); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loaderInfo() ); }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { return hx::Val( scale9Grid ); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollRect() ); }
		if (HX_FIELD_EQ(inName,"__children") ) { return hx::Val( _hx___children ); }
		if (HX_FIELD_EQ(inName,"__graphics") ) { return hx::Val( _hx___graphics ); }
		if (HX_FIELD_EQ(inName,"__rotation") ) { return hx::Val( _hx___rotation ); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shader") ) { return hx::Val( get_shader_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shader") ) { return hx::Val( set_shader_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__tempPoint") ) { return hx::Val( _hx___tempPoint ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { return hx::Val( _hx___worldClip ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_filters") ) { return hx::Val( get_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return hx::Val( set_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return hx::Val( get_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__loaderInfo") ) { return hx::Val( _hx___loaderInfo ); }
		if (HX_FIELD_EQ(inName,"__maskTarget") ) { return hx::Val( _hx___maskTarget ); }
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"hitTestPoint") ) { return hx::Val( hitTestPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cacheAsBitmap() ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmap") ) { return hx::Val( _hx___cacheBitmap ); }
		if (HX_FIELD_EQ(inName,"__interactive") ) { return hx::Val( _hx___interactive ); }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { return hx::Val( _hx___renderDirty ); }
		if (HX_FIELD_EQ(inName,"__worldShader") ) { return hx::Val( _hx___worldShader ); }
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return hx::Val( dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTestObject") ) { return hx::Val( hitTestObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderEvent") ) { return hx::Val( _hx___renderEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return hx::Val( get_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transform") ) { return hx::Val( get_transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { return hx::Val( _hx___renderParent ); }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { return hx::Val( _hx___rotationSine ); }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { return hx::Val( _hx___worldVisible ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_loaderInfo") ) { return hx::Val( get_loaderInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollRect") ) { return hx::Val( get_scrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollRect") ) { return hx::Val( set_scrollRect_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { return hx::Val( _hx___cacheAsBitmap ); }
		if (HX_FIELD_EQ(inName,"__dispatchEvent") ) { return hx::Val( _hx___dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__globalToLocal") ) { return hx::Val( _hx___globalToLocal_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { return hx::Val( opaqueBackground ); }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { return hx::Val( _hx___rotationCosine ); }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty ); }
		if (HX_FIELD_EQ(inName,"__worldBlendMode") ) { return hx::Val( _hx___worldBlendMode ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getLocalBounds") ) { return hx::Val( _hx___getLocalBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setRenderDirty") ) { return hx::Val( _hx___setRenderDirty_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__cacheBitmapData") ) { return hx::Val( _hx___cacheBitmapData ); }
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { return hx::Val( _hx___objectTransform ); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"__getFilterBounds") ) { return hx::Val( _hx___getFilterBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return hx::Val( set_cacheAsBitmap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__cacheBitmapData2") ) { return hx::Val( _hx___cacheBitmapData2 ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmapData3") ) { return hx::Val( _hx___cacheBitmapData3 ); }
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { return hx::Val( _hx___worldClipChanged ); }
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cacheAsBitmapMatrix() ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmapMatrix") ) { return hx::Val( _hx___cacheBitmapMatrix ); }
		if (HX_FIELD_EQ(inName,"__customRenderClear") ) { return hx::Val( _hx___customRenderClear ); }
		if (HX_FIELD_EQ(inName,"__customRenderEvent") ) { return hx::Val( _hx___customRenderEvent ); }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { return hx::Val( _hx___worldAlphaChanged ); }
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getWorldTransform") ) { return hx::Val( _hx___getWorldTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__getRenderTransform") ) { return hx::Val( _hx___getRenderTransform_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { return hx::Val( _hx___cacheAsBitmapMatrix ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmapRenderer") ) { return hx::Val( _hx___cacheBitmapRenderer ); }
		if (HX_FIELD_EQ(inName,"__isCacheBitmapRender") ) { return hx::Val( _hx___isCacheBitmapRender ); }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { return hx::Val( _hx___worldVisibleChanged ); }
		if (HX_FIELD_EQ(inName,"__dispatchWithCapture") ) { return hx::Val( _hx___dispatchWithCapture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderTransformCache") ) { return hx::Val( _hx___renderTransformCache ); }
		if (HX_FIELD_EQ(inName,"__setParentRenderDirty") ) { return hx::Val( _hx___setParentRenderDirty_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__cacheBitmapBackground") ) { return hx::Val( _hx___cacheBitmapBackground ); }
		if (HX_FIELD_EQ(inName,"__worldTransformInvalid") ) { return hx::Val( _hx___worldTransformInvalid ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmapMatrix") ) { return hx::Val( get_cacheAsBitmapMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmapMatrix") ) { return hx::Val( set_cacheAsBitmapMatrix_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__renderTransformChanged") ) { return hx::Val( _hx___renderTransformChanged ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setWorldTransformInvalid") ) { return hx::Val( _hx___setWorldTransformInvalid_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__cacheBitmapColorTransform") ) { return hx::Val( _hx___cacheBitmapColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__initStage") ) { outValue = ( _hx___initStage ); return true; }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { outValue = ( _hx___tempStack ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { outValue = ( _hx___instanceCount ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { outValue = ( _hx___broadcastEvents ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__calculateAbsoluteTransform") ) { outValue = _hx___calculateAbsoluteTransform_dyn(); return true; }
	}
	return false;
}

hx::Val DisplayObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mask(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::openfl::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"shader") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shader(inValue.Cast<  ::openfl::display::Shader >()) ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filters(inValue.Cast< ::Array< ::Dynamic> >()) ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { _hx___scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { _hx___scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__shader") ) { _hx___shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { _hx___worldZ=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transform(inValue.Cast<  ::openfl::geom::Transform >()) ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { _hx___filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { scale9Grid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollRect(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"__children") ) { _hx___children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__graphics") ) { _hx___graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotation") ) { _hx___rotation=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tempPoint") ) { _hx___tempPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { _hx___worldClip=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__loaderInfo") ) { _hx___loaderInfo=inValue.Cast<  ::openfl::display::LoaderInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__maskTarget") ) { _hx___maskTarget=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmap") ) { _hx___cacheBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__interactive") ) { _hx___interactive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { _hx___renderDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldShader") ) { _hx___worldShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { _hx___renderParent=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { _hx___rotationSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { _hx___worldVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { _hx___cacheAsBitmap=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { opaqueBackground=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { _hx___rotationCosine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldBlendMode") ) { _hx___worldBlendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__cacheBitmapData") ) { _hx___cacheBitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { _hx___objectTransform=inValue.Cast<  ::openfl::geom::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__cacheBitmapData2") ) { _hx___cacheBitmapData2=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cacheBitmapData3") ) { _hx___cacheBitmapData3=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { _hx___worldClipChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmapMatrix(inValue.Cast<  ::openfl::geom::Matrix >()) ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmapMatrix") ) { _hx___cacheBitmapMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__customRenderClear") ) { _hx___customRenderClear=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__customRenderEvent") ) { _hx___customRenderEvent=inValue.Cast<  ::openfl::events::RenderEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { _hx___worldAlphaChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { _hx___cacheAsBitmapMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cacheBitmapRenderer") ) { _hx___cacheBitmapRenderer=inValue.Cast<  ::openfl::display::DisplayObjectRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isCacheBitmapRender") ) { _hx___isCacheBitmapRender=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { _hx___worldVisibleChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderTransformCache") ) { _hx___renderTransformCache=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__cacheBitmapBackground") ) { _hx___cacheBitmapBackground=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransformInvalid") ) { _hx___worldTransformInvalid=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__renderTransformChanged") ) { _hx___renderTransformChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__cacheBitmapColorTransform") ) { _hx___cacheBitmapColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplayObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__initStage") ) { _hx___initStage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { _hx___tempStack=ioValue.Cast<  ::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { _hx___instanceCount=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { _hx___broadcastEvents=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void DisplayObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("cacheAsBitmap","\xe3","\x82","\x0f","\x6a"));
	outFields->push(HX_HCSTRING("cacheAsBitmapMatrix","\x84","\xf9","\x81","\x95"));
	outFields->push(HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6"));
	outFields->push(HX_HCSTRING("mask","\xec","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"));
	outFields->push(HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"));
	outFields->push(HX_HCSTRING("__cacheBitmap","\xb1","\x7c","\x25","\x58"));
	outFields->push(HX_HCSTRING("__cacheBitmapBackground","\xff","\x3b","\xef","\xca"));
	outFields->push(HX_HCSTRING("__cacheBitmapColorTransform","\x1a","\x5c","\xd5","\xa9"));
	outFields->push(HX_HCSTRING("__cacheBitmapData","\x7b","\xab","\xbc","\x95"));
	outFields->push(HX_HCSTRING("__cacheBitmapData2","\x57","\x60","\x59","\x6f"));
	outFields->push(HX_HCSTRING("__cacheBitmapData3","\x58","\x60","\x59","\x6f"));
	outFields->push(HX_HCSTRING("__cacheBitmapMatrix","\xd2","\x41","\x1e","\x98"));
	outFields->push(HX_HCSTRING("__cacheBitmapRenderer","\x14","\x97","\x78","\xd9"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"));
	outFields->push(HX_HCSTRING("__customRenderClear","\x06","\x03","\x07","\xb9"));
	outFields->push(HX_HCSTRING("__customRenderEvent","\x93","\x59","\x70","\xe6"));
	outFields->push(HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"));
	outFields->push(HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"));
	outFields->push(HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"));
	outFields->push(HX_HCSTRING("__isCacheBitmapRender","\x9d","\xcb","\x4a","\x93"));
	outFields->push(HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"));
	outFields->push(HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("__maskTarget","\x7d","\x9c","\x64","\xd4"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	outFields->push(HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"));
	outFields->push(HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"));
	outFields->push(HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"));
	outFields->push(HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc"));
	outFields->push(HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1"));
	outFields->push(HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"));
	outFields->push(HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"));
	outFields->push(HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"));
	outFields->push(HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"));
	outFields->push(HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"));
	outFields->push(HX_HCSTRING("__tempPoint","\x7c","\x01","\xd0","\x2a"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"));
	outFields->push(HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"));
	outFields->push(HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61"));
	outFields->push(HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"));
	outFields->push(HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldShader","\xf7","\x93","\x06","\x31"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"));
	outFields->push(HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"));
	outFields->push(HX_HCSTRING("__worldTransformInvalid","\x3d","\x6a","\x28","\x96"));
	outFields->push(HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,opaqueBackground),HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a")},
	{hx::fsObject /*::openfl::display::DisplayObjectContainer*/ ,(int)offsetof(DisplayObject_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,scale9Grid),HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(DisplayObject_obj,stage),HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmap),HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmapMatrix),HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmap),HX_HCSTRING("__cacheBitmap","\xb1","\x7c","\x25","\x58")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapBackground),HX_HCSTRING("__cacheBitmapBackground","\xff","\x3b","\xef","\xca")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapColorTransform),HX_HCSTRING("__cacheBitmapColorTransform","\x1a","\x5c","\xd5","\xa9")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapData),HX_HCSTRING("__cacheBitmapData","\x7b","\xab","\xbc","\x95")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapData2),HX_HCSTRING("__cacheBitmapData2","\x57","\x60","\x59","\x6f")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapData3),HX_HCSTRING("__cacheBitmapData3","\x58","\x60","\x59","\x6f")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapMatrix),HX_HCSTRING("__cacheBitmapMatrix","\xd2","\x41","\x1e","\x98")},
	{hx::fsObject /*::openfl::display::DisplayObjectRenderer*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapRenderer),HX_HCSTRING("__cacheBitmapRenderer","\x14","\x97","\x78","\xd9")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(DisplayObject_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___children),HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___customRenderClear),HX_HCSTRING("__customRenderClear","\x06","\x03","\x07","\xb9")},
	{hx::fsObject /*::openfl::events::RenderEvent*/ ,(int)offsetof(DisplayObject_obj,_hx___customRenderEvent),HX_HCSTRING("__customRenderEvent","\x93","\x59","\x70","\xe6")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___filters),HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(DisplayObject_obj,_hx___graphics),HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___interactive),HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___isCacheBitmapRender),HX_HCSTRING("__isCacheBitmapRender","\x9d","\xcb","\x4a","\x93")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___isMask),HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d")},
	{hx::fsObject /*::openfl::display::LoaderInfo*/ ,(int)offsetof(DisplayObject_obj,_hx___loaderInfo),HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___maskTarget),HX_HCSTRING("__maskTarget","\x7d","\x9c","\x64","\xd4")},
	{hx::fsString,(int)offsetof(DisplayObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{hx::fsObject /*::openfl::geom::Transform*/ ,(int)offsetof(DisplayObject_obj,_hx___objectTransform),HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderable),HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderDirty),HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___renderParent),HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransformCache),HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderTransformChanged),HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotation),HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationCosine),HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationSine),HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleX),HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleY),HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___scrollRect),HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(DisplayObject_obj,_hx___shader),HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(DisplayObject_obj,_hx___tempPoint),HX_HCSTRING("__tempPoint","\x7c","\x01","\xd0","\x2a")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___worldAlpha),HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldAlphaChanged),HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___worldBlendMode),HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___worldClip),HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldClipChanged),HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(DisplayObject_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(DisplayObject_obj,_hx___worldShader),HX_HCSTRING("__worldShader","\xf7","\x93","\x06","\x31")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisible),HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisibleChanged),HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldTransformInvalid),HX_HCSTRING("__worldTransformInvalid","\x3d","\x6a","\x28","\x96")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___worldZ),HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplayObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &DisplayObject_obj::_hx___broadcastEvents,HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &DisplayObject_obj::_hx___initStage,HX_HCSTRING("__initStage","\x6e","\xce","\xc9","\xcd")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___instanceCount,HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f")},
	{hx::fsBool,(void *) &DisplayObject_obj::_hx___supportDOM,HX_HCSTRING("__supportDOM","\xd3","\x00","\xfe","\x8b")},
	{hx::fsObject /*::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject*/ ,(void *) &DisplayObject_obj::_hx___tempStack,HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObject_obj_sMemberFields[] = {
	HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"),
	HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"),
	HX_HCSTRING("__cacheBitmap","\xb1","\x7c","\x25","\x58"),
	HX_HCSTRING("__cacheBitmapBackground","\xff","\x3b","\xef","\xca"),
	HX_HCSTRING("__cacheBitmapColorTransform","\x1a","\x5c","\xd5","\xa9"),
	HX_HCSTRING("__cacheBitmapData","\x7b","\xab","\xbc","\x95"),
	HX_HCSTRING("__cacheBitmapData2","\x57","\x60","\x59","\x6f"),
	HX_HCSTRING("__cacheBitmapData3","\x58","\x60","\x59","\x6f"),
	HX_HCSTRING("__cacheBitmapMatrix","\xd2","\x41","\x1e","\x98"),
	HX_HCSTRING("__cacheBitmapRenderer","\x14","\x97","\x78","\xd9"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"),
	HX_HCSTRING("__customRenderClear","\x06","\x03","\x07","\xb9"),
	HX_HCSTRING("__customRenderEvent","\x93","\x59","\x70","\xe6"),
	HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"),
	HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"),
	HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"),
	HX_HCSTRING("__isCacheBitmapRender","\x9d","\xcb","\x4a","\x93"),
	HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"),
	HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("__maskTarget","\x7d","\x9c","\x64","\xd4"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"),
	HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"),
	HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"),
	HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc"),
	HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1"),
	HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"),
	HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"),
	HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"),
	HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"),
	HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"),
	HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"),
	HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"),
	HX_HCSTRING("__tempPoint","\x7c","\x01","\xd0","\x2a"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"),
	HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"),
	HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61"),
	HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"),
	HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldShader","\xf7","\x93","\x06","\x31"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"),
	HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"),
	HX_HCSTRING("__worldTransformInvalid","\x3d","\x6a","\x28","\x96"),
	HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getRect","\xda","\xfc","\x29","\x1e"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("hitTestObject","\xe4","\x54","\x64","\xd7"),
	HX_HCSTRING("hitTestPoint","\xcb","\xa9","\x21","\xe4"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__dispatchEvent","\xe0","\xff","\x16","\x4e"),
	HX_HCSTRING("__dispatchWithCapture","\x66","\x3f","\x63","\x34"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getFilterBounds","\xe3","\x3a","\xba","\x18"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__getLocalBounds","\x6a","\x04","\x36","\xdf"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__getRenderTransform","\x60","\xc2","\x34","\xc0"),
	HX_HCSTRING("__getWorldTransform","\xd0","\xf4","\xfc","\x8b"),
	HX_HCSTRING("__globalToLocal","\xad","\x87","\x60","\xf3"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderEvent","\xc4","\x35","\xee","\x89"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__setParentRenderDirty","\xf0","\xbc","\x57","\xf3"),
	HX_HCSTRING("__setRenderDirty","\x7a","\x43","\x7f","\x81"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__setWorldTransformInvalid","\x7b","\xc9","\xb9","\xd4"),
	HX_HCSTRING("__shouldCacheHardware","\xb7","\xaf","\xf5","\x89"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateCacheBitmap","\x28","\x11","\x07","\x27"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_blendMode","\x2b","\xb8","\x9b","\xcd"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("set_cacheAsBitmap","\x46","\x66","\xed","\x93"),
	HX_HCSTRING("get_cacheAsBitmapMatrix","\x1b","\xa0","\xd7","\x9d"),
	HX_HCSTRING("set_cacheAsBitmapMatrix","\x27","\x09","\x39","\xa0"),
	HX_HCSTRING("get_filters","\xd2","\x01","\x41","\x8f"),
	HX_HCSTRING("set_filters","\xde","\x08","\xae","\x99"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_loaderInfo","\x6a","\x3a","\xda","\x2c"),
	HX_HCSTRING("get_mask","\x75","\xfc","\x10","\xc8"),
	HX_HCSTRING("set_mask","\xe9","\x55","\x6e","\x76"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scrollRect","\x1a","\x64","\x5c","\x7f"),
	HX_HCSTRING("set_scrollRect","\x8e","\x4c","\x7c","\x9f"),
	HX_HCSTRING("get_shader","\xee","\x2e","\xa8","\x0d"),
	HX_HCSTRING("set_shader","\x62","\xcd","\x25","\x11"),
	HX_HCSTRING("get_transform","\x43","\x01","\xf7","\x06"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("get_visible","\x89","\xd8","\x1e","\x29"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void DisplayObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___initStage,"__initStage");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___supportDOM,"__supportDOM");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___tempStack,"__tempStack");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___initStage,"__initStage");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___supportDOM,"__supportDOM");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___tempStack,"__tempStack");
};

#endif

hx::Class DisplayObject_obj::__mClass;

static ::String DisplayObject_obj_sStaticFields[] = {
	HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a"),
	HX_HCSTRING("__initStage","\x6e","\xce","\xc9","\xcd"),
	HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f"),
	HX_HCSTRING("__supportDOM","\xd3","\x00","\xfe","\x8b"),
	HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8"),
	HX_HCSTRING("__calculateAbsoluteTransform","\xcf","\xaa","\xec","\x8d"),
	::String(null())
};

void DisplayObject_obj::__register()
{
	hx::Object *dummy = new DisplayObject_obj;
	DisplayObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObject","\xf7","\x4b","\x6f","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObject_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObject_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_201_boot)
HXDLIN( 201)		_hx___broadcastEvents =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_203_boot)
HXDLIN( 203)		_hx___instanceCount = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_204_boot)
HXDLIN( 204)		_hx___supportDOM = false;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::_Vector::ObjectVector _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_205_boot)
HXDLIN( 205)			int length = null();
HXDLIN( 205)			bool fixed = null();
HXDLIN( 205)			return  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::openfl::_Vector::ObjectVector stack){
            			HX_STACKFRAME(&_hx_pos_26400284d5456c16_205_boot)
HXDLIN( 205)			stack->set_length((int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_205_boot)
HXDLIN( 205)		_hx___tempStack =  ::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()),null());
            	}
}

} // end namespace openfl
} // end namespace display
