// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6b3cf7183208346f_23_new,"Entity","new",0x9c9485b5,"Entity.new","Entity.hx",23,0x5c8a675b)
HX_LOCAL_STACK_FRAME(_hx_pos_6b3cf7183208346f_39_update,"Entity","update",0xee9313d4,"Entity.update","Entity.hx",39,0x5c8a675b)
HX_LOCAL_STACK_FRAME(_hx_pos_6b3cf7183208346f_48_movementHandler,"Entity","movementHandler",0x8b42c730,"Entity.movementHandler","Entity.hx",48,0x5c8a675b)
HX_LOCAL_STACK_FRAME(_hx_pos_6b3cf7183208346f_66_modifyHealth,"Entity","modifyHealth",0x7fa0c0c1,"Entity.modifyHealth","Entity.hx",66,0x5c8a675b)

void Entity_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic __o_CH, ::Dynamic __o_MH){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
 ::Dynamic CH = __o_CH.Default(0);
 ::Dynamic MH = __o_MH.Default(0);
            	HX_STACKFRAME(&_hx_pos_6b3cf7183208346f_23_new)
HXLINE(  24)		super::__construct(X,Y,null());
HXLINE(  26)		this->scale->set(((Float)0.25),((Float)0.25));
HXLINE(  27)		this->loadGraphic(HX_("assets/images/player.png",87,88,81,c6),null(),null(),null(),null(),null());
HXLINE(  29)		::flixel::tweens::FlxTween_obj::tween(this->scale, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),((Float)0.25))
            			->setFixed(1,HX_("y",79,00,00,00),((Float)0.25))),((Float)0.4), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticOut_dyn())));
HXLINE(  30)		this->currHealth = CH;
HXLINE(  31)		this->maxHealth = MH;
HXLINE(  32)		this->set_x(X);
HXLINE(  33)		this->set_y(Y);
HXLINE(  34)		this->velX = (int)200;
HXLINE(  35)		this->velY = (int)200;
            	}

Dynamic Entity_obj::__CreateEmpty() { return new Entity_obj; }

void *Entity_obj::_hx_vtable = 0;

Dynamic Entity_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Entity_obj > _hx_result = new Entity_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Entity_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x39b08743;
	}
}

void Entity_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6b3cf7183208346f_39_update)
HXDLIN(  39)		Float _hx_tmp = (this->velX * elapsed);
HXDLIN(  39)		this->movementHandler(_hx_tmp,(this->velY * elapsed));
            	}


void Entity_obj::movementHandler( ::Dynamic __o_X, ::Dynamic __o_Y){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_6b3cf7183208346f_48_movementHandler)
HXDLIN(  48)		if (::flixel::FlxG_obj::keys->enabled) {
HXLINE(  49)			 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  49)			int KeyArray;
HXDLIN(  49)			::String s = HX_("LEFT",07,d0,70,32);
HXDLIN(  49)			s = s.toUpperCase();
HXDLIN(  49)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE(  49)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE(  49)				KeyArray = (int)-1;
            			}
HXDLIN(  49)			::String s1 = HX_("A",41,00,00,00);
HXDLIN(  49)			s1 = s1.toUpperCase();
HXDLIN(  49)			int KeyArray1;
HXDLIN(  49)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE(  49)				KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            			}
            			else {
HXLINE(  49)				KeyArray1 = (int)-1;
            			}
HXDLIN(  49)			if (_this->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray)->init(1,KeyArray1),(int)1)) {
HXLINE(  50)				this->set_x((this->x - X));
HXLINE(  51)				this->set_flipX(true);
            			}
HXLINE(  53)			 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN(  53)			int KeyArray2;
HXDLIN(  53)			::String s2 = HX_("RIGHT",bc,43,52,67);
HXDLIN(  53)			s2 = s2.toUpperCase();
HXDLIN(  53)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE(  53)				KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            			}
            			else {
HXLINE(  53)				KeyArray2 = (int)-1;
            			}
HXDLIN(  53)			::String s3 = HX_("D",44,00,00,00);
HXDLIN(  53)			s3 = s3.toUpperCase();
HXDLIN(  53)			int KeyArray3;
HXDLIN(  53)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE(  53)				KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            			}
            			else {
HXLINE(  53)				KeyArray3 = (int)-1;
            			}
HXDLIN(  53)			if (_this1->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray2)->init(1,KeyArray3),(int)1)) {
HXLINE(  54)				this->set_x((this->x + X));
HXLINE(  55)				this->set_flipX(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Entity_obj,movementHandler,(void))

void Entity_obj::modifyHealth(::String order, ::Dynamic __o_value){
 ::Dynamic value = __o_value.Default(0);
            	HX_STACKFRAME(&_hx_pos_6b3cf7183208346f_66_modifyHealth)
HXDLIN(  66)		::String _hx_switch_0 = order;
            		if (  (_hx_switch_0==HX_("CURR",f2,12,8a,2c)) ){
HXLINE(  68)			 ::Entity _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  68)			_hx_tmp->currHealth = (_hx_tmp->currHealth + value);
HXDLIN(  68)			this->currHealth = _hx_tmp->currHealth;
HXDLIN(  68)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("MAX",84,a6,3a,00)) ){
HXLINE(  67)			 ::Entity _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  67)			_hx_tmp1->maxHealth = (_hx_tmp1->maxHealth + value);
HXDLIN(  67)			this->maxHealth = _hx_tmp1->maxHealth;
HXDLIN(  67)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Entity_obj,modifyHealth,(void))


hx::ObjectPtr< Entity_obj > Entity_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic __o_CH, ::Dynamic __o_MH) {
	hx::ObjectPtr< Entity_obj > __this = new Entity_obj();
	__this->__construct(__o_X,__o_Y,__o_CH,__o_MH);
	return __this;
}

hx::ObjectPtr< Entity_obj > Entity_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic __o_CH, ::Dynamic __o_MH) {
	Entity_obj *__this = (Entity_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Entity_obj), true, "Entity"));
	*(void **)__this = Entity_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_CH,__o_MH);
	return __this;
}

Entity_obj::Entity_obj()
{
}

hx::Val Entity_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"velX") ) { return hx::Val( velX ); }
		if (HX_FIELD_EQ(inName,"velY") ) { return hx::Val( velY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maxHealth") ) { return hx::Val( maxHealth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currHealth") ) { return hx::Val( currHealth ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"modifyHealth") ) { return hx::Val( modifyHealth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"movementHandler") ) { return hx::Val( movementHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Entity_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"velX") ) { velX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"velY") ) { velY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maxHealth") ) { maxHealth=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currHealth") ) { currHealth=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Entity_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("velX","\x5b","\x2f","\x4c","\x4e"));
	outFields->push(HX_HCSTRING("velY","\x5c","\x2f","\x4c","\x4e"));
	outFields->push(HX_HCSTRING("currHealth","\x2e","\xa9","\xc1","\xf3"));
	outFields->push(HX_HCSTRING("maxHealth","\x60","\x3a","\x91","\x2c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Entity_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Entity_obj,velX),HX_HCSTRING("velX","\x5b","\x2f","\x4c","\x4e")},
	{hx::fsFloat,(int)offsetof(Entity_obj,velY),HX_HCSTRING("velY","\x5c","\x2f","\x4c","\x4e")},
	{hx::fsFloat,(int)offsetof(Entity_obj,currHealth),HX_HCSTRING("currHealth","\x2e","\xa9","\xc1","\xf3")},
	{hx::fsFloat,(int)offsetof(Entity_obj,maxHealth),HX_HCSTRING("maxHealth","\x60","\x3a","\x91","\x2c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Entity_obj_sStaticStorageInfo = 0;
#endif

static ::String Entity_obj_sMemberFields[] = {
	HX_HCSTRING("velX","\x5b","\x2f","\x4c","\x4e"),
	HX_HCSTRING("velY","\x5c","\x2f","\x4c","\x4e"),
	HX_HCSTRING("currHealth","\x2e","\xa9","\xc1","\xf3"),
	HX_HCSTRING("maxHealth","\x60","\x3a","\x91","\x2c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("movementHandler","\x5b","\xe6","\x5c","\x4d"),
	HX_HCSTRING("modifyHealth","\xb6","\x48","\x66","\x24"),
	::String(null()) };

static void Entity_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Entity_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Entity_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Entity_obj::__mClass,"__mClass");
};

#endif

hx::Class Entity_obj::__mClass;

void Entity_obj::__register()
{
	hx::Object *dummy = new Entity_obj;
	Entity_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Entity","\x43","\x87","\xb0","\x39");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Entity_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Entity_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Entity_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Entity_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Entity_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Entity_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

