// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayout
#include <openfl/_internal/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_120_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",120,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_169_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",169,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_164_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",164,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_267_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",267,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_586_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",586,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_607_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",607,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_626_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",626,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_828_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",828,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1672_restrictText,"openfl._internal.text.TextEngine","restrictText",0x020728d7,"openfl._internal.text.TextEngine.restrictText","openfl/_internal/text/TextEngine.hx",1672,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1697_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1697,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1822_trimText,"openfl._internal.text.TextEngine","trimText",0xf449c67d,"openfl._internal.text.TextEngine.trimText","openfl/_internal/text/TextEngine.hx",1822,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1841_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1841,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1879_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1879,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1906_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1906,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_195_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",195,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_239_findFontVariant,"openfl._internal.text.TextEngine","findFontVariant",0xfb6dc0af,"openfl._internal.text.TextEngine.findFontVariant","openfl/_internal/text/TextEngine.hx",239,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_295_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",295,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_329_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",329,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_392_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",392,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_48_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",48,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_49_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",49,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_50_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",50,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_51_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",51,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_53_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",53,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_120_new)
HXLINE( 122)		this->textField = textField;
HXLINE( 124)		this->width = (int)100;
HXLINE( 125)		this->height = (int)100;
HXLINE( 126)		this->set_text(HX_("",00,00,00,00));
HXLINE( 128)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 129)		this->textBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 131)		this->type = (int)0;
HXLINE( 132)		this->autoSize = (int)2;
HXLINE( 133)		this->embedFonts = false;
HXLINE( 134)		this->selectable = true;
HXLINE( 135)		this->borderColor = (int)0;
HXLINE( 136)		this->border = false;
HXLINE( 137)		this->backgroundColor = (int)16777215;
HXLINE( 138)		this->background = false;
HXLINE( 139)		this->gridFitType = (int)1;
HXLINE( 140)		this->maxChars = (int)0;
HXLINE( 141)		this->multiline = false;
HXLINE( 142)		this->sharpness = (int)0;
HXLINE( 143)		this->scrollH = (int)0;
HXLINE( 144)		this->scrollV = (int)1;
HXLINE( 145)		this->wordWrap = false;
HXLINE( 147)		int length = null();
HXDLIN( 147)		bool fixed = null();
HXDLIN( 147)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 148)		int length1 = null();
HXDLIN( 148)		bool fixed1 = null();
HXDLIN( 148)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 149)		int length2 = null();
HXDLIN( 149)		bool fixed2 = null();
HXDLIN( 149)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null(),true);
HXLINE( 150)		int length3 = null();
HXDLIN( 150)		bool fixed3 = null();
HXDLIN( 150)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null(),true);
HXLINE( 151)		int length4 = null();
HXDLIN( 151)		bool fixed4 = null();
HXDLIN( 151)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null(),true);
HXLINE( 152)		int length5 = null();
HXDLIN( 152)		bool fixed5 = null();
HXDLIN( 152)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null(),true);
HXLINE( 153)		int length6 = null();
HXDLIN( 153)		bool fixed6 = null();
HXDLIN( 153)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null(),true);
HXLINE( 154)		int length7 = null();
HXDLIN( 154)		bool fixed7 = null();
HXDLIN( 154)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null(),true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_169_createRestrictRegexp)
HXLINE( 171)			::Array< ::String > declined1 = declined;
HXDLIN( 171)			int accepted1 = (int)0;
HXDLIN( 171)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 171)			declined1[accepted1] = (declined2 + ereg->matched((int)1));
HXLINE( 172)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_164_createRestrictRegexp)
HXLINE( 166)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 167)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 169)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 176)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 178)		if ((accepted.length > (int)0)) {
HXLINE( 180)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 184)		if ((declined->__get((int)0).length > (int)0)) {
HXLINE( 186)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get((int)0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 190)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_267_getBounds)
HXLINE( 269)		int padding;
HXDLIN( 269)		if (this->border) {
HXLINE( 269)			padding = (int)1;
            		}
            		else {
HXLINE( 269)			padding = (int)0;
            		}
HXLINE( 271)		this->bounds->width = (this->width + padding);
HXLINE( 272)		this->bounds->height = (this->height + padding);
HXLINE( 274)		Float x = this->width;
HXDLIN( 274)		Float y = this->width;
HXLINE( 276)		{
HXLINE( 276)			int _g = (int)0;
HXDLIN( 276)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 276)			while((_g < _g1->get_length())){
HXLINE( 276)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 276)				_g = (_g + (int)1);
HXLINE( 278)				if ((group->offsetX < x)) {
HXLINE( 278)					x = group->offsetX;
            				}
HXLINE( 279)				if ((group->offsetY < y)) {
HXLINE( 279)					y = group->offsetY;
            				}
            			}
            		}
HXLINE( 283)		if ((x >= this->width)) {
HXLINE( 283)			x = (int)2;
            		}
HXLINE( 284)		if ((y >= this->height)) {
HXLINE( 284)			y = (int)2;
            		}
HXLINE( 290)		 ::openfl::geom::Rectangle _hx_tmp = this->textBounds;
HXDLIN( 290)		Float _hx_tmp1 = ::Math_obj::max((x - (int)2),(int)0);
HXDLIN( 290)		Float _hx_tmp2 = ::Math_obj::max((y - (int)2),(int)0);
HXDLIN( 290)		Float _hx_tmp3 = (this->textWidth + (int)4);
HXDLIN( 290)		Float _hx_tmp4 = ::Math_obj::min(_hx_tmp3,(this->bounds->width + (int)4));
HXDLIN( 290)		Float _hx_tmp5 = (this->textHeight + (int)4);
HXDLIN( 290)		_hx_tmp->setTo(_hx_tmp1,_hx_tmp2,_hx_tmp4,::Math_obj::min(_hx_tmp5,(this->bounds->height + (int)4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_586_getLine)
HXLINE( 588)		bool _hx_tmp;
HXDLIN( 588)		if ((index >= (int)0)) {
HXLINE( 588)			_hx_tmp = (index > (this->lineBreaks->get_length() + (int)1));
            		}
            		else {
HXLINE( 588)			_hx_tmp = true;
            		}
HXDLIN( 588)		if (_hx_tmp) {
HXLINE( 590)			return null();
            		}
HXLINE( 594)		if ((this->lineBreaks->get_length() == (int)0)) {
HXLINE( 596)			return this->text;
            		}
            		else {
HXLINE( 600)			::String _hx_tmp1 = this->text;
HXDLIN( 600)			int _hx_tmp2;
HXDLIN( 600)			if ((index > (int)0)) {
HXLINE( 600)				_hx_tmp2 = this->lineBreaks->get((index - (int)1));
            			}
            			else {
HXLINE( 600)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 600)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_hx_tmp1,_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 594)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_607_getLineBreakIndex)
HXLINE( 609)		int br = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("<br>",b2,8d,f3,27),startIndex);
HXLINE( 610)		int cr = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\n",0a,00,00,00),startIndex);
HXLINE( 611)		int lf = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\r",0d,00,00,00),startIndex);
HXLINE( 613)		bool _hx_tmp;
HXDLIN( 613)		if ((cr == (int)-1)) {
HXLINE( 613)			_hx_tmp = (br == (int)-1);
            		}
            		else {
HXLINE( 613)			_hx_tmp = false;
            		}
HXDLIN( 613)		if (_hx_tmp) {
HXLINE( 613)			return lf;
            		}
HXLINE( 614)		bool _hx_tmp1;
HXDLIN( 614)		if ((lf == (int)-1)) {
HXLINE( 614)			_hx_tmp1 = (br == (int)-1);
            		}
            		else {
HXLINE( 614)			_hx_tmp1 = false;
            		}
HXDLIN( 614)		if (_hx_tmp1) {
HXLINE( 614)			return cr;
            		}
HXLINE( 615)		bool _hx_tmp2;
HXDLIN( 615)		if ((lf == (int)-1)) {
HXLINE( 615)			_hx_tmp2 = (cr == (int)-1);
            		}
            		else {
HXLINE( 615)			_hx_tmp2 = false;
            		}
HXDLIN( 615)		if (_hx_tmp2) {
HXLINE( 615)			return br;
            		}
HXLINE( 617)		if ((cr == (int)-1)) {
HXLINE( 617)			return ::Std_obj::_hx_int(::Math_obj::min(br,lf));
            		}
HXLINE( 618)		if ((lf == (int)-1)) {
HXLINE( 618)			return ::Std_obj::_hx_int(::Math_obj::min(br,cr));
            		}
HXLINE( 619)		if ((br == (int)-1)) {
HXLINE( 619)			return ::Std_obj::_hx_int(::Math_obj::min(cr,lf));
            		}
HXLINE( 621)		return ::Std_obj::_hx_int(::Math_obj::min(::Math_obj::min(cr,lf),br));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_626_getLineMeasurements)
HXLINE( 628)		this->lineAscents->set_length((int)0);
HXLINE( 629)		this->lineDescents->set_length((int)0);
HXLINE( 630)		this->lineLeadings->set_length((int)0);
HXLINE( 631)		this->lineHeights->set_length((int)0);
HXLINE( 632)		this->lineWidths->set_length((int)0);
HXLINE( 634)		Float currentLineAscent = ((Float)0.0);
HXLINE( 635)		Float currentLineDescent = ((Float)0.0);
HXLINE( 636)		 ::Dynamic currentLineLeading = null();
HXLINE( 637)		Float currentLineHeight = ((Float)0.0);
HXLINE( 638)		Float currentLineWidth = ((Float)0.0);
HXLINE( 639)		Float currentTextHeight = ((Float)0.0);
HXLINE( 641)		this->textWidth = (int)0;
HXLINE( 642)		this->textHeight = (int)0;
HXLINE( 643)		this->numLines = (int)1;
HXLINE( 644)		this->bottomScrollV = (int)0;
HXLINE( 645)		this->maxScrollH = (int)0;
HXLINE( 647)		{
HXLINE( 647)			int _g = (int)0;
HXDLIN( 647)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 647)			while((_g < _g1->get_length())){
HXLINE( 647)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 647)				_g = (_g + (int)1);
HXLINE( 649)				while(true){
HXLINE( 649)					int group1 = group->lineIndex;
HXDLIN( 649)					if (!((group1 > (this->numLines - (int)1)))) {
HXLINE( 649)						goto _hx_goto_9;
            					}
HXLINE( 651)					this->lineAscents->push(currentLineAscent);
HXLINE( 652)					this->lineDescents->push(currentLineDescent);
HXLINE( 653)					{
HXLINE( 653)						Float _hx_tmp;
HXDLIN( 653)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 653)							_hx_tmp = currentLineLeading;
            						}
            						else {
HXLINE( 653)							_hx_tmp = (int)0;
            						}
HXDLIN( 653)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 654)					this->lineHeights->push(currentLineHeight);
HXLINE( 655)					this->lineWidths->push(currentLineWidth);
HXLINE( 657)					currentLineAscent = (int)0;
HXLINE( 658)					currentLineDescent = (int)0;
HXLINE( 659)					currentLineLeading = null();
HXLINE( 660)					currentLineHeight = (int)0;
HXLINE( 661)					currentLineWidth = (int)0;
HXLINE( 663)					this->numLines++;
HXLINE( 665)					Float _hx_tmp1 = this->textHeight;
HXDLIN( 665)					if ((_hx_tmp1 <= (this->height - (int)2))) {
HXLINE( 667)						this->bottomScrollV++;
            					}
            				}
            				_hx_goto_9:;
HXLINE( 673)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 674)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 676)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 678)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 682)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(currentLineLeading,group->leading));
            				}
HXLINE( 686)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 687)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 689)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 691)					this->textWidth = currentLineWidth;
            				}
HXLINE( 695)				currentTextHeight = (((group->offsetY - (int)2) + group->ascent) + group->descent);
HXLINE( 697)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 699)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 705)		bool _hx_tmp2;
HXDLIN( 705)		bool _hx_tmp3;
HXDLIN( 705)		if ((this->textHeight == (int)0)) {
HXLINE( 705)			_hx_tmp3 = hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 705)			_hx_tmp3 = false;
            		}
HXDLIN( 705)		if (_hx_tmp3) {
HXLINE( 705)			_hx_tmp2 = hx::IsEq( this->textField->get_type(),(int)1 );
            		}
            		else {
HXLINE( 705)			_hx_tmp2 = false;
            		}
HXDLIN( 705)		if (_hx_tmp2) {
HXLINE( 707)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 708)			Float ascent;
HXDLIN( 708)			Float descent;
HXDLIN( 708)			 ::Dynamic leading;
HXDLIN( 708)			Float heightValue;
HXLINE( 732)			 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 734)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 736)				ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXLINE( 737)				descent = (currentFormat->size * currentFormat->_hx___descent);
            			}
            			else {
HXLINE( 739)				bool _hx_tmp4;
HXDLIN( 739)				if (hx::IsNotNull( font )) {
HXLINE( 739)					_hx_tmp4 = (font->unitsPerEM != (int)0);
            				}
            				else {
HXLINE( 739)					_hx_tmp4 = false;
            				}
HXDLIN( 739)				if (_hx_tmp4) {
HXLINE( 741)					ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXLINE( 742)					descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            				}
            				else {
HXLINE( 746)					ascent = currentFormat->size;
HXLINE( 747)					descent = (currentFormat->size * ((Float)0.185));
            				}
            			}
HXLINE( 751)			leading = currentFormat->leading;
HXLINE( 753)			heightValue = ((ascent + descent) + leading);
HXLINE( 757)			currentLineAscent = ascent;
HXLINE( 758)			currentLineDescent = descent;
HXLINE( 759)			currentLineLeading = leading;
HXLINE( 761)			currentTextHeight = (ascent + descent);
HXLINE( 762)			this->textHeight = currentTextHeight;
            		}
HXLINE( 766)		this->lineAscents->push(currentLineAscent);
HXLINE( 767)		this->lineDescents->push(currentLineDescent);
HXLINE( 768)		{
HXLINE( 768)			Float _hx_tmp5;
HXDLIN( 768)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 768)				_hx_tmp5 = currentLineLeading;
            			}
            			else {
HXLINE( 768)				_hx_tmp5 = (int)0;
            			}
HXDLIN( 768)			this->lineLeadings->push(_hx_tmp5);
            		}
HXLINE( 769)		this->lineHeights->push(currentLineHeight);
HXLINE( 770)		this->lineWidths->push(currentLineWidth);
HXLINE( 772)		if ((this->numLines == (int)1)) {
HXLINE( 774)			this->bottomScrollV = (int)1;
HXLINE( 776)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 778)				 ::openfl::_internal::text::TextEngine _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 778)				_hx_tmp6->textHeight = (_hx_tmp6->textHeight + currentLineLeading);
            			}
            		}
            		else {
HXLINE( 782)			Float _hx_tmp7 = this->textHeight;
HXDLIN( 782)			if ((_hx_tmp7 <= (this->height - (int)2))) {
HXLINE( 784)				this->bottomScrollV++;
            			}
            		}
HXLINE( 788)		if (hx::IsNotEq( this->autoSize,(int)2 )) {
HXLINE( 790)			 ::Dynamic _g2 = this->autoSize;
HXDLIN( 790)			 ::Dynamic _hx_switch_0 = _g2;
            			if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 794)				if (!(this->wordWrap)) {
HXLINE( 796)					this->width = (this->textWidth + (int)4);
            				}
HXLINE( 800)				this->height = (this->textHeight + (int)4);
HXLINE( 801)				this->bottomScrollV = this->numLines;
HXLINE( 792)				goto _hx_goto_10;
            			}
            			/* default */{
            			}
            			_hx_goto_10:;
            		}
HXLINE( 810)		Float _hx_tmp8 = this->textWidth;
HXDLIN( 810)		if ((_hx_tmp8 > (this->width - (int)4))) {
HXLINE( 812)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + (int)4));
            		}
            		else {
HXLINE( 816)			this->maxScrollH = (int)0;
            		}
HXLINE( 820)		this->maxScrollV = ((this->numLines - this->bottomScrollV) + (int)1);
HXLINE( 822)		if ((this->scrollV > this->maxScrollV)) {
HXLINE( 822)			this->scrollV = this->maxScrollV;
            		}
HXLINE( 823)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 823)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_828_getLayoutGroups)
HXDLIN( 828)		 ::openfl::_internal::text::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 830)		this->layoutGroups->set_length((int)0);
HXLINE( 832)		bool _hx_tmp;
HXDLIN( 832)		if (hx::IsNotNull( this->text )) {
HXLINE( 832)			_hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->text,HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 832)			_hx_tmp = true;
            		}
HXDLIN( 832)		if (_hx_tmp) {
HXLINE( 832)			return;
            		}
HXLINE( 834)		int rangeIndex = (int)-1;
HXLINE( 835)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 836)		 ::lime::text::Font font = null();
HXLINE( 838)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 840)		int leading = (int)0;
HXLINE( 841)		Float ascent = ((Float)0.0);
HXDLIN( 841)		Float maxAscent = ((Float)0.0);
HXLINE( 842)		Float descent = ((Float)0.0);
HXLINE( 844)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 844)		::Array< ::Dynamic> positions = null();
HXLINE( 845)		Float widthValue = ((Float)0.0);
HXDLIN( 845)		Float heightValue = ((Float)0.0);
HXDLIN( 845)		Float maxHeightValue = ((Float)0.0);
HXLINE( 847)		int previousSpaceIndex = (int)-2;
HXLINE( 848)		int spaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),null());
HXLINE( 849)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 851)		Float offsetX = ((Float)2.0);
HXLINE( 852)		Float offsetY = ((Float)2.0);
HXLINE( 853)		int textIndex = (int)0;
HXLINE( 854)		int lineIndex = (int)0;
HXLINE( 855)		 ::openfl::text::TextFormat lineFormat = null();
HXLINE(1345)		if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1345)			rangeIndex = (rangeIndex + (int)1);
HXDLIN(1345)			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1345)			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1345)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            		}
HXLINE(1346)		{
HXLINE(1346)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1346)				ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1346)				descent = (currentFormat->size * currentFormat->_hx___descent);
            			}
            			else {
HXLINE(1346)				bool _hx_tmp1;
HXDLIN(1346)				if (hx::IsNotNull( font )) {
HXLINE(1346)					_hx_tmp1 = (font->unitsPerEM != (int)0);
            				}
            				else {
HXLINE(1346)					_hx_tmp1 = false;
            				}
HXDLIN(1346)				if (_hx_tmp1) {
HXLINE(1346)					ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1346)					descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            				}
            				else {
HXLINE(1346)					ascent = currentFormat->size;
HXDLIN(1346)					descent = (currentFormat->size * ((Float)0.185));
            				}
            			}
HXDLIN(1346)			leading = currentFormat->leading;
HXDLIN(1346)			heightValue = ((ascent + descent) + leading);
HXDLIN(1346)			if ((heightValue > maxHeightValue)) {
HXLINE(1346)				maxHeightValue = heightValue;
            			}
HXDLIN(1346)			if ((ascent > maxAscent)) {
HXLINE(1346)				maxAscent = ascent;
            			}
            		}
HXLINE(1348)		lineFormat = formatRange->format;
HXLINE(1349)		bool wrap;
HXLINE(1350)		int maxLoops = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) + (int)1);
HXLINE(1352)		while((textIndex < maxLoops)){
HXLINE(1354)			bool _hx_tmp2;
HXDLIN(1354)			if ((breakIndex > (int)-1)) {
HXLINE(1354)				if ((spaceIndex != (int)-1)) {
HXLINE(1354)					_hx_tmp2 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1354)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE(1354)				_hx_tmp2 = false;
            			}
HXDLIN(1354)			if (_hx_tmp2) {
HXLINE(1357)				if ((textIndex <= breakIndex)) {
HXLINE(1359)					if ((breakIndex <= formatRange->end)) {
HXLINE(1359)						::String text = _gthis->text;
HXDLIN(1359)						Float letterSpacing = ((Float)0.0);
HXDLIN(1359)						if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1359)							letterSpacing = formatRange->format->letterSpacing;
            						}
HXDLIN(1359)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1359)							_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1359)						Float width = ((Float)0.0);
HXDLIN(1359)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1359)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1359)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1359)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN(1359)						_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1359)						bool positions1;
HXDLIN(1359)						if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1359)							positions1 = (_gthis->sharpness < (int)400);
            						}
            						else {
HXLINE(1359)							positions1 = true;
            						}
HXDLIN(1359)						_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1359)						 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1359)						_gthis1->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text,textIndex,breakIndex));
HXDLIN(1359)						positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1359)						Float width1 = ((Float)0.0);
HXDLIN(1359)						{
HXLINE(1359)							int _g = (int)0;
HXDLIN(1359)							while((_g < positions->length)){
HXLINE(1359)								 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1359)								_g = (_g + (int)1);
HXDLIN(1359)								width1 = (width1 + position->advance->x);
            							}
            						}
HXDLIN(1359)						widthValue = width1;
            					}
            					else {
HXLINE(1359)						int tempIndex = textIndex;
HXDLIN(1359)						int tempRangeEnd = formatRange->end;
HXDLIN(1359)						int countRanges = (int)0;
HXDLIN(1359)						positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1359)						widthValue = (int)0;
HXDLIN(1359)						while(true){
HXLINE(1359)							if ((tempIndex != tempRangeEnd)) {
HXLINE(1359)								::String text1 = _gthis->text;
HXDLIN(1359)								Float letterSpacing1 = ((Float)0.0);
HXDLIN(1359)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1359)									letterSpacing1 = formatRange->format->letterSpacing;
            								}
HXDLIN(1359)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1359)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1359)								Float width2 = ((Float)0.0);
HXDLIN(1359)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1359)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1359)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1359)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1359)								_gthis->_hx___textLayout->letterSpacing = letterSpacing1;
HXDLIN(1359)								bool _hx_tmp3;
HXDLIN(1359)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1359)									_hx_tmp3 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1359)									_hx_tmp3 = true;
            								}
HXDLIN(1359)								_gthis->_hx___textLayout->autoHint = _hx_tmp3;
HXDLIN(1359)								 ::openfl::_internal::text::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1359)								_gthis2->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text1,tempIndex,tempRangeEnd));
HXDLIN(1359)								::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1359)								positions = positions->concat(tempPositions);
HXDLIN(1359)								Float width3 = ((Float)0.0);
HXDLIN(1359)								{
HXLINE(1359)									int _g1 = (int)0;
HXDLIN(1359)									while((_g1 < positions->length)){
HXLINE(1359)										 ::openfl::_internal::text::GlyphPosition position1 = positions->__get(_g1).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1359)										_g1 = (_g1 + (int)1);
HXDLIN(1359)										width3 = (width3 + position1->advance->x);
            									}
            								}
HXDLIN(1359)								widthValue = (widthValue + width3);
            							}
HXDLIN(1359)							if ((tempRangeEnd != breakIndex)) {
HXLINE(1359)								if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1359)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1359)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1359)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1359)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            								}
HXDLIN(1359)								tempIndex = tempRangeEnd;
HXDLIN(1359)								if ((breakIndex < formatRange->end)) {
HXLINE(1359)									tempRangeEnd = breakIndex;
            								}
            								else {
HXLINE(1359)									tempRangeEnd = formatRange->end;
            								}
HXDLIN(1359)								countRanges = (countRanges + (int)1);
            							}
            							else {
HXLINE(1359)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
HXDLIN(1359)						rangeIndex = (rangeIndex - (countRanges + (int)1));
HXDLIN(1359)						if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1359)							rangeIndex = (rangeIndex + (int)1);
HXDLIN(1359)							formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1359)							currentFormat->_hx___merge(formatRange->format);
HXDLIN(1359)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            						}
            					}
HXLINE(1360)					{
HXLINE(1360)						bool _hx_tmp4;
HXDLIN(1360)						if ((_gthis->width >= (int)4)) {
HXLINE(1360)							_hx_tmp4 = _gthis->wordWrap;
            						}
            						else {
HXLINE(1360)							_hx_tmp4 = false;
            						}
HXDLIN(1360)						if (_hx_tmp4) {
HXLINE(1360)							::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1360)							int i;
HXDLIN(1360)							int j;
HXDLIN(1360)							int placeIndex;
HXDLIN(1360)							Float positionWidth;
HXDLIN(1360)							 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1360)							 ::Dynamic tempPositions1;
HXDLIN(1360)							Float width4 = ((Float)0.0);
HXDLIN(1360)							{
HXLINE(1360)								int _g2 = (int)0;
HXDLIN(1360)								while((_g2 < remainingPositions->length)){
HXLINE(1360)									 ::openfl::_internal::text::GlyphPosition position2 = remainingPositions->__get(_g2).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)									_g2 = (_g2 + (int)1);
HXDLIN(1360)									width4 = (width4 + position2->advance->x);
            								}
            							}
HXDLIN(1360)							Float tempWidth = width4;
HXDLIN(1360)							while(((offsetX + tempWidth) > (_gthis->width - (int)2))){
HXLINE(1360)								j = (int)0;
HXDLIN(1360)								i = j;
HXDLIN(1360)								positionWidth = ((Float)0.0);
HXDLIN(1360)								while(((offsetX + positionWidth) < (_gthis->width - (int)2))){
HXLINE(1360)									currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)									if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1360)										i = (i + (int)1);
HXDLIN(1360)										j = (j + (int)1);
            									}
            									else {
HXLINE(1360)										positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1360)										i = (i + (int)1);
            									}
            								}
HXDLIN(1360)								bool _hx_tmp5;
HXDLIN(1360)								if ((i < (int)2)) {
HXLINE(1360)									_hx_tmp5 = (positionWidth > (_gthis->width - (int)4));
            								}
            								else {
HXLINE(1360)									_hx_tmp5 = false;
            								}
HXDLIN(1360)								if (_hx_tmp5) {
HXLINE(1360)									if ((((textIndex + i) - j) == breakIndex)) {
HXLINE(1360)										goto _hx_goto_17;
            									}
            								}
            								else {
HXLINE(1360)									while(((offsetX + positionWidth) > (_gthis->width - (int)2))){
HXLINE(1360)										i = (i - (int)1);
HXDLIN(1360)										if (((i - j) > (int)0)) {
HXLINE(1360)											{
HXLINE(1360)												int endIndex = ((textIndex + i) - j);
HXDLIN(1360)												if ((endIndex <= formatRange->end)) {
HXLINE(1360)													::String text2 = _gthis->text;
HXDLIN(1360)													Float letterSpacing2 = ((Float)0.0);
HXDLIN(1360)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)														letterSpacing2 = formatRange->format->letterSpacing;
            													}
HXDLIN(1360)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1360)													Float width5 = ((Float)0.0);
HXDLIN(1360)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1360)													_gthis->_hx___textLayout->letterSpacing = letterSpacing2;
HXDLIN(1360)													bool positions2;
HXDLIN(1360)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)														positions2 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1360)														positions2 = true;
            													}
HXDLIN(1360)													_gthis->_hx___textLayout->autoHint = positions2;
HXDLIN(1360)													 ::openfl::_internal::text::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1360)													_gthis3->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text2,textIndex,endIndex));
HXDLIN(1360)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)													Float width6 = ((Float)0.0);
HXDLIN(1360)													{
HXLINE(1360)														int _g3 = (int)0;
HXDLIN(1360)														while((_g3 < positions->length)){
HXLINE(1360)															 ::openfl::_internal::text::GlyphPosition position3 = positions->__get(_g3).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)															_g3 = (_g3 + (int)1);
HXDLIN(1360)															width6 = (width6 + position3->advance->x);
            														}
            													}
HXDLIN(1360)													widthValue = width6;
            												}
            												else {
HXLINE(1360)													int tempIndex1 = textIndex;
HXDLIN(1360)													int tempRangeEnd1 = formatRange->end;
HXDLIN(1360)													int countRanges1 = (int)0;
HXDLIN(1360)													positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1360)													widthValue = (int)0;
HXDLIN(1360)													while(true){
HXLINE(1360)														if ((tempIndex1 != tempRangeEnd1)) {
HXLINE(1360)															::String text3 = _gthis->text;
HXDLIN(1360)															Float letterSpacing3 = ((Float)0.0);
HXDLIN(1360)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)																letterSpacing3 = formatRange->format->letterSpacing;
            															}
HXDLIN(1360)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1360)															Float width7 = ((Float)0.0);
HXDLIN(1360)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1360)															_gthis->_hx___textLayout->letterSpacing = letterSpacing3;
HXDLIN(1360)															bool _hx_tmp6;
HXDLIN(1360)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)																_hx_tmp6 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1360)																_hx_tmp6 = true;
            															}
HXDLIN(1360)															_gthis->_hx___textLayout->autoHint = _hx_tmp6;
HXDLIN(1360)															 ::openfl::_internal::text::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1360)															_gthis4->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text3,tempIndex1,tempRangeEnd1));
HXDLIN(1360)															::Array< ::Dynamic> tempPositions2 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)															positions = positions->concat(tempPositions2);
HXDLIN(1360)															Float width8 = ((Float)0.0);
HXDLIN(1360)															{
HXLINE(1360)																int _g4 = (int)0;
HXDLIN(1360)																while((_g4 < positions->length)){
HXLINE(1360)																	 ::openfl::_internal::text::GlyphPosition position4 = positions->__get(_g4).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)																	_g4 = (_g4 + (int)1);
HXDLIN(1360)																	width8 = (width8 + position4->advance->x);
            																}
            															}
HXDLIN(1360)															widthValue = (widthValue + width8);
            														}
HXDLIN(1360)														if ((tempRangeEnd1 != endIndex)) {
HXLINE(1360)															if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)																rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)																formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
HXDLIN(1360)															tempIndex1 = tempRangeEnd1;
HXDLIN(1360)															if ((endIndex < formatRange->end)) {
HXLINE(1360)																tempRangeEnd1 = endIndex;
            															}
            															else {
HXLINE(1360)																tempRangeEnd1 = formatRange->end;
            															}
HXDLIN(1360)															countRanges1 = (countRanges1 + (int)1);
            														}
            														else {
HXLINE(1360)															goto _hx_goto_21;
            														}
            													}
            													_hx_goto_21:;
HXDLIN(1360)													rangeIndex = (rangeIndex - (countRanges1 + (int)1));
HXDLIN(1360)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
            												}
            											}
HXDLIN(1360)											positionWidth = widthValue;
            										}
            										else {
HXLINE(1360)											i = (int)1;
HXDLIN(1360)											j = (int)0;
            										}
            									}
            								}
HXDLIN(1360)								placeIndex = ((textIndex + i) - j);
HXDLIN(1360)								{
HXLINE(1360)									if ((placeIndex <= formatRange->end)) {
HXLINE(1360)										::String text4 = _gthis->text;
HXDLIN(1360)										Float letterSpacing4 = ((Float)0.0);
HXDLIN(1360)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)											letterSpacing4 = formatRange->format->letterSpacing;
            										}
HXDLIN(1360)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1360)										Float width9 = ((Float)0.0);
HXDLIN(1360)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1360)										_gthis->_hx___textLayout->letterSpacing = letterSpacing4;
HXDLIN(1360)										bool positions3;
HXDLIN(1360)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)											positions3 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1360)											positions3 = true;
            										}
HXDLIN(1360)										_gthis->_hx___textLayout->autoHint = positions3;
HXDLIN(1360)										 ::openfl::_internal::text::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1360)										_gthis5->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text4,textIndex,placeIndex));
HXDLIN(1360)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)										Float width10 = ((Float)0.0);
HXDLIN(1360)										{
HXLINE(1360)											int _g5 = (int)0;
HXDLIN(1360)											while((_g5 < positions->length)){
HXLINE(1360)												 ::openfl::_internal::text::GlyphPosition position5 = positions->__get(_g5).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)												_g5 = (_g5 + (int)1);
HXDLIN(1360)												width10 = (width10 + position5->advance->x);
            											}
            										}
HXDLIN(1360)										widthValue = width10;
HXDLIN(1360)										bool _hx_tmp7;
HXDLIN(1360)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1360)											_hx_tmp7 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1360)											_hx_tmp7 = true;
            										}
HXDLIN(1360)										if (_hx_tmp7) {
HXLINE(1360)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXDLIN(1360)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1360)											layoutGroup->format = formatRange->format;
HXDLIN(1360)											layoutGroup->startIndex = textIndex;
HXDLIN(1360)											layoutGroup->endIndex = placeIndex;
            										}
HXDLIN(1360)										layoutGroup->positions = positions;
HXDLIN(1360)										layoutGroup->offsetX = offsetX;
HXDLIN(1360)										layoutGroup->ascent = ascent;
HXDLIN(1360)										layoutGroup->descent = descent;
HXDLIN(1360)										layoutGroup->leading = leading;
HXDLIN(1360)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1360)										layoutGroup->offsetY = offsetY;
HXDLIN(1360)										layoutGroup->width = widthValue;
HXDLIN(1360)										layoutGroup->height = heightValue;
HXDLIN(1360)										offsetX = (offsetX + widthValue);
HXDLIN(1360)										if ((placeIndex == formatRange->end)) {
HXLINE(1360)											layoutGroup = null();
HXDLIN(1360)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1360)											{
HXLINE(1360)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1360)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1360)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1360)													bool _hx_tmp8;
HXDLIN(1360)													if (hx::IsNotNull( font )) {
HXLINE(1360)														_hx_tmp8 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1360)														_hx_tmp8 = false;
            													}
HXDLIN(1360)													if (_hx_tmp8) {
HXLINE(1360)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1360)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1360)														ascent = currentFormat->size;
HXDLIN(1360)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1360)												leading = currentFormat->leading;
HXDLIN(1360)												heightValue = ((ascent + descent) + leading);
HXDLIN(1360)												if ((heightValue > maxHeightValue)) {
HXLINE(1360)													maxHeightValue = heightValue;
            												}
HXDLIN(1360)												if ((ascent > maxAscent)) {
HXLINE(1360)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1360)										while(true){
HXLINE(1360)											int tempRangeEnd2;
HXDLIN(1360)											if ((placeIndex < formatRange->end)) {
HXLINE(1360)												tempRangeEnd2 = placeIndex;
            											}
            											else {
HXLINE(1360)												tempRangeEnd2 = formatRange->end;
            											}
HXDLIN(1360)											if ((textIndex != tempRangeEnd2)) {
HXLINE(1360)												::String text5 = _gthis->text;
HXDLIN(1360)												Float letterSpacing5 = ((Float)0.0);
HXDLIN(1360)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)													letterSpacing5 = formatRange->format->letterSpacing;
            												}
HXDLIN(1360)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1360)												Float width11 = ((Float)0.0);
HXDLIN(1360)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1360)												_gthis->_hx___textLayout->letterSpacing = letterSpacing5;
HXDLIN(1360)												bool positions4;
HXDLIN(1360)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)													positions4 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1360)													positions4 = true;
            												}
HXDLIN(1360)												_gthis->_hx___textLayout->autoHint = positions4;
HXDLIN(1360)												 ::openfl::_internal::text::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1360)												_gthis6->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text5,textIndex,tempRangeEnd2));
HXDLIN(1360)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)												Float width12 = ((Float)0.0);
HXDLIN(1360)												{
HXLINE(1360)													int _g6 = (int)0;
HXDLIN(1360)													while((_g6 < positions->length)){
HXLINE(1360)														 ::openfl::_internal::text::GlyphPosition position6 = positions->__get(_g6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)														_g6 = (_g6 + (int)1);
HXDLIN(1360)														width12 = (width12 + position6->advance->x);
            													}
            												}
HXDLIN(1360)												widthValue = width12;
HXDLIN(1360)												bool _hx_tmp9;
HXDLIN(1360)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1360)													_hx_tmp9 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1360)													_hx_tmp9 = true;
            												}
HXDLIN(1360)												if (_hx_tmp9) {
HXLINE(1360)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd2);
HXDLIN(1360)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1360)													layoutGroup->format = formatRange->format;
HXDLIN(1360)													layoutGroup->startIndex = textIndex;
HXDLIN(1360)													layoutGroup->endIndex = tempRangeEnd2;
            												}
HXDLIN(1360)												layoutGroup->positions = positions;
HXDLIN(1360)												layoutGroup->offsetX = offsetX;
HXDLIN(1360)												layoutGroup->ascent = ascent;
HXDLIN(1360)												layoutGroup->descent = descent;
HXDLIN(1360)												layoutGroup->leading = leading;
HXDLIN(1360)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1360)												layoutGroup->offsetY = offsetY;
HXDLIN(1360)												layoutGroup->width = widthValue;
HXDLIN(1360)												layoutGroup->height = heightValue;
HXDLIN(1360)												offsetX = (offsetX + widthValue);
HXDLIN(1360)												textIndex = tempRangeEnd2;
            											}
HXDLIN(1360)											if ((tempRangeEnd2 == formatRange->end)) {
HXLINE(1360)												layoutGroup = null();
            											}
HXDLIN(1360)											if ((tempRangeEnd2 == placeIndex)) {
HXLINE(1360)												goto _hx_goto_24;
            											}
HXDLIN(1360)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1360)											{
HXLINE(1360)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1360)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1360)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1360)													bool _hx_tmp10;
HXDLIN(1360)													if (hx::IsNotNull( font )) {
HXLINE(1360)														_hx_tmp10 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1360)														_hx_tmp10 = false;
            													}
HXDLIN(1360)													if (_hx_tmp10) {
HXLINE(1360)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1360)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1360)														ascent = currentFormat->size;
HXDLIN(1360)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1360)												leading = currentFormat->leading;
HXDLIN(1360)												heightValue = ((ascent + descent) + leading);
HXDLIN(1360)												if ((heightValue > maxHeightValue)) {
HXLINE(1360)													maxHeightValue = heightValue;
            												}
HXDLIN(1360)												if ((ascent > maxAscent)) {
HXLINE(1360)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_24:;
            									}
HXDLIN(1360)									textIndex = placeIndex;
            								}
HXDLIN(1360)								{
HXLINE(1360)									{
HXLINE(1360)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1360)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1360)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1360)											bool _hx_tmp11;
HXDLIN(1360)											if (hx::IsNotNull( font )) {
HXLINE(1360)												_hx_tmp11 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1360)												_hx_tmp11 = false;
            											}
HXDLIN(1360)											if (_hx_tmp11) {
HXLINE(1360)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1360)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1360)												ascent = currentFormat->size;
HXDLIN(1360)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1360)										leading = currentFormat->leading;
HXDLIN(1360)										heightValue = ((ascent + descent) + leading);
HXDLIN(1360)										if ((heightValue > maxHeightValue)) {
HXLINE(1360)											maxHeightValue = heightValue;
            										}
HXDLIN(1360)										if ((ascent > maxAscent)) {
HXLINE(1360)											maxAscent = ascent;
            										}
            									}
HXDLIN(1360)									int i1 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1360)									while(true){
HXLINE(1360)										i1 = (i1 - (int)1);
HXDLIN(1360)										if (!((i1 > (int)-1))) {
HXLINE(1360)											goto _hx_goto_26;
            										}
HXDLIN(1360)										 ::openfl::_internal::text::TextLayoutGroup lg = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i1)) );
HXDLIN(1360)										if ((lg->lineIndex < lineIndex)) {
HXLINE(1360)											goto _hx_goto_26;
            										}
HXDLIN(1360)										if ((lg->lineIndex > lineIndex)) {
HXLINE(1360)											continue;
            										}
HXDLIN(1360)										lg->ascent = maxAscent;
HXDLIN(1360)										lg->height = maxHeightValue;
            									}
            									_hx_goto_26:;
HXDLIN(1360)									offsetY = (offsetY + maxHeightValue);
HXDLIN(1360)									maxAscent = ((Float)0.0);
HXDLIN(1360)									maxHeightValue = ((Float)0.0);
HXDLIN(1360)									lineIndex = (lineIndex + (int)1);
HXDLIN(1360)									offsetX = (int)2;
            								}
HXDLIN(1360)								if ((breakIndex <= formatRange->end)) {
HXLINE(1360)									::String text6 = _gthis->text;
HXDLIN(1360)									Float letterSpacing6 = ((Float)0.0);
HXDLIN(1360)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)										letterSpacing6 = formatRange->format->letterSpacing;
            									}
HXDLIN(1360)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1360)									Float width13 = ((Float)0.0);
HXDLIN(1360)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1360)									_gthis->_hx___textLayout->letterSpacing = letterSpacing6;
HXDLIN(1360)									bool positions5;
HXDLIN(1360)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)										positions5 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1360)										positions5 = true;
            									}
HXDLIN(1360)									_gthis->_hx___textLayout->autoHint = positions5;
HXDLIN(1360)									 ::openfl::_internal::text::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1360)									_gthis7->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text6,placeIndex,breakIndex));
HXDLIN(1360)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)									Float width14 = ((Float)0.0);
HXDLIN(1360)									{
HXLINE(1360)										int _g7 = (int)0;
HXDLIN(1360)										while((_g7 < positions->length)){
HXLINE(1360)											 ::openfl::_internal::text::GlyphPosition position7 = positions->__get(_g7).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)											_g7 = (_g7 + (int)1);
HXDLIN(1360)											width14 = (width14 + position7->advance->x);
            										}
            									}
HXDLIN(1360)									widthValue = width14;
            								}
            								else {
HXLINE(1360)									int tempIndex2 = placeIndex;
HXDLIN(1360)									int tempRangeEnd3 = formatRange->end;
HXDLIN(1360)									int countRanges2 = (int)0;
HXDLIN(1360)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1360)									widthValue = (int)0;
HXDLIN(1360)									while(true){
HXLINE(1360)										if ((tempIndex2 != tempRangeEnd3)) {
HXLINE(1360)											::String text7 = _gthis->text;
HXDLIN(1360)											Float letterSpacing7 = ((Float)0.0);
HXDLIN(1360)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)												letterSpacing7 = formatRange->format->letterSpacing;
            											}
HXDLIN(1360)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1360)											Float width15 = ((Float)0.0);
HXDLIN(1360)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1360)											_gthis->_hx___textLayout->letterSpacing = letterSpacing7;
HXDLIN(1360)											bool _hx_tmp12;
HXDLIN(1360)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)												_hx_tmp12 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1360)												_hx_tmp12 = true;
            											}
HXDLIN(1360)											_gthis->_hx___textLayout->autoHint = _hx_tmp12;
HXDLIN(1360)											 ::openfl::_internal::text::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1360)											_gthis8->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text7,tempIndex2,tempRangeEnd3));
HXDLIN(1360)											::Array< ::Dynamic> tempPositions3 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)											positions = positions->concat(tempPositions3);
HXDLIN(1360)											Float width16 = ((Float)0.0);
HXDLIN(1360)											{
HXLINE(1360)												int _g8 = (int)0;
HXDLIN(1360)												while((_g8 < positions->length)){
HXLINE(1360)													 ::openfl::_internal::text::GlyphPosition position8 = positions->__get(_g8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)													_g8 = (_g8 + (int)1);
HXDLIN(1360)													width16 = (width16 + position8->advance->x);
            												}
            											}
HXDLIN(1360)											widthValue = (widthValue + width16);
            										}
HXDLIN(1360)										if ((tempRangeEnd3 != breakIndex)) {
HXLINE(1360)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1360)											tempIndex2 = tempRangeEnd3;
HXDLIN(1360)											if ((breakIndex < formatRange->end)) {
HXLINE(1360)												tempRangeEnd3 = breakIndex;
            											}
            											else {
HXLINE(1360)												tempRangeEnd3 = formatRange->end;
            											}
HXDLIN(1360)											countRanges2 = (countRanges2 + (int)1);
            										}
            										else {
HXLINE(1360)											goto _hx_goto_28;
            										}
            									}
            									_hx_goto_28:;
HXDLIN(1360)									rangeIndex = (rangeIndex - (countRanges2 + (int)1));
HXDLIN(1360)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
            								}
HXDLIN(1360)								remainingPositions = positions;
HXDLIN(1360)								tempWidth = widthValue;
            							}
            							_hx_goto_17:;
            						}
HXDLIN(1360)						{
HXLINE(1360)							if ((breakIndex <= formatRange->end)) {
HXLINE(1360)								::String text8 = _gthis->text;
HXDLIN(1360)								Float letterSpacing8 = ((Float)0.0);
HXDLIN(1360)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)									letterSpacing8 = formatRange->format->letterSpacing;
            								}
HXDLIN(1360)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1360)								Float width17 = ((Float)0.0);
HXDLIN(1360)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1360)								_gthis->_hx___textLayout->letterSpacing = letterSpacing8;
HXDLIN(1360)								bool positions6;
HXDLIN(1360)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)									positions6 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1360)									positions6 = true;
            								}
HXDLIN(1360)								_gthis->_hx___textLayout->autoHint = positions6;
HXDLIN(1360)								 ::openfl::_internal::text::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1360)								_gthis9->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text8,textIndex,breakIndex));
HXDLIN(1360)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)								Float width18 = ((Float)0.0);
HXDLIN(1360)								{
HXLINE(1360)									int _g9 = (int)0;
HXDLIN(1360)									while((_g9 < positions->length)){
HXLINE(1360)										 ::openfl::_internal::text::GlyphPosition position9 = positions->__get(_g9).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)										_g9 = (_g9 + (int)1);
HXDLIN(1360)										width18 = (width18 + position9->advance->x);
            									}
            								}
HXDLIN(1360)								widthValue = width18;
HXDLIN(1360)								bool _hx_tmp13;
HXDLIN(1360)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1360)									_hx_tmp13 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1360)									_hx_tmp13 = true;
            								}
HXDLIN(1360)								if (_hx_tmp13) {
HXLINE(1360)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXDLIN(1360)									::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            								}
            								else {
HXLINE(1360)									layoutGroup->format = formatRange->format;
HXDLIN(1360)									layoutGroup->startIndex = textIndex;
HXDLIN(1360)									layoutGroup->endIndex = breakIndex;
            								}
HXDLIN(1360)								layoutGroup->positions = positions;
HXDLIN(1360)								layoutGroup->offsetX = offsetX;
HXDLIN(1360)								layoutGroup->ascent = ascent;
HXDLIN(1360)								layoutGroup->descent = descent;
HXDLIN(1360)								layoutGroup->leading = leading;
HXDLIN(1360)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1360)								layoutGroup->offsetY = offsetY;
HXDLIN(1360)								layoutGroup->width = widthValue;
HXDLIN(1360)								layoutGroup->height = heightValue;
HXDLIN(1360)								offsetX = (offsetX + widthValue);
HXDLIN(1360)								if ((breakIndex == formatRange->end)) {
HXLINE(1360)									layoutGroup = null();
HXDLIN(1360)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1360)									{
HXLINE(1360)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1360)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1360)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1360)											bool _hx_tmp14;
HXDLIN(1360)											if (hx::IsNotNull( font )) {
HXLINE(1360)												_hx_tmp14 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1360)												_hx_tmp14 = false;
            											}
HXDLIN(1360)											if (_hx_tmp14) {
HXLINE(1360)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1360)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1360)												ascent = currentFormat->size;
HXDLIN(1360)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1360)										leading = currentFormat->leading;
HXDLIN(1360)										heightValue = ((ascent + descent) + leading);
HXDLIN(1360)										if ((heightValue > maxHeightValue)) {
HXLINE(1360)											maxHeightValue = heightValue;
            										}
HXDLIN(1360)										if ((ascent > maxAscent)) {
HXLINE(1360)											maxAscent = ascent;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1360)								while(true){
HXLINE(1360)									int tempRangeEnd4;
HXDLIN(1360)									if ((breakIndex < formatRange->end)) {
HXLINE(1360)										tempRangeEnd4 = breakIndex;
            									}
            									else {
HXLINE(1360)										tempRangeEnd4 = formatRange->end;
            									}
HXDLIN(1360)									if ((textIndex != tempRangeEnd4)) {
HXLINE(1360)										::String text9 = _gthis->text;
HXDLIN(1360)										Float letterSpacing9 = ((Float)0.0);
HXDLIN(1360)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1360)											letterSpacing9 = formatRange->format->letterSpacing;
            										}
HXDLIN(1360)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1360)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1360)										Float width19 = ((Float)0.0);
HXDLIN(1360)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1360)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1360)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1360)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1360)										_gthis->_hx___textLayout->letterSpacing = letterSpacing9;
HXDLIN(1360)										bool positions7;
HXDLIN(1360)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1360)											positions7 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1360)											positions7 = true;
            										}
HXDLIN(1360)										_gthis->_hx___textLayout->autoHint = positions7;
HXDLIN(1360)										 ::openfl::_internal::text::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1360)										_gthis10->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text9,textIndex,tempRangeEnd4));
HXDLIN(1360)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1360)										Float width20 = ((Float)0.0);
HXDLIN(1360)										{
HXLINE(1360)											int _g10 = (int)0;
HXDLIN(1360)											while((_g10 < positions->length)){
HXLINE(1360)												 ::openfl::_internal::text::GlyphPosition position10 = positions->__get(_g10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1360)												_g10 = (_g10 + (int)1);
HXDLIN(1360)												width20 = (width20 + position10->advance->x);
            											}
            										}
HXDLIN(1360)										widthValue = width20;
HXDLIN(1360)										bool _hx_tmp15;
HXDLIN(1360)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1360)											_hx_tmp15 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1360)											_hx_tmp15 = true;
            										}
HXDLIN(1360)										if (_hx_tmp15) {
HXLINE(1360)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd4);
HXDLIN(1360)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1360)											layoutGroup->format = formatRange->format;
HXDLIN(1360)											layoutGroup->startIndex = textIndex;
HXDLIN(1360)											layoutGroup->endIndex = tempRangeEnd4;
            										}
HXDLIN(1360)										layoutGroup->positions = positions;
HXDLIN(1360)										layoutGroup->offsetX = offsetX;
HXDLIN(1360)										layoutGroup->ascent = ascent;
HXDLIN(1360)										layoutGroup->descent = descent;
HXDLIN(1360)										layoutGroup->leading = leading;
HXDLIN(1360)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1360)										layoutGroup->offsetY = offsetY;
HXDLIN(1360)										layoutGroup->width = widthValue;
HXDLIN(1360)										layoutGroup->height = heightValue;
HXDLIN(1360)										offsetX = (offsetX + widthValue);
HXDLIN(1360)										textIndex = tempRangeEnd4;
            									}
HXDLIN(1360)									if ((tempRangeEnd4 == formatRange->end)) {
HXLINE(1360)										layoutGroup = null();
            									}
HXDLIN(1360)									if ((tempRangeEnd4 == breakIndex)) {
HXLINE(1360)										goto _hx_goto_31;
            									}
HXDLIN(1360)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1360)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1360)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1360)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1360)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1360)									{
HXLINE(1360)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1360)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1360)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1360)											bool _hx_tmp16;
HXDLIN(1360)											if (hx::IsNotNull( font )) {
HXLINE(1360)												_hx_tmp16 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1360)												_hx_tmp16 = false;
            											}
HXDLIN(1360)											if (_hx_tmp16) {
HXLINE(1360)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1360)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1360)												ascent = currentFormat->size;
HXDLIN(1360)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1360)										leading = currentFormat->leading;
HXDLIN(1360)										heightValue = ((ascent + descent) + leading);
HXDLIN(1360)										if ((heightValue > maxHeightValue)) {
HXLINE(1360)											maxHeightValue = heightValue;
            										}
HXDLIN(1360)										if ((ascent > maxAscent)) {
HXLINE(1360)											maxAscent = ascent;
            										}
            									}
            								}
            								_hx_goto_31:;
            							}
HXDLIN(1360)							textIndex = breakIndex;
            						}
            					}
HXLINE(1362)					layoutGroup = null();
            				}
            				else {
HXLINE(1364)					bool _hx_tmp17;
HXDLIN(1364)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1364)						_hx_tmp17 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1364)						_hx_tmp17 = false;
            					}
HXDLIN(1364)					if (_hx_tmp17) {
HXLINE(1367)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1369)							 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1369)							int index = (layoutGroup->positions->length - (int)1);
HXDLIN(1369)							Float _hx_tmp18;
HXDLIN(1369)							bool _hx_tmp19;
HXDLIN(1369)							if ((index >= (int)0)) {
HXLINE(1369)								_hx_tmp19 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1369)								_hx_tmp19 = false;
            							}
HXDLIN(1369)							if (_hx_tmp19) {
HXLINE(1369)								_hx_tmp18 = layoutGroup->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1369)								_hx_tmp18 = (int)0;
            							}
HXDLIN(1369)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp18);
            						}
HXLINE(1373)						layoutGroup = null();
            					}
            				}
HXLINE(1377)				if ((formatRange->end == breakIndex)) {
HXLINE(1379)					if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1379)						rangeIndex = (rangeIndex + (int)1);
HXDLIN(1379)						formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1379)						currentFormat->_hx___merge(formatRange->format);
HXDLIN(1379)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            					}
HXLINE(1380)					{
HXLINE(1380)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1380)							ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1380)							descent = (currentFormat->size * currentFormat->_hx___descent);
            						}
            						else {
HXLINE(1380)							bool _hx_tmp20;
HXDLIN(1380)							if (hx::IsNotNull( font )) {
HXLINE(1380)								_hx_tmp20 = (font->unitsPerEM != (int)0);
            							}
            							else {
HXLINE(1380)								_hx_tmp20 = false;
            							}
HXDLIN(1380)							if (_hx_tmp20) {
HXLINE(1380)								ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1380)								descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            							}
            							else {
HXLINE(1380)								ascent = currentFormat->size;
HXDLIN(1380)								descent = (currentFormat->size * ((Float)0.185));
            							}
            						}
HXDLIN(1380)						leading = currentFormat->leading;
HXDLIN(1380)						heightValue = ((ascent + descent) + leading);
HXDLIN(1380)						if ((heightValue > maxHeightValue)) {
HXLINE(1380)							maxHeightValue = heightValue;
            						}
HXDLIN(1380)						if ((ascent > maxAscent)) {
HXLINE(1380)							maxAscent = ascent;
            						}
            					}
HXLINE(1381)					lineFormat = formatRange->format;
            				}
HXLINE(1385)				if ((breakIndex >= (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) - (int)1))) {
HXLINE(1388)					offsetY = (offsetY - maxHeightValue);
            				}
HXLINE(1392)				{
HXLINE(1392)					{
HXLINE(1392)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1392)							ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1392)							descent = (currentFormat->size * currentFormat->_hx___descent);
            						}
            						else {
HXLINE(1392)							bool _hx_tmp21;
HXDLIN(1392)							if (hx::IsNotNull( font )) {
HXLINE(1392)								_hx_tmp21 = (font->unitsPerEM != (int)0);
            							}
            							else {
HXLINE(1392)								_hx_tmp21 = false;
            							}
HXDLIN(1392)							if (_hx_tmp21) {
HXLINE(1392)								ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1392)								descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            							}
            							else {
HXLINE(1392)								ascent = currentFormat->size;
HXDLIN(1392)								descent = (currentFormat->size * ((Float)0.185));
            							}
            						}
HXDLIN(1392)						leading = currentFormat->leading;
HXDLIN(1392)						heightValue = ((ascent + descent) + leading);
HXDLIN(1392)						if ((heightValue > maxHeightValue)) {
HXLINE(1392)							maxHeightValue = heightValue;
            						}
HXDLIN(1392)						if ((ascent > maxAscent)) {
HXLINE(1392)							maxAscent = ascent;
            						}
            					}
HXDLIN(1392)					int i2 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1392)					while(true){
HXLINE(1392)						i2 = (i2 - (int)1);
HXDLIN(1392)						if (!((i2 > (int)-1))) {
HXLINE(1392)							goto _hx_goto_33;
            						}
HXDLIN(1392)						 ::openfl::_internal::text::TextLayoutGroup lg1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i2)) );
HXDLIN(1392)						if ((lg1->lineIndex < lineIndex)) {
HXLINE(1392)							goto _hx_goto_33;
            						}
HXDLIN(1392)						if ((lg1->lineIndex > lineIndex)) {
HXLINE(1392)							continue;
            						}
HXDLIN(1392)						lg1->ascent = maxAscent;
HXDLIN(1392)						lg1->height = maxHeightValue;
            					}
            					_hx_goto_33:;
HXDLIN(1392)					offsetY = (offsetY + maxHeightValue);
HXDLIN(1392)					maxAscent = ((Float)0.0);
HXDLIN(1392)					maxHeightValue = ((Float)0.0);
HXDLIN(1392)					lineIndex = (lineIndex + (int)1);
HXDLIN(1392)					offsetX = (int)2;
            				}
HXLINE(1394)				textIndex = (breakIndex + (int)1);
HXLINE(1395)				breakIndex = this->getLineBreakIndex(textIndex);
            			}
            			else {
HXLINE(1397)				if ((spaceIndex > (int)-1)) {
HXLINE(1400)					bool _hx_tmp22;
HXDLIN(1400)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1400)						_hx_tmp22 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1400)						_hx_tmp22 = false;
            					}
HXDLIN(1400)					if (_hx_tmp22) {
HXLINE(1402)						layoutGroup = null();
            					}
HXLINE(1406)					wrap = false;
HXLINE(1408)					while((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))){
HXLINE(1412)						int endIndex1 = (int)-1;
HXLINE(1414)						if ((spaceIndex == (int)-1)) {
HXLINE(1416)							endIndex1 = breakIndex;
            						}
            						else {
HXLINE(1422)							endIndex1 = (spaceIndex + (int)1);
HXLINE(1424)							bool _hx_tmp23;
HXDLIN(1424)							if ((breakIndex > (int)-1)) {
HXLINE(1424)								_hx_tmp23 = (breakIndex < endIndex1);
            							}
            							else {
HXLINE(1424)								_hx_tmp23 = false;
            							}
HXDLIN(1424)							if (_hx_tmp23) {
HXLINE(1426)								endIndex1 = breakIndex;
            							}
            						}
HXLINE(1432)						if ((endIndex1 == (int)-1)) {
HXLINE(1434)							endIndex1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
            						}
HXLINE(1438)						if ((endIndex1 <= formatRange->end)) {
HXLINE(1438)							::String text10 = _gthis->text;
HXDLIN(1438)							Float letterSpacing10 = ((Float)0.0);
HXDLIN(1438)							if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1438)								letterSpacing10 = formatRange->format->letterSpacing;
            							}
HXDLIN(1438)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1438)								_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1438)							Float width21 = ((Float)0.0);
HXDLIN(1438)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1438)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1438)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1438)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1438)							_gthis->_hx___textLayout->letterSpacing = letterSpacing10;
HXDLIN(1438)							bool positions8;
HXDLIN(1438)							if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1438)								positions8 = (_gthis->sharpness < (int)400);
            							}
            							else {
HXLINE(1438)								positions8 = true;
            							}
HXDLIN(1438)							_gthis->_hx___textLayout->autoHint = positions8;
HXDLIN(1438)							 ::openfl::_internal::text::TextLayout _gthis11 = _gthis->_hx___textLayout;
HXDLIN(1438)							_gthis11->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text10,textIndex,endIndex1));
HXDLIN(1438)							positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1438)							Float width22 = ((Float)0.0);
HXDLIN(1438)							{
HXLINE(1438)								int _g11 = (int)0;
HXDLIN(1438)								while((_g11 < positions->length)){
HXLINE(1438)									 ::openfl::_internal::text::GlyphPosition position11 = positions->__get(_g11).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1438)									_g11 = (_g11 + (int)1);
HXDLIN(1438)									width22 = (width22 + position11->advance->x);
            								}
            							}
HXDLIN(1438)							widthValue = width22;
            						}
            						else {
HXLINE(1438)							int tempIndex3 = textIndex;
HXDLIN(1438)							int tempRangeEnd5 = formatRange->end;
HXDLIN(1438)							int countRanges3 = (int)0;
HXDLIN(1438)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1438)							widthValue = (int)0;
HXDLIN(1438)							while(true){
HXLINE(1438)								if ((tempIndex3 != tempRangeEnd5)) {
HXLINE(1438)									::String text11 = _gthis->text;
HXDLIN(1438)									Float letterSpacing11 = ((Float)0.0);
HXDLIN(1438)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1438)										letterSpacing11 = formatRange->format->letterSpacing;
            									}
HXDLIN(1438)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1438)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1438)									Float width23 = ((Float)0.0);
HXDLIN(1438)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1438)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1438)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1438)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1438)									_gthis->_hx___textLayout->letterSpacing = letterSpacing11;
HXDLIN(1438)									bool _hx_tmp24;
HXDLIN(1438)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1438)										_hx_tmp24 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1438)										_hx_tmp24 = true;
            									}
HXDLIN(1438)									_gthis->_hx___textLayout->autoHint = _hx_tmp24;
HXDLIN(1438)									 ::openfl::_internal::text::TextLayout _gthis12 = _gthis->_hx___textLayout;
HXDLIN(1438)									_gthis12->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text11,tempIndex3,tempRangeEnd5));
HXDLIN(1438)									::Array< ::Dynamic> tempPositions4 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1438)									positions = positions->concat(tempPositions4);
HXDLIN(1438)									Float width24 = ((Float)0.0);
HXDLIN(1438)									{
HXLINE(1438)										int _g12 = (int)0;
HXDLIN(1438)										while((_g12 < positions->length)){
HXLINE(1438)											 ::openfl::_internal::text::GlyphPosition position12 = positions->__get(_g12).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1438)											_g12 = (_g12 + (int)1);
HXDLIN(1438)											width24 = (width24 + position12->advance->x);
            										}
            									}
HXDLIN(1438)									widthValue = (widthValue + width24);
            								}
HXDLIN(1438)								if ((tempRangeEnd5 != endIndex1)) {
HXLINE(1438)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1438)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1438)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1438)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1438)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1438)									tempIndex3 = tempRangeEnd5;
HXDLIN(1438)									if ((endIndex1 < formatRange->end)) {
HXLINE(1438)										tempRangeEnd5 = endIndex1;
            									}
            									else {
HXLINE(1438)										tempRangeEnd5 = formatRange->end;
            									}
HXDLIN(1438)									countRanges3 = (countRanges3 + (int)1);
            								}
            								else {
HXLINE(1438)									goto _hx_goto_36;
            								}
            							}
            							_hx_goto_36:;
HXDLIN(1438)							rangeIndex = (rangeIndex - (countRanges3 + (int)1));
HXDLIN(1438)							if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1438)								rangeIndex = (rangeIndex + (int)1);
HXDLIN(1438)								formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1438)								currentFormat->_hx___merge(formatRange->format);
HXDLIN(1438)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            							}
            						}
HXLINE(1440)						if (hx::IsEq( lineFormat->align,(int)2 )) {
HXLINE(1442)							bool _hx_tmp25;
HXDLIN(1442)							if ((positions->length > (int)0)) {
HXLINE(1442)								_hx_tmp25 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1442)								_hx_tmp25 = false;
            							}
HXDLIN(1442)							if (_hx_tmp25) {
HXLINE(1445)								textIndex = (textIndex + (int)1);
HXLINE(1447)								Float spaceWidth = positions->shift().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1448)								widthValue = (widthValue - spaceWidth);
HXLINE(1449)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1453)							bool _hx_tmp26;
HXDLIN(1453)							if ((positions->length > (int)0)) {
HXLINE(1453)								_hx_tmp26 = (endIndex1 == (spaceIndex + (int)1));
            							}
            							else {
HXLINE(1453)								_hx_tmp26 = false;
            							}
HXDLIN(1453)							if (_hx_tmp26) {
HXLINE(1456)								endIndex1 = (endIndex1 - (int)1);
HXLINE(1458)								Float spaceWidth1 = positions->pop().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1459)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1465)						if (this->wordWrap) {
HXLINE(1467)							if (((offsetX + widthValue) > (this->width - (int)2))) {
HXLINE(1469)								wrap = true;
HXLINE(1471)								bool _hx_tmp27;
HXDLIN(1471)								if ((positions->length > (int)0)) {
HXLINE(1471)									_hx_tmp27 = (endIndex1 == (spaceIndex + (int)1));
            								}
            								else {
HXLINE(1471)									_hx_tmp27 = false;
            								}
HXDLIN(1471)								if (_hx_tmp27) {
HXLINE(1476)									 ::openfl::_internal::text::GlyphPosition lastPosition = positions->__get((positions->length - (int)1)).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1477)									Float spaceWidth2 = lastPosition->advance->x;
HXLINE(1479)									if ((((offsetX + widthValue) - spaceWidth2) <= (this->width - (int)2))) {
HXLINE(1481)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1491)						if (wrap) {
HXLINE(1493)							bool _hx_tmp28;
HXDLIN(1493)							if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1493)								if (hx::IsNull( layoutGroup )) {
HXLINE(1493)									_hx_tmp28 = (this->layoutGroups->get_length() > (int)0);
            								}
            								else {
HXLINE(1493)									_hx_tmp28 = true;
            								}
            							}
            							else {
HXLINE(1493)								_hx_tmp28 = false;
            							}
HXDLIN(1493)							if (_hx_tmp28) {
HXLINE(1495)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1496)								if (hx::IsNull( previous )) {
HXLINE(1497)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1497)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1501)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1501)								int index1 = (previous->positions->length - (int)1);
HXDLIN(1501)								Float _hx_tmp29;
HXDLIN(1501)								bool _hx_tmp30;
HXDLIN(1501)								if ((index1 >= (int)0)) {
HXLINE(1501)									_hx_tmp30 = (index1 < previous->positions->length);
            								}
            								else {
HXLINE(1501)									_hx_tmp30 = false;
            								}
HXDLIN(1501)								if (_hx_tmp30) {
HXLINE(1501)									_hx_tmp29 = previous->positions->__get(index1).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1501)									_hx_tmp29 = (int)0;
            								}
HXDLIN(1501)								previous1->width = (previous1->width - _hx_tmp29);
HXLINE(1502)								previous->endIndex--;
            							}
HXLINE(1506)							int i3 = (this->layoutGroups->get_length() - (int)1);
HXLINE(1507)							int offsetCount = (int)0;
HXLINE(1509)							while(true){
HXLINE(1511)								layoutGroup = this->layoutGroups->get(i3).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1513)								bool _hx_tmp31;
HXDLIN(1513)								if ((i3 > (int)0)) {
HXLINE(1513)									_hx_tmp31 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1513)									_hx_tmp31 = false;
            								}
HXDLIN(1513)								if (_hx_tmp31) {
HXLINE(1515)									offsetCount = (offsetCount + (int)1);
            								}
            								else {
HXLINE(1519)									goto _hx_goto_38;
            								}
HXLINE(1523)								i3 = (i3 - (int)1);
            							}
            							_hx_goto_38:;
HXLINE(1527)							if ((textIndex == (previousSpaceIndex + (int)1))) {
HXLINE(1529)								{
HXLINE(1529)									if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1529)										ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1529)										descent = (currentFormat->size * currentFormat->_hx___descent);
            									}
            									else {
HXLINE(1529)										bool _hx_tmp32;
HXDLIN(1529)										if (hx::IsNotNull( font )) {
HXLINE(1529)											_hx_tmp32 = (font->unitsPerEM != (int)0);
            										}
            										else {
HXLINE(1529)											_hx_tmp32 = false;
            										}
HXDLIN(1529)										if (_hx_tmp32) {
HXLINE(1529)											ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1529)											descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            										}
            										else {
HXLINE(1529)											ascent = currentFormat->size;
HXDLIN(1529)											descent = (currentFormat->size * ((Float)0.185));
            										}
            									}
HXDLIN(1529)									leading = currentFormat->leading;
HXDLIN(1529)									heightValue = ((ascent + descent) + leading);
HXDLIN(1529)									if ((heightValue > maxHeightValue)) {
HXLINE(1529)										maxHeightValue = heightValue;
            									}
HXDLIN(1529)									if ((ascent > maxAscent)) {
HXLINE(1529)										maxAscent = ascent;
            									}
            								}
HXDLIN(1529)								int i4 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1529)								while(true){
HXLINE(1529)									i4 = (i4 - (int)1);
HXDLIN(1529)									if (!((i4 > (int)-1))) {
HXLINE(1529)										goto _hx_goto_39;
            									}
HXDLIN(1529)									 ::openfl::_internal::text::TextLayoutGroup lg2 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i4)) );
HXDLIN(1529)									if ((lg2->lineIndex < lineIndex)) {
HXLINE(1529)										goto _hx_goto_39;
            									}
HXDLIN(1529)									if ((lg2->lineIndex > lineIndex)) {
HXLINE(1529)										continue;
            									}
HXDLIN(1529)									lg2->ascent = maxAscent;
HXDLIN(1529)									lg2->height = maxHeightValue;
            								}
            								_hx_goto_39:;
HXDLIN(1529)								offsetY = (offsetY + maxHeightValue);
HXDLIN(1529)								maxAscent = ((Float)0.0);
HXDLIN(1529)								maxHeightValue = ((Float)0.0);
HXDLIN(1529)								lineIndex = (lineIndex + (int)1);
HXDLIN(1529)								offsetX = (int)2;
            							}
HXLINE(1533)							offsetX = (int)2;
HXLINE(1535)							if ((offsetCount > (int)0)) {
HXLINE(1537)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1537)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1539)								{
HXLINE(1539)									int _g13 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1539)									int _g14 = this->layoutGroups->get_length();
HXDLIN(1539)									while((_g13 < _g14)){
HXLINE(1539)										_g13 = (_g13 + (int)1);
HXDLIN(1539)										int i5 = (_g13 - (int)1);
HXLINE(1541)										layoutGroup = this->layoutGroups->get(i5).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1542)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN(1542)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE(1543)										layoutGroup->offsetY = offsetY;
HXLINE(1544)										layoutGroup->lineIndex = lineIndex;
HXLINE(1545)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1551)							{
HXLINE(1551)								bool _hx_tmp33;
HXDLIN(1551)								if ((_gthis->width >= (int)4)) {
HXLINE(1551)									_hx_tmp33 = _gthis->wordWrap;
            								}
            								else {
HXLINE(1551)									_hx_tmp33 = false;
            								}
HXDLIN(1551)								if (_hx_tmp33) {
HXLINE(1551)									::Array< ::Dynamic> remainingPositions1 = positions;
HXDLIN(1551)									int i6;
HXDLIN(1551)									int j1;
HXDLIN(1551)									int placeIndex1;
HXDLIN(1551)									Float positionWidth1;
HXDLIN(1551)									 ::openfl::_internal::text::GlyphPosition currentPosition1;
HXDLIN(1551)									 ::Dynamic tempPositions5;
HXDLIN(1551)									Float width25 = ((Float)0.0);
HXDLIN(1551)									{
HXLINE(1551)										int _g15 = (int)0;
HXDLIN(1551)										while((_g15 < remainingPositions1->length)){
HXLINE(1551)											 ::openfl::_internal::text::GlyphPosition position13 = remainingPositions1->__get(_g15).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)											_g15 = (_g15 + (int)1);
HXDLIN(1551)											width25 = (width25 + position13->advance->x);
            										}
            									}
HXDLIN(1551)									Float tempWidth1 = width25;
HXDLIN(1551)									while(((offsetX + tempWidth1) > (_gthis->width - (int)2))){
HXLINE(1551)										j1 = (int)0;
HXDLIN(1551)										i6 = j1;
HXDLIN(1551)										positionWidth1 = ((Float)0.0);
HXDLIN(1551)										while(((offsetX + positionWidth1) < (_gthis->width - (int)2))){
HXLINE(1551)											currentPosition1 = remainingPositions1->__get(i6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)											if ((currentPosition1->advance->x == ((Float)0.0))) {
HXLINE(1551)												i6 = (i6 + (int)1);
HXDLIN(1551)												j1 = (j1 + (int)1);
            											}
            											else {
HXLINE(1551)												positionWidth1 = (positionWidth1 + currentPosition1->advance->x);
HXDLIN(1551)												i6 = (i6 + (int)1);
            											}
            										}
HXDLIN(1551)										bool _hx_tmp34;
HXDLIN(1551)										if ((i6 < (int)2)) {
HXLINE(1551)											_hx_tmp34 = (positionWidth1 > (_gthis->width - (int)4));
            										}
            										else {
HXLINE(1551)											_hx_tmp34 = false;
            										}
HXDLIN(1551)										if (_hx_tmp34) {
HXLINE(1551)											if ((((textIndex + i6) - j1) == endIndex1)) {
HXLINE(1551)												goto _hx_goto_42;
            											}
            										}
            										else {
HXLINE(1551)											while(((offsetX + positionWidth1) > (_gthis->width - (int)2))){
HXLINE(1551)												i6 = (i6 - (int)1);
HXDLIN(1551)												if (((i6 - j1) > (int)0)) {
HXLINE(1551)													{
HXLINE(1551)														int endIndex2 = ((textIndex + i6) - j1);
HXDLIN(1551)														if ((endIndex2 <= formatRange->end)) {
HXLINE(1551)															::String text12 = _gthis->text;
HXDLIN(1551)															Float letterSpacing12 = ((Float)0.0);
HXDLIN(1551)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)																letterSpacing12 = formatRange->format->letterSpacing;
            															}
HXDLIN(1551)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1551)															Float width26 = ((Float)0.0);
HXDLIN(1551)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1551)															_gthis->_hx___textLayout->letterSpacing = letterSpacing12;
HXDLIN(1551)															bool positions9;
HXDLIN(1551)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)																positions9 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1551)																positions9 = true;
            															}
HXDLIN(1551)															_gthis->_hx___textLayout->autoHint = positions9;
HXDLIN(1551)															 ::openfl::_internal::text::TextLayout _gthis13 = _gthis->_hx___textLayout;
HXDLIN(1551)															_gthis13->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text12,textIndex,endIndex2));
HXDLIN(1551)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)															Float width27 = ((Float)0.0);
HXDLIN(1551)															{
HXLINE(1551)																int _g16 = (int)0;
HXDLIN(1551)																while((_g16 < positions->length)){
HXLINE(1551)																	 ::openfl::_internal::text::GlyphPosition position14 = positions->__get(_g16).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)																	_g16 = (_g16 + (int)1);
HXDLIN(1551)																	width27 = (width27 + position14->advance->x);
            																}
            															}
HXDLIN(1551)															widthValue = width27;
            														}
            														else {
HXLINE(1551)															int tempIndex4 = textIndex;
HXDLIN(1551)															int tempRangeEnd6 = formatRange->end;
HXDLIN(1551)															int countRanges4 = (int)0;
HXDLIN(1551)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1551)															widthValue = (int)0;
HXDLIN(1551)															while(true){
HXLINE(1551)																if ((tempIndex4 != tempRangeEnd6)) {
HXLINE(1551)																	::String text13 = _gthis->text;
HXDLIN(1551)																	Float letterSpacing13 = ((Float)0.0);
HXDLIN(1551)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)																		letterSpacing13 = formatRange->format->letterSpacing;
            																	}
HXDLIN(1551)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1551)																	Float width28 = ((Float)0.0);
HXDLIN(1551)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)																		_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																	}
HXDLIN(1551)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing13;
HXDLIN(1551)																	bool _hx_tmp35;
HXDLIN(1551)																	if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)																		_hx_tmp35 = (_gthis->sharpness < (int)400);
            																	}
            																	else {
HXLINE(1551)																		_hx_tmp35 = true;
            																	}
HXDLIN(1551)																	_gthis->_hx___textLayout->autoHint = _hx_tmp35;
HXDLIN(1551)																	 ::openfl::_internal::text::TextLayout _gthis14 = _gthis->_hx___textLayout;
HXDLIN(1551)																	_gthis14->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text13,tempIndex4,tempRangeEnd6));
HXDLIN(1551)																	::Array< ::Dynamic> tempPositions6 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)																	positions = positions->concat(tempPositions6);
HXDLIN(1551)																	Float width29 = ((Float)0.0);
HXDLIN(1551)																	{
HXLINE(1551)																		int _g17 = (int)0;
HXDLIN(1551)																		while((_g17 < positions->length)){
HXLINE(1551)																			 ::openfl::_internal::text::GlyphPosition position15 = positions->__get(_g17).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)																			_g17 = (_g17 + (int)1);
HXDLIN(1551)																			width29 = (width29 + position15->advance->x);
            																		}
            																	}
HXDLIN(1551)																	widthValue = (widthValue + width29);
            																}
HXDLIN(1551)																if ((tempRangeEnd6 != endIndex2)) {
HXLINE(1551)																	if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)																		rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)																		formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																	}
HXDLIN(1551)																	tempIndex4 = tempRangeEnd6;
HXDLIN(1551)																	if ((endIndex2 < formatRange->end)) {
HXLINE(1551)																		tempRangeEnd6 = endIndex2;
            																	}
            																	else {
HXLINE(1551)																		tempRangeEnd6 = formatRange->end;
            																	}
HXDLIN(1551)																	countRanges4 = (countRanges4 + (int)1);
            																}
            																else {
HXLINE(1551)																	goto _hx_goto_46;
            																}
            															}
            															_hx_goto_46:;
HXDLIN(1551)															rangeIndex = (rangeIndex - (countRanges4 + (int)1));
HXDLIN(1551)															if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)																rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)																formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXDLIN(1551)													positionWidth1 = widthValue;
            												}
            												else {
HXLINE(1551)													i6 = (int)1;
HXDLIN(1551)													j1 = (int)0;
            												}
            											}
            										}
HXDLIN(1551)										placeIndex1 = ((textIndex + i6) - j1);
HXDLIN(1551)										{
HXLINE(1551)											if ((placeIndex1 <= formatRange->end)) {
HXLINE(1551)												::String text14 = _gthis->text;
HXDLIN(1551)												Float letterSpacing14 = ((Float)0.0);
HXDLIN(1551)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)													letterSpacing14 = formatRange->format->letterSpacing;
            												}
HXDLIN(1551)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1551)												Float width30 = ((Float)0.0);
HXDLIN(1551)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1551)												_gthis->_hx___textLayout->letterSpacing = letterSpacing14;
HXDLIN(1551)												bool positions10;
HXDLIN(1551)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)													positions10 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1551)													positions10 = true;
            												}
HXDLIN(1551)												_gthis->_hx___textLayout->autoHint = positions10;
HXDLIN(1551)												 ::openfl::_internal::text::TextLayout _gthis15 = _gthis->_hx___textLayout;
HXDLIN(1551)												_gthis15->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text14,textIndex,placeIndex1));
HXDLIN(1551)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)												Float width31 = ((Float)0.0);
HXDLIN(1551)												{
HXLINE(1551)													int _g18 = (int)0;
HXDLIN(1551)													while((_g18 < positions->length)){
HXLINE(1551)														 ::openfl::_internal::text::GlyphPosition position16 = positions->__get(_g18).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)														_g18 = (_g18 + (int)1);
HXDLIN(1551)														width31 = (width31 + position16->advance->x);
            													}
            												}
HXDLIN(1551)												widthValue = width31;
HXDLIN(1551)												bool _hx_tmp36;
HXDLIN(1551)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1551)													_hx_tmp36 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1551)													_hx_tmp36 = true;
            												}
HXDLIN(1551)												if (_hx_tmp36) {
HXLINE(1551)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex1);
HXDLIN(1551)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1551)													layoutGroup->format = formatRange->format;
HXDLIN(1551)													layoutGroup->startIndex = textIndex;
HXDLIN(1551)													layoutGroup->endIndex = placeIndex1;
            												}
HXDLIN(1551)												layoutGroup->positions = positions;
HXDLIN(1551)												layoutGroup->offsetX = offsetX;
HXDLIN(1551)												layoutGroup->ascent = ascent;
HXDLIN(1551)												layoutGroup->descent = descent;
HXDLIN(1551)												layoutGroup->leading = leading;
HXDLIN(1551)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1551)												layoutGroup->offsetY = offsetY;
HXDLIN(1551)												layoutGroup->width = widthValue;
HXDLIN(1551)												layoutGroup->height = heightValue;
HXDLIN(1551)												offsetX = (offsetX + widthValue);
HXDLIN(1551)												if ((placeIndex1 == formatRange->end)) {
HXLINE(1551)													layoutGroup = null();
HXDLIN(1551)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1551)													{
HXLINE(1551)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1551)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1551)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1551)															bool _hx_tmp37;
HXDLIN(1551)															if (hx::IsNotNull( font )) {
HXLINE(1551)																_hx_tmp37 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1551)																_hx_tmp37 = false;
            															}
HXDLIN(1551)															if (_hx_tmp37) {
HXLINE(1551)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1551)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1551)																ascent = currentFormat->size;
HXDLIN(1551)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1551)														leading = currentFormat->leading;
HXDLIN(1551)														heightValue = ((ascent + descent) + leading);
HXDLIN(1551)														if ((heightValue > maxHeightValue)) {
HXLINE(1551)															maxHeightValue = heightValue;
            														}
HXDLIN(1551)														if ((ascent > maxAscent)) {
HXLINE(1551)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1551)												while(true){
HXLINE(1551)													int tempRangeEnd7;
HXDLIN(1551)													if ((placeIndex1 < formatRange->end)) {
HXLINE(1551)														tempRangeEnd7 = placeIndex1;
            													}
            													else {
HXLINE(1551)														tempRangeEnd7 = formatRange->end;
            													}
HXDLIN(1551)													if ((textIndex != tempRangeEnd7)) {
HXLINE(1551)														::String text15 = _gthis->text;
HXDLIN(1551)														Float letterSpacing15 = ((Float)0.0);
HXDLIN(1551)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)															letterSpacing15 = formatRange->format->letterSpacing;
            														}
HXDLIN(1551)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1551)														Float width32 = ((Float)0.0);
HXDLIN(1551)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1551)														_gthis->_hx___textLayout->letterSpacing = letterSpacing15;
HXDLIN(1551)														bool positions11;
HXDLIN(1551)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)															positions11 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1551)															positions11 = true;
            														}
HXDLIN(1551)														_gthis->_hx___textLayout->autoHint = positions11;
HXDLIN(1551)														 ::openfl::_internal::text::TextLayout _gthis16 = _gthis->_hx___textLayout;
HXDLIN(1551)														_gthis16->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text15,textIndex,tempRangeEnd7));
HXDLIN(1551)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)														Float width33 = ((Float)0.0);
HXDLIN(1551)														{
HXLINE(1551)															int _g19 = (int)0;
HXDLIN(1551)															while((_g19 < positions->length)){
HXLINE(1551)																 ::openfl::_internal::text::GlyphPosition position17 = positions->__get(_g19).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)																_g19 = (_g19 + (int)1);
HXDLIN(1551)																width33 = (width33 + position17->advance->x);
            															}
            														}
HXDLIN(1551)														widthValue = width33;
HXDLIN(1551)														bool _hx_tmp38;
HXDLIN(1551)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1551)															_hx_tmp38 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1551)															_hx_tmp38 = true;
            														}
HXDLIN(1551)														if (_hx_tmp38) {
HXLINE(1551)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd7);
HXDLIN(1551)															::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            														}
            														else {
HXLINE(1551)															layoutGroup->format = formatRange->format;
HXDLIN(1551)															layoutGroup->startIndex = textIndex;
HXDLIN(1551)															layoutGroup->endIndex = tempRangeEnd7;
            														}
HXDLIN(1551)														layoutGroup->positions = positions;
HXDLIN(1551)														layoutGroup->offsetX = offsetX;
HXDLIN(1551)														layoutGroup->ascent = ascent;
HXDLIN(1551)														layoutGroup->descent = descent;
HXDLIN(1551)														layoutGroup->leading = leading;
HXDLIN(1551)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1551)														layoutGroup->offsetY = offsetY;
HXDLIN(1551)														layoutGroup->width = widthValue;
HXDLIN(1551)														layoutGroup->height = heightValue;
HXDLIN(1551)														offsetX = (offsetX + widthValue);
HXDLIN(1551)														textIndex = tempRangeEnd7;
            													}
HXDLIN(1551)													if ((tempRangeEnd7 == formatRange->end)) {
HXLINE(1551)														layoutGroup = null();
            													}
HXDLIN(1551)													if ((tempRangeEnd7 == placeIndex1)) {
HXLINE(1551)														goto _hx_goto_49;
            													}
HXDLIN(1551)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1551)													{
HXLINE(1551)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1551)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1551)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1551)															bool _hx_tmp39;
HXDLIN(1551)															if (hx::IsNotNull( font )) {
HXLINE(1551)																_hx_tmp39 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1551)																_hx_tmp39 = false;
            															}
HXDLIN(1551)															if (_hx_tmp39) {
HXLINE(1551)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1551)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1551)																ascent = currentFormat->size;
HXDLIN(1551)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1551)														leading = currentFormat->leading;
HXDLIN(1551)														heightValue = ((ascent + descent) + leading);
HXDLIN(1551)														if ((heightValue > maxHeightValue)) {
HXLINE(1551)															maxHeightValue = heightValue;
            														}
HXDLIN(1551)														if ((ascent > maxAscent)) {
HXLINE(1551)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_49:;
            											}
HXDLIN(1551)											textIndex = placeIndex1;
            										}
HXDLIN(1551)										{
HXLINE(1551)											{
HXLINE(1551)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1551)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1551)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1551)													bool _hx_tmp40;
HXDLIN(1551)													if (hx::IsNotNull( font )) {
HXLINE(1551)														_hx_tmp40 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1551)														_hx_tmp40 = false;
            													}
HXDLIN(1551)													if (_hx_tmp40) {
HXLINE(1551)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1551)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1551)														ascent = currentFormat->size;
HXDLIN(1551)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1551)												leading = currentFormat->leading;
HXDLIN(1551)												heightValue = ((ascent + descent) + leading);
HXDLIN(1551)												if ((heightValue > maxHeightValue)) {
HXLINE(1551)													maxHeightValue = heightValue;
            												}
HXDLIN(1551)												if ((ascent > maxAscent)) {
HXLINE(1551)													maxAscent = ascent;
            												}
            											}
HXDLIN(1551)											int i7 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1551)											while(true){
HXLINE(1551)												i7 = (i7 - (int)1);
HXDLIN(1551)												if (!((i7 > (int)-1))) {
HXLINE(1551)													goto _hx_goto_51;
            												}
HXDLIN(1551)												 ::openfl::_internal::text::TextLayoutGroup lg3 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i7)) );
HXDLIN(1551)												if ((lg3->lineIndex < lineIndex)) {
HXLINE(1551)													goto _hx_goto_51;
            												}
HXDLIN(1551)												if ((lg3->lineIndex > lineIndex)) {
HXLINE(1551)													continue;
            												}
HXDLIN(1551)												lg3->ascent = maxAscent;
HXDLIN(1551)												lg3->height = maxHeightValue;
            											}
            											_hx_goto_51:;
HXDLIN(1551)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1551)											maxAscent = ((Float)0.0);
HXDLIN(1551)											maxHeightValue = ((Float)0.0);
HXDLIN(1551)											lineIndex = (lineIndex + (int)1);
HXDLIN(1551)											offsetX = (int)2;
            										}
HXDLIN(1551)										if ((endIndex1 <= formatRange->end)) {
HXLINE(1551)											::String text16 = _gthis->text;
HXDLIN(1551)											Float letterSpacing16 = ((Float)0.0);
HXDLIN(1551)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)												letterSpacing16 = formatRange->format->letterSpacing;
            											}
HXDLIN(1551)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1551)											Float width34 = ((Float)0.0);
HXDLIN(1551)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1551)											_gthis->_hx___textLayout->letterSpacing = letterSpacing16;
HXDLIN(1551)											bool positions12;
HXDLIN(1551)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)												positions12 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1551)												positions12 = true;
            											}
HXDLIN(1551)											_gthis->_hx___textLayout->autoHint = positions12;
HXDLIN(1551)											 ::openfl::_internal::text::TextLayout _gthis17 = _gthis->_hx___textLayout;
HXDLIN(1551)											_gthis17->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text16,placeIndex1,endIndex1));
HXDLIN(1551)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)											Float width35 = ((Float)0.0);
HXDLIN(1551)											{
HXLINE(1551)												int _g20 = (int)0;
HXDLIN(1551)												while((_g20 < positions->length)){
HXLINE(1551)													 ::openfl::_internal::text::GlyphPosition position18 = positions->__get(_g20).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)													_g20 = (_g20 + (int)1);
HXDLIN(1551)													width35 = (width35 + position18->advance->x);
            												}
            											}
HXDLIN(1551)											widthValue = width35;
            										}
            										else {
HXLINE(1551)											int tempIndex5 = placeIndex1;
HXDLIN(1551)											int tempRangeEnd8 = formatRange->end;
HXDLIN(1551)											int countRanges5 = (int)0;
HXDLIN(1551)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1551)											widthValue = (int)0;
HXDLIN(1551)											while(true){
HXLINE(1551)												if ((tempIndex5 != tempRangeEnd8)) {
HXLINE(1551)													::String text17 = _gthis->text;
HXDLIN(1551)													Float letterSpacing17 = ((Float)0.0);
HXDLIN(1551)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)														letterSpacing17 = formatRange->format->letterSpacing;
            													}
HXDLIN(1551)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1551)													Float width36 = ((Float)0.0);
HXDLIN(1551)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1551)													_gthis->_hx___textLayout->letterSpacing = letterSpacing17;
HXDLIN(1551)													bool _hx_tmp41;
HXDLIN(1551)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)														_hx_tmp41 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1551)														_hx_tmp41 = true;
            													}
HXDLIN(1551)													_gthis->_hx___textLayout->autoHint = _hx_tmp41;
HXDLIN(1551)													 ::openfl::_internal::text::TextLayout _gthis18 = _gthis->_hx___textLayout;
HXDLIN(1551)													_gthis18->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text17,tempIndex5,tempRangeEnd8));
HXDLIN(1551)													::Array< ::Dynamic> tempPositions7 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)													positions = positions->concat(tempPositions7);
HXDLIN(1551)													Float width37 = ((Float)0.0);
HXDLIN(1551)													{
HXLINE(1551)														int _g21 = (int)0;
HXDLIN(1551)														while((_g21 < positions->length)){
HXLINE(1551)															 ::openfl::_internal::text::GlyphPosition position19 = positions->__get(_g21).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)															_g21 = (_g21 + (int)1);
HXDLIN(1551)															width37 = (width37 + position19->advance->x);
            														}
            													}
HXDLIN(1551)													widthValue = (widthValue + width37);
            												}
HXDLIN(1551)												if ((tempRangeEnd8 != endIndex1)) {
HXLINE(1551)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1551)													tempIndex5 = tempRangeEnd8;
HXDLIN(1551)													if ((endIndex1 < formatRange->end)) {
HXLINE(1551)														tempRangeEnd8 = endIndex1;
            													}
            													else {
HXLINE(1551)														tempRangeEnd8 = formatRange->end;
            													}
HXDLIN(1551)													countRanges5 = (countRanges5 + (int)1);
            												}
            												else {
HXLINE(1551)													goto _hx_goto_53;
            												}
            											}
            											_hx_goto_53:;
HXDLIN(1551)											rangeIndex = (rangeIndex - (countRanges5 + (int)1));
HXDLIN(1551)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
            										}
HXDLIN(1551)										remainingPositions1 = positions;
HXDLIN(1551)										tempWidth1 = widthValue;
            									}
            									_hx_goto_42:;
            								}
HXDLIN(1551)								{
HXLINE(1551)									if ((endIndex1 <= formatRange->end)) {
HXLINE(1551)										::String text18 = _gthis->text;
HXDLIN(1551)										Float letterSpacing18 = ((Float)0.0);
HXDLIN(1551)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)											letterSpacing18 = formatRange->format->letterSpacing;
            										}
HXDLIN(1551)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1551)										Float width38 = ((Float)0.0);
HXDLIN(1551)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1551)										_gthis->_hx___textLayout->letterSpacing = letterSpacing18;
HXDLIN(1551)										bool positions13;
HXDLIN(1551)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)											positions13 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1551)											positions13 = true;
            										}
HXDLIN(1551)										_gthis->_hx___textLayout->autoHint = positions13;
HXDLIN(1551)										 ::openfl::_internal::text::TextLayout _gthis19 = _gthis->_hx___textLayout;
HXDLIN(1551)										_gthis19->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text18,textIndex,endIndex1));
HXDLIN(1551)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)										Float width39 = ((Float)0.0);
HXDLIN(1551)										{
HXLINE(1551)											int _g22 = (int)0;
HXDLIN(1551)											while((_g22 < positions->length)){
HXLINE(1551)												 ::openfl::_internal::text::GlyphPosition position20 = positions->__get(_g22).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)												_g22 = (_g22 + (int)1);
HXDLIN(1551)												width39 = (width39 + position20->advance->x);
            											}
            										}
HXDLIN(1551)										widthValue = width39;
HXDLIN(1551)										bool _hx_tmp42;
HXDLIN(1551)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1551)											_hx_tmp42 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1551)											_hx_tmp42 = true;
            										}
HXDLIN(1551)										if (_hx_tmp42) {
HXLINE(1551)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1551)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1551)											layoutGroup->format = formatRange->format;
HXDLIN(1551)											layoutGroup->startIndex = textIndex;
HXDLIN(1551)											layoutGroup->endIndex = endIndex1;
            										}
HXDLIN(1551)										layoutGroup->positions = positions;
HXDLIN(1551)										layoutGroup->offsetX = offsetX;
HXDLIN(1551)										layoutGroup->ascent = ascent;
HXDLIN(1551)										layoutGroup->descent = descent;
HXDLIN(1551)										layoutGroup->leading = leading;
HXDLIN(1551)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1551)										layoutGroup->offsetY = offsetY;
HXDLIN(1551)										layoutGroup->width = widthValue;
HXDLIN(1551)										layoutGroup->height = heightValue;
HXDLIN(1551)										offsetX = (offsetX + widthValue);
HXDLIN(1551)										if ((endIndex1 == formatRange->end)) {
HXLINE(1551)											layoutGroup = null();
HXDLIN(1551)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1551)											{
HXLINE(1551)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1551)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1551)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1551)													bool _hx_tmp43;
HXDLIN(1551)													if (hx::IsNotNull( font )) {
HXLINE(1551)														_hx_tmp43 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1551)														_hx_tmp43 = false;
            													}
HXDLIN(1551)													if (_hx_tmp43) {
HXLINE(1551)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1551)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1551)														ascent = currentFormat->size;
HXDLIN(1551)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1551)												leading = currentFormat->leading;
HXDLIN(1551)												heightValue = ((ascent + descent) + leading);
HXDLIN(1551)												if ((heightValue > maxHeightValue)) {
HXLINE(1551)													maxHeightValue = heightValue;
            												}
HXDLIN(1551)												if ((ascent > maxAscent)) {
HXLINE(1551)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1551)										while(true){
HXLINE(1551)											int tempRangeEnd9;
HXDLIN(1551)											if ((endIndex1 < formatRange->end)) {
HXLINE(1551)												tempRangeEnd9 = endIndex1;
            											}
            											else {
HXLINE(1551)												tempRangeEnd9 = formatRange->end;
            											}
HXDLIN(1551)											if ((textIndex != tempRangeEnd9)) {
HXLINE(1551)												::String text19 = _gthis->text;
HXDLIN(1551)												Float letterSpacing19 = ((Float)0.0);
HXDLIN(1551)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1551)													letterSpacing19 = formatRange->format->letterSpacing;
            												}
HXDLIN(1551)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1551)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1551)												Float width40 = ((Float)0.0);
HXDLIN(1551)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1551)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1551)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1551)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1551)												_gthis->_hx___textLayout->letterSpacing = letterSpacing19;
HXDLIN(1551)												bool positions14;
HXDLIN(1551)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1551)													positions14 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1551)													positions14 = true;
            												}
HXDLIN(1551)												_gthis->_hx___textLayout->autoHint = positions14;
HXDLIN(1551)												 ::openfl::_internal::text::TextLayout _gthis20 = _gthis->_hx___textLayout;
HXDLIN(1551)												_gthis20->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text19,textIndex,tempRangeEnd9));
HXDLIN(1551)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1551)												Float width41 = ((Float)0.0);
HXDLIN(1551)												{
HXLINE(1551)													int _g23 = (int)0;
HXDLIN(1551)													while((_g23 < positions->length)){
HXLINE(1551)														 ::openfl::_internal::text::GlyphPosition position21 = positions->__get(_g23).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1551)														_g23 = (_g23 + (int)1);
HXDLIN(1551)														width41 = (width41 + position21->advance->x);
            													}
            												}
HXDLIN(1551)												widthValue = width41;
HXDLIN(1551)												bool _hx_tmp44;
HXDLIN(1551)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1551)													_hx_tmp44 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1551)													_hx_tmp44 = true;
            												}
HXDLIN(1551)												if (_hx_tmp44) {
HXLINE(1551)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd9);
HXDLIN(1551)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1551)													layoutGroup->format = formatRange->format;
HXDLIN(1551)													layoutGroup->startIndex = textIndex;
HXDLIN(1551)													layoutGroup->endIndex = tempRangeEnd9;
            												}
HXDLIN(1551)												layoutGroup->positions = positions;
HXDLIN(1551)												layoutGroup->offsetX = offsetX;
HXDLIN(1551)												layoutGroup->ascent = ascent;
HXDLIN(1551)												layoutGroup->descent = descent;
HXDLIN(1551)												layoutGroup->leading = leading;
HXDLIN(1551)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1551)												layoutGroup->offsetY = offsetY;
HXDLIN(1551)												layoutGroup->width = widthValue;
HXDLIN(1551)												layoutGroup->height = heightValue;
HXDLIN(1551)												offsetX = (offsetX + widthValue);
HXDLIN(1551)												textIndex = tempRangeEnd9;
            											}
HXDLIN(1551)											if ((tempRangeEnd9 == formatRange->end)) {
HXLINE(1551)												layoutGroup = null();
            											}
HXDLIN(1551)											if ((tempRangeEnd9 == endIndex1)) {
HXLINE(1551)												goto _hx_goto_56;
            											}
HXDLIN(1551)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1551)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1551)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1551)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1551)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1551)											{
HXLINE(1551)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1551)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1551)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1551)													bool _hx_tmp45;
HXDLIN(1551)													if (hx::IsNotNull( font )) {
HXLINE(1551)														_hx_tmp45 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1551)														_hx_tmp45 = false;
            													}
HXDLIN(1551)													if (_hx_tmp45) {
HXLINE(1551)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1551)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1551)														ascent = currentFormat->size;
HXDLIN(1551)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1551)												leading = currentFormat->leading;
HXDLIN(1551)												heightValue = ((ascent + descent) + leading);
HXDLIN(1551)												if ((heightValue > maxHeightValue)) {
HXLINE(1551)													maxHeightValue = heightValue;
            												}
HXDLIN(1551)												if ((ascent > maxAscent)) {
HXLINE(1551)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_56:;
            									}
HXDLIN(1551)									textIndex = endIndex1;
            								}
            							}
HXLINE(1553)							wrap = false;
            						}
            						else {
HXLINE(1557)							bool _hx_tmp46;
HXDLIN(1557)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1557)								_hx_tmp46 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1557)								_hx_tmp46 = false;
            							}
HXDLIN(1557)							if (_hx_tmp46) {
HXLINE(1560)								if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1562)									layoutGroup->endIndex = spaceIndex;
HXLINE(1563)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1564)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1564)									layoutGroup3->width = (layoutGroup3->width + widthValue);
            								}
HXLINE(1568)								offsetX = (offsetX + widthValue);
HXLINE(1570)								textIndex = endIndex1;
            							}
            							else {
HXLINE(1572)								bool _hx_tmp47;
HXDLIN(1572)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1572)									_hx_tmp47 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE(1572)									_hx_tmp47 = true;
            								}
HXDLIN(1572)								if (_hx_tmp47) {
HXLINE(1574)									bool _hx_tmp48;
HXDLIN(1574)									if ((_gthis->width >= (int)4)) {
HXLINE(1574)										_hx_tmp48 = _gthis->wordWrap;
            									}
            									else {
HXLINE(1574)										_hx_tmp48 = false;
            									}
HXDLIN(1574)									if (_hx_tmp48) {
HXLINE(1574)										::Array< ::Dynamic> remainingPositions2 = positions;
HXDLIN(1574)										int i8;
HXDLIN(1574)										int j2;
HXDLIN(1574)										int placeIndex2;
HXDLIN(1574)										Float positionWidth2;
HXDLIN(1574)										 ::openfl::_internal::text::GlyphPosition currentPosition2;
HXDLIN(1574)										 ::Dynamic tempPositions8;
HXDLIN(1574)										Float width42 = ((Float)0.0);
HXDLIN(1574)										{
HXLINE(1574)											int _g24 = (int)0;
HXDLIN(1574)											while((_g24 < remainingPositions2->length)){
HXLINE(1574)												 ::openfl::_internal::text::GlyphPosition position22 = remainingPositions2->__get(_g24).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)												_g24 = (_g24 + (int)1);
HXDLIN(1574)												width42 = (width42 + position22->advance->x);
            											}
            										}
HXDLIN(1574)										Float tempWidth2 = width42;
HXDLIN(1574)										while(((offsetX + tempWidth2) > (_gthis->width - (int)2))){
HXLINE(1574)											j2 = (int)0;
HXDLIN(1574)											i8 = j2;
HXDLIN(1574)											positionWidth2 = ((Float)0.0);
HXDLIN(1574)											while(((offsetX + positionWidth2) < (_gthis->width - (int)2))){
HXLINE(1574)												currentPosition2 = remainingPositions2->__get(i8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)												if ((currentPosition2->advance->x == ((Float)0.0))) {
HXLINE(1574)													i8 = (i8 + (int)1);
HXDLIN(1574)													j2 = (j2 + (int)1);
            												}
            												else {
HXLINE(1574)													positionWidth2 = (positionWidth2 + currentPosition2->advance->x);
HXDLIN(1574)													i8 = (i8 + (int)1);
            												}
            											}
HXDLIN(1574)											bool _hx_tmp49;
HXDLIN(1574)											if ((i8 < (int)2)) {
HXLINE(1574)												_hx_tmp49 = (positionWidth2 > (_gthis->width - (int)4));
            											}
            											else {
HXLINE(1574)												_hx_tmp49 = false;
            											}
HXDLIN(1574)											if (_hx_tmp49) {
HXLINE(1574)												if ((((textIndex + i8) - j2) == endIndex1)) {
HXLINE(1574)													goto _hx_goto_59;
            												}
            											}
            											else {
HXLINE(1574)												while(((offsetX + positionWidth2) > (_gthis->width - (int)2))){
HXLINE(1574)													i8 = (i8 - (int)1);
HXDLIN(1574)													if (((i8 - j2) > (int)0)) {
HXLINE(1574)														{
HXLINE(1574)															int endIndex3 = ((textIndex + i8) - j2);
HXDLIN(1574)															if ((endIndex3 <= formatRange->end)) {
HXLINE(1574)																::String text20 = _gthis->text;
HXDLIN(1574)																Float letterSpacing20 = ((Float)0.0);
HXDLIN(1574)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)																	letterSpacing20 = formatRange->format->letterSpacing;
            																}
HXDLIN(1574)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1574)																Float width43 = ((Float)0.0);
HXDLIN(1574)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1574)																_gthis->_hx___textLayout->letterSpacing = letterSpacing20;
HXDLIN(1574)																bool positions15;
HXDLIN(1574)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)																	positions15 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1574)																	positions15 = true;
            																}
HXDLIN(1574)																_gthis->_hx___textLayout->autoHint = positions15;
HXDLIN(1574)																 ::openfl::_internal::text::TextLayout _gthis21 = _gthis->_hx___textLayout;
HXDLIN(1574)																_gthis21->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text20,textIndex,endIndex3));
HXDLIN(1574)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)																Float width44 = ((Float)0.0);
HXDLIN(1574)																{
HXLINE(1574)																	int _g25 = (int)0;
HXDLIN(1574)																	while((_g25 < positions->length)){
HXLINE(1574)																		 ::openfl::_internal::text::GlyphPosition position23 = positions->__get(_g25).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)																		_g25 = (_g25 + (int)1);
HXDLIN(1574)																		width44 = (width44 + position23->advance->x);
            																	}
            																}
HXDLIN(1574)																widthValue = width44;
            															}
            															else {
HXLINE(1574)																int tempIndex6 = textIndex;
HXDLIN(1574)																int tempRangeEnd10 = formatRange->end;
HXDLIN(1574)																int countRanges6 = (int)0;
HXDLIN(1574)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1574)																widthValue = (int)0;
HXDLIN(1574)																while(true){
HXLINE(1574)																	if ((tempIndex6 != tempRangeEnd10)) {
HXLINE(1574)																		::String text21 = _gthis->text;
HXDLIN(1574)																		Float letterSpacing21 = ((Float)0.0);
HXDLIN(1574)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)																			letterSpacing21 = formatRange->format->letterSpacing;
            																		}
HXDLIN(1574)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1574)																		Float width45 = ((Float)0.0);
HXDLIN(1574)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)																			_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																		}
HXDLIN(1574)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing21;
HXDLIN(1574)																		bool _hx_tmp50;
HXDLIN(1574)																		if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)																			_hx_tmp50 = (_gthis->sharpness < (int)400);
            																		}
            																		else {
HXLINE(1574)																			_hx_tmp50 = true;
            																		}
HXDLIN(1574)																		_gthis->_hx___textLayout->autoHint = _hx_tmp50;
HXDLIN(1574)																		 ::openfl::_internal::text::TextLayout _gthis22 = _gthis->_hx___textLayout;
HXDLIN(1574)																		_gthis22->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text21,tempIndex6,tempRangeEnd10));
HXDLIN(1574)																		::Array< ::Dynamic> tempPositions9 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)																		positions = positions->concat(tempPositions9);
HXDLIN(1574)																		Float width46 = ((Float)0.0);
HXDLIN(1574)																		{
HXLINE(1574)																			int _g26 = (int)0;
HXDLIN(1574)																			while((_g26 < positions->length)){
HXLINE(1574)																				 ::openfl::_internal::text::GlyphPosition position24 = positions->__get(_g26).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)																				_g26 = (_g26 + (int)1);
HXDLIN(1574)																				width46 = (width46 + position24->advance->x);
            																			}
            																		}
HXDLIN(1574)																		widthValue = (widthValue + width46);
            																	}
HXDLIN(1574)																	if ((tempRangeEnd10 != endIndex3)) {
HXLINE(1574)																		if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)																			rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)																			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																		}
HXDLIN(1574)																		tempIndex6 = tempRangeEnd10;
HXDLIN(1574)																		if ((endIndex3 < formatRange->end)) {
HXLINE(1574)																			tempRangeEnd10 = endIndex3;
            																		}
            																		else {
HXLINE(1574)																			tempRangeEnd10 = formatRange->end;
            																		}
HXDLIN(1574)																		countRanges6 = (countRanges6 + (int)1);
            																	}
            																	else {
HXLINE(1574)																		goto _hx_goto_63;
            																	}
            																}
            																_hx_goto_63:;
HXDLIN(1574)																rangeIndex = (rangeIndex - (countRanges6 + (int)1));
HXDLIN(1574)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXDLIN(1574)														positionWidth2 = widthValue;
            													}
            													else {
HXLINE(1574)														i8 = (int)1;
HXDLIN(1574)														j2 = (int)0;
            													}
            												}
            											}
HXDLIN(1574)											placeIndex2 = ((textIndex + i8) - j2);
HXDLIN(1574)											{
HXLINE(1574)												if ((placeIndex2 <= formatRange->end)) {
HXLINE(1574)													::String text22 = _gthis->text;
HXDLIN(1574)													Float letterSpacing22 = ((Float)0.0);
HXDLIN(1574)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)														letterSpacing22 = formatRange->format->letterSpacing;
            													}
HXDLIN(1574)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1574)													Float width47 = ((Float)0.0);
HXDLIN(1574)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1574)													_gthis->_hx___textLayout->letterSpacing = letterSpacing22;
HXDLIN(1574)													bool positions16;
HXDLIN(1574)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)														positions16 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1574)														positions16 = true;
            													}
HXDLIN(1574)													_gthis->_hx___textLayout->autoHint = positions16;
HXDLIN(1574)													 ::openfl::_internal::text::TextLayout _gthis23 = _gthis->_hx___textLayout;
HXDLIN(1574)													_gthis23->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text22,textIndex,placeIndex2));
HXDLIN(1574)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)													Float width48 = ((Float)0.0);
HXDLIN(1574)													{
HXLINE(1574)														int _g27 = (int)0;
HXDLIN(1574)														while((_g27 < positions->length)){
HXLINE(1574)															 ::openfl::_internal::text::GlyphPosition position25 = positions->__get(_g27).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)															_g27 = (_g27 + (int)1);
HXDLIN(1574)															width48 = (width48 + position25->advance->x);
            														}
            													}
HXDLIN(1574)													widthValue = width48;
HXDLIN(1574)													bool _hx_tmp51;
HXDLIN(1574)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1574)														_hx_tmp51 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1574)														_hx_tmp51 = true;
            													}
HXDLIN(1574)													if (_hx_tmp51) {
HXLINE(1574)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex2);
HXDLIN(1574)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1574)														layoutGroup->format = formatRange->format;
HXDLIN(1574)														layoutGroup->startIndex = textIndex;
HXDLIN(1574)														layoutGroup->endIndex = placeIndex2;
            													}
HXDLIN(1574)													layoutGroup->positions = positions;
HXDLIN(1574)													layoutGroup->offsetX = offsetX;
HXDLIN(1574)													layoutGroup->ascent = ascent;
HXDLIN(1574)													layoutGroup->descent = descent;
HXDLIN(1574)													layoutGroup->leading = leading;
HXDLIN(1574)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1574)													layoutGroup->offsetY = offsetY;
HXDLIN(1574)													layoutGroup->width = widthValue;
HXDLIN(1574)													layoutGroup->height = heightValue;
HXDLIN(1574)													offsetX = (offsetX + widthValue);
HXDLIN(1574)													if ((placeIndex2 == formatRange->end)) {
HXLINE(1574)														layoutGroup = null();
HXDLIN(1574)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXDLIN(1574)														{
HXLINE(1574)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1574)																ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1574)																descent = (currentFormat->size * currentFormat->_hx___descent);
            															}
            															else {
HXLINE(1574)																bool _hx_tmp52;
HXDLIN(1574)																if (hx::IsNotNull( font )) {
HXLINE(1574)																	_hx_tmp52 = (font->unitsPerEM != (int)0);
            																}
            																else {
HXLINE(1574)																	_hx_tmp52 = false;
            																}
HXDLIN(1574)																if (_hx_tmp52) {
HXLINE(1574)																	ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1574)																	descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            																}
            																else {
HXLINE(1574)																	ascent = currentFormat->size;
HXDLIN(1574)																	descent = (currentFormat->size * ((Float)0.185));
            																}
            															}
HXDLIN(1574)															leading = currentFormat->leading;
HXDLIN(1574)															heightValue = ((ascent + descent) + leading);
HXDLIN(1574)															if ((heightValue > maxHeightValue)) {
HXLINE(1574)																maxHeightValue = heightValue;
            															}
HXDLIN(1574)															if ((ascent > maxAscent)) {
HXLINE(1574)																maxAscent = ascent;
            															}
            														}
            													}
            												}
            												else {
HXLINE(1574)													while(true){
HXLINE(1574)														int tempRangeEnd11;
HXDLIN(1574)														if ((placeIndex2 < formatRange->end)) {
HXLINE(1574)															tempRangeEnd11 = placeIndex2;
            														}
            														else {
HXLINE(1574)															tempRangeEnd11 = formatRange->end;
            														}
HXDLIN(1574)														if ((textIndex != tempRangeEnd11)) {
HXLINE(1574)															::String text23 = _gthis->text;
HXDLIN(1574)															Float letterSpacing23 = ((Float)0.0);
HXDLIN(1574)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)																letterSpacing23 = formatRange->format->letterSpacing;
            															}
HXDLIN(1574)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1574)															Float width49 = ((Float)0.0);
HXDLIN(1574)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1574)															_gthis->_hx___textLayout->letterSpacing = letterSpacing23;
HXDLIN(1574)															bool positions17;
HXDLIN(1574)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)																positions17 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1574)																positions17 = true;
            															}
HXDLIN(1574)															_gthis->_hx___textLayout->autoHint = positions17;
HXDLIN(1574)															 ::openfl::_internal::text::TextLayout _gthis24 = _gthis->_hx___textLayout;
HXDLIN(1574)															_gthis24->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text23,textIndex,tempRangeEnd11));
HXDLIN(1574)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)															Float width50 = ((Float)0.0);
HXDLIN(1574)															{
HXLINE(1574)																int _g28 = (int)0;
HXDLIN(1574)																while((_g28 < positions->length)){
HXLINE(1574)																	 ::openfl::_internal::text::GlyphPosition position26 = positions->__get(_g28).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)																	_g28 = (_g28 + (int)1);
HXDLIN(1574)																	width50 = (width50 + position26->advance->x);
            																}
            															}
HXDLIN(1574)															widthValue = width50;
HXDLIN(1574)															bool _hx_tmp53;
HXDLIN(1574)															if (hx::IsNotNull( layoutGroup )) {
HXLINE(1574)																_hx_tmp53 = (layoutGroup->startIndex != layoutGroup->endIndex);
            															}
            															else {
HXLINE(1574)																_hx_tmp53 = true;
            															}
HXDLIN(1574)															if (_hx_tmp53) {
HXLINE(1574)																layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd11);
HXDLIN(1574)																::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            															}
            															else {
HXLINE(1574)																layoutGroup->format = formatRange->format;
HXDLIN(1574)																layoutGroup->startIndex = textIndex;
HXDLIN(1574)																layoutGroup->endIndex = tempRangeEnd11;
            															}
HXDLIN(1574)															layoutGroup->positions = positions;
HXDLIN(1574)															layoutGroup->offsetX = offsetX;
HXDLIN(1574)															layoutGroup->ascent = ascent;
HXDLIN(1574)															layoutGroup->descent = descent;
HXDLIN(1574)															layoutGroup->leading = leading;
HXDLIN(1574)															layoutGroup->lineIndex = lineIndex;
HXDLIN(1574)															layoutGroup->offsetY = offsetY;
HXDLIN(1574)															layoutGroup->width = widthValue;
HXDLIN(1574)															layoutGroup->height = heightValue;
HXDLIN(1574)															offsetX = (offsetX + widthValue);
HXDLIN(1574)															textIndex = tempRangeEnd11;
            														}
HXDLIN(1574)														if ((tempRangeEnd11 == formatRange->end)) {
HXLINE(1574)															layoutGroup = null();
            														}
HXDLIN(1574)														if ((tempRangeEnd11 == placeIndex2)) {
HXLINE(1574)															goto _hx_goto_66;
            														}
HXDLIN(1574)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXDLIN(1574)														{
HXLINE(1574)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1574)																ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1574)																descent = (currentFormat->size * currentFormat->_hx___descent);
            															}
            															else {
HXLINE(1574)																bool _hx_tmp54;
HXDLIN(1574)																if (hx::IsNotNull( font )) {
HXLINE(1574)																	_hx_tmp54 = (font->unitsPerEM != (int)0);
            																}
            																else {
HXLINE(1574)																	_hx_tmp54 = false;
            																}
HXDLIN(1574)																if (_hx_tmp54) {
HXLINE(1574)																	ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1574)																	descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            																}
            																else {
HXLINE(1574)																	ascent = currentFormat->size;
HXDLIN(1574)																	descent = (currentFormat->size * ((Float)0.185));
            																}
            															}
HXDLIN(1574)															leading = currentFormat->leading;
HXDLIN(1574)															heightValue = ((ascent + descent) + leading);
HXDLIN(1574)															if ((heightValue > maxHeightValue)) {
HXLINE(1574)																maxHeightValue = heightValue;
            															}
HXDLIN(1574)															if ((ascent > maxAscent)) {
HXLINE(1574)																maxAscent = ascent;
            															}
            														}
            													}
            													_hx_goto_66:;
            												}
HXDLIN(1574)												textIndex = placeIndex2;
            											}
HXDLIN(1574)											{
HXLINE(1574)												{
HXLINE(1574)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1574)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1574)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1574)														bool _hx_tmp55;
HXDLIN(1574)														if (hx::IsNotNull( font )) {
HXLINE(1574)															_hx_tmp55 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1574)															_hx_tmp55 = false;
            														}
HXDLIN(1574)														if (_hx_tmp55) {
HXLINE(1574)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1574)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1574)															ascent = currentFormat->size;
HXDLIN(1574)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1574)													leading = currentFormat->leading;
HXDLIN(1574)													heightValue = ((ascent + descent) + leading);
HXDLIN(1574)													if ((heightValue > maxHeightValue)) {
HXLINE(1574)														maxHeightValue = heightValue;
            													}
HXDLIN(1574)													if ((ascent > maxAscent)) {
HXLINE(1574)														maxAscent = ascent;
            													}
            												}
HXDLIN(1574)												int i9 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1574)												while(true){
HXLINE(1574)													i9 = (i9 - (int)1);
HXDLIN(1574)													if (!((i9 > (int)-1))) {
HXLINE(1574)														goto _hx_goto_68;
            													}
HXDLIN(1574)													 ::openfl::_internal::text::TextLayoutGroup lg4 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i9)) );
HXDLIN(1574)													if ((lg4->lineIndex < lineIndex)) {
HXLINE(1574)														goto _hx_goto_68;
            													}
HXDLIN(1574)													if ((lg4->lineIndex > lineIndex)) {
HXLINE(1574)														continue;
            													}
HXDLIN(1574)													lg4->ascent = maxAscent;
HXDLIN(1574)													lg4->height = maxHeightValue;
            												}
            												_hx_goto_68:;
HXDLIN(1574)												offsetY = (offsetY + maxHeightValue);
HXDLIN(1574)												maxAscent = ((Float)0.0);
HXDLIN(1574)												maxHeightValue = ((Float)0.0);
HXDLIN(1574)												lineIndex = (lineIndex + (int)1);
HXDLIN(1574)												offsetX = (int)2;
            											}
HXDLIN(1574)											if ((endIndex1 <= formatRange->end)) {
HXLINE(1574)												::String text24 = _gthis->text;
HXDLIN(1574)												Float letterSpacing24 = ((Float)0.0);
HXDLIN(1574)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)													letterSpacing24 = formatRange->format->letterSpacing;
            												}
HXDLIN(1574)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1574)												Float width51 = ((Float)0.0);
HXDLIN(1574)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1574)												_gthis->_hx___textLayout->letterSpacing = letterSpacing24;
HXDLIN(1574)												bool positions18;
HXDLIN(1574)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)													positions18 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1574)													positions18 = true;
            												}
HXDLIN(1574)												_gthis->_hx___textLayout->autoHint = positions18;
HXDLIN(1574)												 ::openfl::_internal::text::TextLayout _gthis25 = _gthis->_hx___textLayout;
HXDLIN(1574)												_gthis25->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text24,placeIndex2,endIndex1));
HXDLIN(1574)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)												Float width52 = ((Float)0.0);
HXDLIN(1574)												{
HXLINE(1574)													int _g29 = (int)0;
HXDLIN(1574)													while((_g29 < positions->length)){
HXLINE(1574)														 ::openfl::_internal::text::GlyphPosition position27 = positions->__get(_g29).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)														_g29 = (_g29 + (int)1);
HXDLIN(1574)														width52 = (width52 + position27->advance->x);
            													}
            												}
HXDLIN(1574)												widthValue = width52;
            											}
            											else {
HXLINE(1574)												int tempIndex7 = placeIndex2;
HXDLIN(1574)												int tempRangeEnd12 = formatRange->end;
HXDLIN(1574)												int countRanges7 = (int)0;
HXDLIN(1574)												positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1574)												widthValue = (int)0;
HXDLIN(1574)												while(true){
HXLINE(1574)													if ((tempIndex7 != tempRangeEnd12)) {
HXLINE(1574)														::String text25 = _gthis->text;
HXDLIN(1574)														Float letterSpacing25 = ((Float)0.0);
HXDLIN(1574)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)															letterSpacing25 = formatRange->format->letterSpacing;
            														}
HXDLIN(1574)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1574)														Float width53 = ((Float)0.0);
HXDLIN(1574)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1574)														_gthis->_hx___textLayout->letterSpacing = letterSpacing25;
HXDLIN(1574)														bool _hx_tmp56;
HXDLIN(1574)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)															_hx_tmp56 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1574)															_hx_tmp56 = true;
            														}
HXDLIN(1574)														_gthis->_hx___textLayout->autoHint = _hx_tmp56;
HXDLIN(1574)														 ::openfl::_internal::text::TextLayout _gthis26 = _gthis->_hx___textLayout;
HXDLIN(1574)														_gthis26->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text25,tempIndex7,tempRangeEnd12));
HXDLIN(1574)														::Array< ::Dynamic> tempPositions10 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)														positions = positions->concat(tempPositions10);
HXDLIN(1574)														Float width54 = ((Float)0.0);
HXDLIN(1574)														{
HXLINE(1574)															int _g30 = (int)0;
HXDLIN(1574)															while((_g30 < positions->length)){
HXLINE(1574)																 ::openfl::_internal::text::GlyphPosition position28 = positions->__get(_g30).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)																_g30 = (_g30 + (int)1);
HXDLIN(1574)																width54 = (width54 + position28->advance->x);
            															}
            														}
HXDLIN(1574)														widthValue = (widthValue + width54);
            													}
HXDLIN(1574)													if ((tempRangeEnd12 != endIndex1)) {
HXLINE(1574)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXDLIN(1574)														tempIndex7 = tempRangeEnd12;
HXDLIN(1574)														if ((endIndex1 < formatRange->end)) {
HXLINE(1574)															tempRangeEnd12 = endIndex1;
            														}
            														else {
HXLINE(1574)															tempRangeEnd12 = formatRange->end;
            														}
HXDLIN(1574)														countRanges7 = (countRanges7 + (int)1);
            													}
            													else {
HXLINE(1574)														goto _hx_goto_70;
            													}
            												}
            												_hx_goto_70:;
HXDLIN(1574)												rangeIndex = (rangeIndex - (countRanges7 + (int)1));
HXDLIN(1574)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
            											}
HXDLIN(1574)											remainingPositions2 = positions;
HXDLIN(1574)											tempWidth2 = widthValue;
            										}
            										_hx_goto_59:;
            									}
HXDLIN(1574)									{
HXLINE(1574)										if ((endIndex1 <= formatRange->end)) {
HXLINE(1574)											::String text26 = _gthis->text;
HXDLIN(1574)											Float letterSpacing26 = ((Float)0.0);
HXDLIN(1574)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)												letterSpacing26 = formatRange->format->letterSpacing;
            											}
HXDLIN(1574)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1574)											Float width55 = ((Float)0.0);
HXDLIN(1574)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1574)											_gthis->_hx___textLayout->letterSpacing = letterSpacing26;
HXDLIN(1574)											bool positions19;
HXDLIN(1574)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)												positions19 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1574)												positions19 = true;
            											}
HXDLIN(1574)											_gthis->_hx___textLayout->autoHint = positions19;
HXDLIN(1574)											 ::openfl::_internal::text::TextLayout _gthis27 = _gthis->_hx___textLayout;
HXDLIN(1574)											_gthis27->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text26,textIndex,endIndex1));
HXDLIN(1574)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)											Float width56 = ((Float)0.0);
HXDLIN(1574)											{
HXLINE(1574)												int _g31 = (int)0;
HXDLIN(1574)												while((_g31 < positions->length)){
HXLINE(1574)													 ::openfl::_internal::text::GlyphPosition position29 = positions->__get(_g31).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)													_g31 = (_g31 + (int)1);
HXDLIN(1574)													width56 = (width56 + position29->advance->x);
            												}
            											}
HXDLIN(1574)											widthValue = width56;
HXDLIN(1574)											bool _hx_tmp57;
HXDLIN(1574)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1574)												_hx_tmp57 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1574)												_hx_tmp57 = true;
            											}
HXDLIN(1574)											if (_hx_tmp57) {
HXLINE(1574)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1574)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1574)												layoutGroup->format = formatRange->format;
HXDLIN(1574)												layoutGroup->startIndex = textIndex;
HXDLIN(1574)												layoutGroup->endIndex = endIndex1;
            											}
HXDLIN(1574)											layoutGroup->positions = positions;
HXDLIN(1574)											layoutGroup->offsetX = offsetX;
HXDLIN(1574)											layoutGroup->ascent = ascent;
HXDLIN(1574)											layoutGroup->descent = descent;
HXDLIN(1574)											layoutGroup->leading = leading;
HXDLIN(1574)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1574)											layoutGroup->offsetY = offsetY;
HXDLIN(1574)											layoutGroup->width = widthValue;
HXDLIN(1574)											layoutGroup->height = heightValue;
HXDLIN(1574)											offsetX = (offsetX + widthValue);
HXDLIN(1574)											if ((endIndex1 == formatRange->end)) {
HXLINE(1574)												layoutGroup = null();
HXDLIN(1574)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1574)												{
HXLINE(1574)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1574)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1574)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1574)														bool _hx_tmp58;
HXDLIN(1574)														if (hx::IsNotNull( font )) {
HXLINE(1574)															_hx_tmp58 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1574)															_hx_tmp58 = false;
            														}
HXDLIN(1574)														if (_hx_tmp58) {
HXLINE(1574)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1574)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1574)															ascent = currentFormat->size;
HXDLIN(1574)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1574)													leading = currentFormat->leading;
HXDLIN(1574)													heightValue = ((ascent + descent) + leading);
HXDLIN(1574)													if ((heightValue > maxHeightValue)) {
HXLINE(1574)														maxHeightValue = heightValue;
            													}
HXDLIN(1574)													if ((ascent > maxAscent)) {
HXLINE(1574)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1574)											while(true){
HXLINE(1574)												int tempRangeEnd13;
HXDLIN(1574)												if ((endIndex1 < formatRange->end)) {
HXLINE(1574)													tempRangeEnd13 = endIndex1;
            												}
            												else {
HXLINE(1574)													tempRangeEnd13 = formatRange->end;
            												}
HXDLIN(1574)												if ((textIndex != tempRangeEnd13)) {
HXLINE(1574)													::String text27 = _gthis->text;
HXDLIN(1574)													Float letterSpacing27 = ((Float)0.0);
HXDLIN(1574)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1574)														letterSpacing27 = formatRange->format->letterSpacing;
            													}
HXDLIN(1574)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1574)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1574)													Float width57 = ((Float)0.0);
HXDLIN(1574)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1574)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1574)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1574)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1574)													_gthis->_hx___textLayout->letterSpacing = letterSpacing27;
HXDLIN(1574)													bool positions20;
HXDLIN(1574)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1574)														positions20 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1574)														positions20 = true;
            													}
HXDLIN(1574)													_gthis->_hx___textLayout->autoHint = positions20;
HXDLIN(1574)													 ::openfl::_internal::text::TextLayout _gthis28 = _gthis->_hx___textLayout;
HXDLIN(1574)													_gthis28->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text27,textIndex,tempRangeEnd13));
HXDLIN(1574)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1574)													Float width58 = ((Float)0.0);
HXDLIN(1574)													{
HXLINE(1574)														int _g32 = (int)0;
HXDLIN(1574)														while((_g32 < positions->length)){
HXLINE(1574)															 ::openfl::_internal::text::GlyphPosition position30 = positions->__get(_g32).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1574)															_g32 = (_g32 + (int)1);
HXDLIN(1574)															width58 = (width58 + position30->advance->x);
            														}
            													}
HXDLIN(1574)													widthValue = width58;
HXDLIN(1574)													bool _hx_tmp59;
HXDLIN(1574)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1574)														_hx_tmp59 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1574)														_hx_tmp59 = true;
            													}
HXDLIN(1574)													if (_hx_tmp59) {
HXLINE(1574)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd13);
HXDLIN(1574)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1574)														layoutGroup->format = formatRange->format;
HXDLIN(1574)														layoutGroup->startIndex = textIndex;
HXDLIN(1574)														layoutGroup->endIndex = tempRangeEnd13;
            													}
HXDLIN(1574)													layoutGroup->positions = positions;
HXDLIN(1574)													layoutGroup->offsetX = offsetX;
HXDLIN(1574)													layoutGroup->ascent = ascent;
HXDLIN(1574)													layoutGroup->descent = descent;
HXDLIN(1574)													layoutGroup->leading = leading;
HXDLIN(1574)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1574)													layoutGroup->offsetY = offsetY;
HXDLIN(1574)													layoutGroup->width = widthValue;
HXDLIN(1574)													layoutGroup->height = heightValue;
HXDLIN(1574)													offsetX = (offsetX + widthValue);
HXDLIN(1574)													textIndex = tempRangeEnd13;
            												}
HXDLIN(1574)												if ((tempRangeEnd13 == formatRange->end)) {
HXLINE(1574)													layoutGroup = null();
            												}
HXDLIN(1574)												if ((tempRangeEnd13 == endIndex1)) {
HXLINE(1574)													goto _hx_goto_73;
            												}
HXDLIN(1574)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1574)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1574)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1574)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1574)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1574)												{
HXLINE(1574)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1574)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1574)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1574)														bool _hx_tmp60;
HXDLIN(1574)														if (hx::IsNotNull( font )) {
HXLINE(1574)															_hx_tmp60 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1574)															_hx_tmp60 = false;
            														}
HXDLIN(1574)														if (_hx_tmp60) {
HXLINE(1574)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1574)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1574)															ascent = currentFormat->size;
HXDLIN(1574)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1574)													leading = currentFormat->leading;
HXDLIN(1574)													heightValue = ((ascent + descent) + leading);
HXDLIN(1574)													if ((heightValue > maxHeightValue)) {
HXLINE(1574)														maxHeightValue = heightValue;
            													}
HXDLIN(1574)													if ((ascent > maxAscent)) {
HXLINE(1574)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_73:;
            										}
HXDLIN(1574)										textIndex = endIndex1;
            									}
            								}
            								else {
HXLINE(1578)									layoutGroup->endIndex = endIndex1;
HXLINE(1579)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1580)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1580)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1582)									if ((endIndex1 == formatRange->end)) {
HXLINE(1584)										layoutGroup = null();
HXLINE(1585)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1585)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1585)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1585)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1585)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1586)										{
HXLINE(1586)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1586)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1586)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1586)												bool _hx_tmp61;
HXDLIN(1586)												if (hx::IsNotNull( font )) {
HXLINE(1586)													_hx_tmp61 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1586)													_hx_tmp61 = false;
            												}
HXDLIN(1586)												if (_hx_tmp61) {
HXLINE(1586)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1586)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1586)													ascent = currentFormat->size;
HXDLIN(1586)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1586)											leading = currentFormat->leading;
HXDLIN(1586)											heightValue = ((ascent + descent) + leading);
HXDLIN(1586)											if ((heightValue > maxHeightValue)) {
HXLINE(1586)												maxHeightValue = heightValue;
            											}
HXDLIN(1586)											if ((ascent > maxAscent)) {
HXLINE(1586)												maxAscent = ascent;
            											}
            										}
            									}
HXLINE(1591)									if ((breakIndex == endIndex1)) {
HXLINE(1591)										endIndex1 = (endIndex1 + (int)1);
            									}
HXLINE(1593)									offsetX = (offsetX + widthValue);
HXLINE(1595)									textIndex = endIndex1;
            								}
            							}
            						}
HXLINE(1601)						int nextSpaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),textIndex);
HXLINE(1603)						if ((formatRange->end <= previousSpaceIndex)) {
HXLINE(1605)							layoutGroup = null();
HXLINE(1606)							textIndex = formatRange->end;
HXLINE(1608)							if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1608)								rangeIndex = (rangeIndex + (int)1);
HXDLIN(1608)								formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1608)								currentFormat->_hx___merge(formatRange->format);
HXDLIN(1608)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            							}
HXLINE(1609)							{
HXLINE(1609)								if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1609)									ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1609)									descent = (currentFormat->size * currentFormat->_hx___descent);
            								}
            								else {
HXLINE(1609)									bool _hx_tmp62;
HXDLIN(1609)									if (hx::IsNotNull( font )) {
HXLINE(1609)										_hx_tmp62 = (font->unitsPerEM != (int)0);
            									}
            									else {
HXLINE(1609)										_hx_tmp62 = false;
            									}
HXDLIN(1609)									if (_hx_tmp62) {
HXLINE(1609)										ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1609)										descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            									}
            									else {
HXLINE(1609)										ascent = currentFormat->size;
HXDLIN(1609)										descent = (currentFormat->size * ((Float)0.185));
            									}
            								}
HXDLIN(1609)								leading = currentFormat->leading;
HXDLIN(1609)								heightValue = ((ascent + descent) + leading);
HXDLIN(1609)								if ((heightValue > maxHeightValue)) {
HXLINE(1609)									maxHeightValue = heightValue;
            								}
HXDLIN(1609)								if ((ascent > maxAscent)) {
HXLINE(1609)									maxAscent = ascent;
            								}
            							}
            						}
            						else {
HXLINE(1616)							if ((breakIndex == previousSpaceIndex)) {
HXLINE(1618)								layoutGroup->endIndex = breakIndex;
HXLINE(1620)								if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < (int)0)) {
HXLINE(1623)									layoutGroup->positions->push(null());
            								}
HXLINE(1627)								textIndex = (breakIndex + (int)1);
            							}
HXLINE(1631)							previousSpaceIndex = spaceIndex;
HXLINE(1632)							spaceIndex = nextSpaceIndex;
            						}
HXLINE(1636)						bool _hx_tmp63;
HXDLIN(1636)						bool _hx_tmp64;
HXDLIN(1636)						bool _hx_tmp65;
HXDLIN(1636)						if ((breakIndex > (int)-1)) {
HXLINE(1636)							_hx_tmp65 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1636)							_hx_tmp65 = false;
            						}
HXDLIN(1636)						if (_hx_tmp65) {
HXLINE(1636)							if ((spaceIndex <= breakIndex)) {
HXLINE(1636)								_hx_tmp64 = (spaceIndex == (int)-1);
            							}
            							else {
HXLINE(1636)								_hx_tmp64 = true;
            							}
            						}
            						else {
HXLINE(1636)							_hx_tmp64 = false;
            						}
HXDLIN(1636)						if (!(_hx_tmp64)) {
HXLINE(1636)							_hx_tmp63 = (textIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1636)							_hx_tmp63 = true;
            						}
HXDLIN(1636)						if (_hx_tmp63) {
HXLINE(1638)							goto _hx_goto_34;
            						}
            					}
            					_hx_goto_34:;
            				}
            				else {
HXLINE(1646)					if ((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1650)						{
HXLINE(1650)							int endIndex4 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1650)							if ((endIndex4 <= formatRange->end)) {
HXLINE(1650)								::String text28 = _gthis->text;
HXDLIN(1650)								Float letterSpacing28 = ((Float)0.0);
HXDLIN(1650)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)									letterSpacing28 = formatRange->format->letterSpacing;
            								}
HXDLIN(1650)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1650)								Float width59 = ((Float)0.0);
HXDLIN(1650)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1650)								_gthis->_hx___textLayout->letterSpacing = letterSpacing28;
HXDLIN(1650)								bool positions21;
HXDLIN(1650)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1650)									positions21 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1650)									positions21 = true;
            								}
HXDLIN(1650)								_gthis->_hx___textLayout->autoHint = positions21;
HXDLIN(1650)								 ::openfl::_internal::text::TextLayout _gthis29 = _gthis->_hx___textLayout;
HXDLIN(1650)								_gthis29->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text28,textIndex,endIndex4));
HXDLIN(1650)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1650)								Float width60 = ((Float)0.0);
HXDLIN(1650)								{
HXLINE(1650)									int _g33 = (int)0;
HXDLIN(1650)									while((_g33 < positions->length)){
HXLINE(1650)										 ::openfl::_internal::text::GlyphPosition position31 = positions->__get(_g33).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1650)										_g33 = (_g33 + (int)1);
HXDLIN(1650)										width60 = (width60 + position31->advance->x);
            									}
            								}
HXDLIN(1650)								widthValue = width60;
            							}
            							else {
HXLINE(1650)								int tempIndex8 = textIndex;
HXDLIN(1650)								int tempRangeEnd14 = formatRange->end;
HXDLIN(1650)								int countRanges8 = (int)0;
HXDLIN(1650)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1650)								widthValue = (int)0;
HXDLIN(1650)								while(true){
HXLINE(1650)									if ((tempIndex8 != tempRangeEnd14)) {
HXLINE(1650)										::String text29 = _gthis->text;
HXDLIN(1650)										Float letterSpacing29 = ((Float)0.0);
HXDLIN(1650)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)											letterSpacing29 = formatRange->format->letterSpacing;
            										}
HXDLIN(1650)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1650)										Float width61 = ((Float)0.0);
HXDLIN(1650)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1650)										_gthis->_hx___textLayout->letterSpacing = letterSpacing29;
HXDLIN(1650)										bool _hx_tmp66;
HXDLIN(1650)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1650)											_hx_tmp66 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1650)											_hx_tmp66 = true;
            										}
HXDLIN(1650)										_gthis->_hx___textLayout->autoHint = _hx_tmp66;
HXDLIN(1650)										 ::openfl::_internal::text::TextLayout _gthis30 = _gthis->_hx___textLayout;
HXDLIN(1650)										_gthis30->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text29,tempIndex8,tempRangeEnd14));
HXDLIN(1650)										::Array< ::Dynamic> tempPositions11 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1650)										positions = positions->concat(tempPositions11);
HXDLIN(1650)										Float width62 = ((Float)0.0);
HXDLIN(1650)										{
HXLINE(1650)											int _g34 = (int)0;
HXDLIN(1650)											while((_g34 < positions->length)){
HXLINE(1650)												 ::openfl::_internal::text::GlyphPosition position32 = positions->__get(_g34).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1650)												_g34 = (_g34 + (int)1);
HXDLIN(1650)												width62 = (width62 + position32->advance->x);
            											}
            										}
HXDLIN(1650)										widthValue = (widthValue + width62);
            									}
HXDLIN(1650)									if ((tempRangeEnd14 != endIndex4)) {
HXLINE(1650)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1650)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1650)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1650)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1650)										tempIndex8 = tempRangeEnd14;
HXDLIN(1650)										if ((endIndex4 < formatRange->end)) {
HXLINE(1650)											tempRangeEnd14 = endIndex4;
            										}
            										else {
HXLINE(1650)											tempRangeEnd14 = formatRange->end;
            										}
HXDLIN(1650)										countRanges8 = (countRanges8 + (int)1);
            									}
            									else {
HXLINE(1650)										goto _hx_goto_76;
            									}
            								}
            								_hx_goto_76:;
HXDLIN(1650)								rangeIndex = (rangeIndex - (countRanges8 + (int)1));
HXDLIN(1650)								if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1650)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1650)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1650)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            								}
            							}
            						}
HXLINE(1651)						{
HXLINE(1651)							int endIndex5 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1651)							bool _hx_tmp67;
HXDLIN(1651)							if ((_gthis->width >= (int)4)) {
HXLINE(1651)								_hx_tmp67 = _gthis->wordWrap;
            							}
            							else {
HXLINE(1651)								_hx_tmp67 = false;
            							}
HXDLIN(1651)							if (_hx_tmp67) {
HXLINE(1651)								::Array< ::Dynamic> remainingPositions3 = positions;
HXDLIN(1651)								int i10;
HXDLIN(1651)								int j3;
HXDLIN(1651)								int placeIndex3;
HXDLIN(1651)								Float positionWidth3;
HXDLIN(1651)								 ::openfl::_internal::text::GlyphPosition currentPosition3;
HXDLIN(1651)								 ::Dynamic tempPositions12;
HXDLIN(1651)								Float width63 = ((Float)0.0);
HXDLIN(1651)								{
HXLINE(1651)									int _g35 = (int)0;
HXDLIN(1651)									while((_g35 < remainingPositions3->length)){
HXLINE(1651)										 ::openfl::_internal::text::GlyphPosition position33 = remainingPositions3->__get(_g35).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)										_g35 = (_g35 + (int)1);
HXDLIN(1651)										width63 = (width63 + position33->advance->x);
            									}
            								}
HXDLIN(1651)								Float tempWidth3 = width63;
HXDLIN(1651)								while(((offsetX + tempWidth3) > (_gthis->width - (int)2))){
HXLINE(1651)									j3 = (int)0;
HXDLIN(1651)									i10 = j3;
HXDLIN(1651)									positionWidth3 = ((Float)0.0);
HXDLIN(1651)									while(((offsetX + positionWidth3) < (_gthis->width - (int)2))){
HXLINE(1651)										currentPosition3 = remainingPositions3->__get(i10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)										if ((currentPosition3->advance->x == ((Float)0.0))) {
HXLINE(1651)											i10 = (i10 + (int)1);
HXDLIN(1651)											j3 = (j3 + (int)1);
            										}
            										else {
HXLINE(1651)											positionWidth3 = (positionWidth3 + currentPosition3->advance->x);
HXDLIN(1651)											i10 = (i10 + (int)1);
            										}
            									}
HXDLIN(1651)									bool _hx_tmp68;
HXDLIN(1651)									if ((i10 < (int)2)) {
HXLINE(1651)										_hx_tmp68 = (positionWidth3 > (_gthis->width - (int)4));
            									}
            									else {
HXLINE(1651)										_hx_tmp68 = false;
            									}
HXDLIN(1651)									if (_hx_tmp68) {
HXLINE(1651)										if ((((textIndex + i10) - j3) == endIndex5)) {
HXLINE(1651)											goto _hx_goto_79;
            										}
            									}
            									else {
HXLINE(1651)										while(((offsetX + positionWidth3) > (_gthis->width - (int)2))){
HXLINE(1651)											i10 = (i10 - (int)1);
HXDLIN(1651)											if (((i10 - j3) > (int)0)) {
HXLINE(1651)												{
HXLINE(1651)													int endIndex6 = ((textIndex + i10) - j3);
HXDLIN(1651)													if ((endIndex6 <= formatRange->end)) {
HXLINE(1651)														::String text30 = _gthis->text;
HXDLIN(1651)														Float letterSpacing30 = ((Float)0.0);
HXDLIN(1651)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)															letterSpacing30 = formatRange->format->letterSpacing;
            														}
HXDLIN(1651)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1651)														Float width64 = ((Float)0.0);
HXDLIN(1651)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1651)														_gthis->_hx___textLayout->letterSpacing = letterSpacing30;
HXDLIN(1651)														bool positions22;
HXDLIN(1651)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)															positions22 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1651)															positions22 = true;
            														}
HXDLIN(1651)														_gthis->_hx___textLayout->autoHint = positions22;
HXDLIN(1651)														 ::openfl::_internal::text::TextLayout _gthis31 = _gthis->_hx___textLayout;
HXDLIN(1651)														_gthis31->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text30,textIndex,endIndex6));
HXDLIN(1651)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)														Float width65 = ((Float)0.0);
HXDLIN(1651)														{
HXLINE(1651)															int _g36 = (int)0;
HXDLIN(1651)															while((_g36 < positions->length)){
HXLINE(1651)																 ::openfl::_internal::text::GlyphPosition position34 = positions->__get(_g36).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)																_g36 = (_g36 + (int)1);
HXDLIN(1651)																width65 = (width65 + position34->advance->x);
            															}
            														}
HXDLIN(1651)														widthValue = width65;
            													}
            													else {
HXLINE(1651)														int tempIndex9 = textIndex;
HXDLIN(1651)														int tempRangeEnd15 = formatRange->end;
HXDLIN(1651)														int countRanges9 = (int)0;
HXDLIN(1651)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1651)														widthValue = (int)0;
HXDLIN(1651)														while(true){
HXLINE(1651)															if ((tempIndex9 != tempRangeEnd15)) {
HXLINE(1651)																::String text31 = _gthis->text;
HXDLIN(1651)																Float letterSpacing31 = ((Float)0.0);
HXDLIN(1651)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)																	letterSpacing31 = formatRange->format->letterSpacing;
            																}
HXDLIN(1651)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1651)																Float width66 = ((Float)0.0);
HXDLIN(1651)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1651)																_gthis->_hx___textLayout->letterSpacing = letterSpacing31;
HXDLIN(1651)																bool _hx_tmp69;
HXDLIN(1651)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)																	_hx_tmp69 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1651)																	_hx_tmp69 = true;
            																}
HXDLIN(1651)																_gthis->_hx___textLayout->autoHint = _hx_tmp69;
HXDLIN(1651)																 ::openfl::_internal::text::TextLayout _gthis32 = _gthis->_hx___textLayout;
HXDLIN(1651)																_gthis32->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text31,tempIndex9,tempRangeEnd15));
HXDLIN(1651)																::Array< ::Dynamic> tempPositions13 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)																positions = positions->concat(tempPositions13);
HXDLIN(1651)																Float width67 = ((Float)0.0);
HXDLIN(1651)																{
HXLINE(1651)																	int _g37 = (int)0;
HXDLIN(1651)																	while((_g37 < positions->length)){
HXLINE(1651)																		 ::openfl::_internal::text::GlyphPosition position35 = positions->__get(_g37).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)																		_g37 = (_g37 + (int)1);
HXDLIN(1651)																		width67 = (width67 + position35->advance->x);
            																	}
            																}
HXDLIN(1651)																widthValue = (widthValue + width67);
            															}
HXDLIN(1651)															if ((tempRangeEnd15 != endIndex6)) {
HXLINE(1651)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
HXDLIN(1651)																tempIndex9 = tempRangeEnd15;
HXDLIN(1651)																if ((endIndex6 < formatRange->end)) {
HXLINE(1651)																	tempRangeEnd15 = endIndex6;
            																}
            																else {
HXLINE(1651)																	tempRangeEnd15 = formatRange->end;
            																}
HXDLIN(1651)																countRanges9 = (countRanges9 + (int)1);
            															}
            															else {
HXLINE(1651)																goto _hx_goto_83;
            															}
            														}
            														_hx_goto_83:;
HXDLIN(1651)														rangeIndex = (rangeIndex - (countRanges9 + (int)1));
HXDLIN(1651)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXDLIN(1651)												positionWidth3 = widthValue;
            											}
            											else {
HXLINE(1651)												i10 = (int)1;
HXDLIN(1651)												j3 = (int)0;
            											}
            										}
            									}
HXDLIN(1651)									placeIndex3 = ((textIndex + i10) - j3);
HXDLIN(1651)									{
HXLINE(1651)										if ((placeIndex3 <= formatRange->end)) {
HXLINE(1651)											::String text32 = _gthis->text;
HXDLIN(1651)											Float letterSpacing32 = ((Float)0.0);
HXDLIN(1651)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)												letterSpacing32 = formatRange->format->letterSpacing;
            											}
HXDLIN(1651)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1651)											Float width68 = ((Float)0.0);
HXDLIN(1651)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1651)											_gthis->_hx___textLayout->letterSpacing = letterSpacing32;
HXDLIN(1651)											bool positions23;
HXDLIN(1651)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)												positions23 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1651)												positions23 = true;
            											}
HXDLIN(1651)											_gthis->_hx___textLayout->autoHint = positions23;
HXDLIN(1651)											 ::openfl::_internal::text::TextLayout _gthis33 = _gthis->_hx___textLayout;
HXDLIN(1651)											_gthis33->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text32,textIndex,placeIndex3));
HXDLIN(1651)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)											Float width69 = ((Float)0.0);
HXDLIN(1651)											{
HXLINE(1651)												int _g38 = (int)0;
HXDLIN(1651)												while((_g38 < positions->length)){
HXLINE(1651)													 ::openfl::_internal::text::GlyphPosition position36 = positions->__get(_g38).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)													_g38 = (_g38 + (int)1);
HXDLIN(1651)													width69 = (width69 + position36->advance->x);
            												}
            											}
HXDLIN(1651)											widthValue = width69;
HXDLIN(1651)											bool _hx_tmp70;
HXDLIN(1651)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1651)												_hx_tmp70 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1651)												_hx_tmp70 = true;
            											}
HXDLIN(1651)											if (_hx_tmp70) {
HXLINE(1651)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex3);
HXDLIN(1651)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1651)												layoutGroup->format = formatRange->format;
HXDLIN(1651)												layoutGroup->startIndex = textIndex;
HXDLIN(1651)												layoutGroup->endIndex = placeIndex3;
            											}
HXDLIN(1651)											layoutGroup->positions = positions;
HXDLIN(1651)											layoutGroup->offsetX = offsetX;
HXDLIN(1651)											layoutGroup->ascent = ascent;
HXDLIN(1651)											layoutGroup->descent = descent;
HXDLIN(1651)											layoutGroup->leading = leading;
HXDLIN(1651)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1651)											layoutGroup->offsetY = offsetY;
HXDLIN(1651)											layoutGroup->width = widthValue;
HXDLIN(1651)											layoutGroup->height = heightValue;
HXDLIN(1651)											offsetX = (offsetX + widthValue);
HXDLIN(1651)											if ((placeIndex3 == formatRange->end)) {
HXLINE(1651)												layoutGroup = null();
HXDLIN(1651)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1651)												{
HXLINE(1651)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1651)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1651)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1651)														bool _hx_tmp71;
HXDLIN(1651)														if (hx::IsNotNull( font )) {
HXLINE(1651)															_hx_tmp71 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1651)															_hx_tmp71 = false;
            														}
HXDLIN(1651)														if (_hx_tmp71) {
HXLINE(1651)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1651)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1651)															ascent = currentFormat->size;
HXDLIN(1651)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1651)													leading = currentFormat->leading;
HXDLIN(1651)													heightValue = ((ascent + descent) + leading);
HXDLIN(1651)													if ((heightValue > maxHeightValue)) {
HXLINE(1651)														maxHeightValue = heightValue;
            													}
HXDLIN(1651)													if ((ascent > maxAscent)) {
HXLINE(1651)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1651)											while(true){
HXLINE(1651)												int tempRangeEnd16;
HXDLIN(1651)												if ((placeIndex3 < formatRange->end)) {
HXLINE(1651)													tempRangeEnd16 = placeIndex3;
            												}
            												else {
HXLINE(1651)													tempRangeEnd16 = formatRange->end;
            												}
HXDLIN(1651)												if ((textIndex != tempRangeEnd16)) {
HXLINE(1651)													::String text33 = _gthis->text;
HXDLIN(1651)													Float letterSpacing33 = ((Float)0.0);
HXDLIN(1651)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)														letterSpacing33 = formatRange->format->letterSpacing;
            													}
HXDLIN(1651)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1651)													Float width70 = ((Float)0.0);
HXDLIN(1651)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1651)													_gthis->_hx___textLayout->letterSpacing = letterSpacing33;
HXDLIN(1651)													bool positions24;
HXDLIN(1651)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)														positions24 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1651)														positions24 = true;
            													}
HXDLIN(1651)													_gthis->_hx___textLayout->autoHint = positions24;
HXDLIN(1651)													 ::openfl::_internal::text::TextLayout _gthis34 = _gthis->_hx___textLayout;
HXDLIN(1651)													_gthis34->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text33,textIndex,tempRangeEnd16));
HXDLIN(1651)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)													Float width71 = ((Float)0.0);
HXDLIN(1651)													{
HXLINE(1651)														int _g39 = (int)0;
HXDLIN(1651)														while((_g39 < positions->length)){
HXLINE(1651)															 ::openfl::_internal::text::GlyphPosition position37 = positions->__get(_g39).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)															_g39 = (_g39 + (int)1);
HXDLIN(1651)															width71 = (width71 + position37->advance->x);
            														}
            													}
HXDLIN(1651)													widthValue = width71;
HXDLIN(1651)													bool _hx_tmp72;
HXDLIN(1651)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1651)														_hx_tmp72 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1651)														_hx_tmp72 = true;
            													}
HXDLIN(1651)													if (_hx_tmp72) {
HXLINE(1651)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd16);
HXDLIN(1651)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1651)														layoutGroup->format = formatRange->format;
HXDLIN(1651)														layoutGroup->startIndex = textIndex;
HXDLIN(1651)														layoutGroup->endIndex = tempRangeEnd16;
            													}
HXDLIN(1651)													layoutGroup->positions = positions;
HXDLIN(1651)													layoutGroup->offsetX = offsetX;
HXDLIN(1651)													layoutGroup->ascent = ascent;
HXDLIN(1651)													layoutGroup->descent = descent;
HXDLIN(1651)													layoutGroup->leading = leading;
HXDLIN(1651)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1651)													layoutGroup->offsetY = offsetY;
HXDLIN(1651)													layoutGroup->width = widthValue;
HXDLIN(1651)													layoutGroup->height = heightValue;
HXDLIN(1651)													offsetX = (offsetX + widthValue);
HXDLIN(1651)													textIndex = tempRangeEnd16;
            												}
HXDLIN(1651)												if ((tempRangeEnd16 == formatRange->end)) {
HXLINE(1651)													layoutGroup = null();
            												}
HXDLIN(1651)												if ((tempRangeEnd16 == placeIndex3)) {
HXLINE(1651)													goto _hx_goto_86;
            												}
HXDLIN(1651)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1651)												{
HXLINE(1651)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1651)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1651)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1651)														bool _hx_tmp73;
HXDLIN(1651)														if (hx::IsNotNull( font )) {
HXLINE(1651)															_hx_tmp73 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1651)															_hx_tmp73 = false;
            														}
HXDLIN(1651)														if (_hx_tmp73) {
HXLINE(1651)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1651)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1651)															ascent = currentFormat->size;
HXDLIN(1651)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1651)													leading = currentFormat->leading;
HXDLIN(1651)													heightValue = ((ascent + descent) + leading);
HXDLIN(1651)													if ((heightValue > maxHeightValue)) {
HXLINE(1651)														maxHeightValue = heightValue;
            													}
HXDLIN(1651)													if ((ascent > maxAscent)) {
HXLINE(1651)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_86:;
            										}
HXDLIN(1651)										textIndex = placeIndex3;
            									}
HXDLIN(1651)									{
HXLINE(1651)										{
HXLINE(1651)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1651)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1651)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1651)												bool _hx_tmp74;
HXDLIN(1651)												if (hx::IsNotNull( font )) {
HXLINE(1651)													_hx_tmp74 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1651)													_hx_tmp74 = false;
            												}
HXDLIN(1651)												if (_hx_tmp74) {
HXLINE(1651)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1651)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1651)													ascent = currentFormat->size;
HXDLIN(1651)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1651)											leading = currentFormat->leading;
HXDLIN(1651)											heightValue = ((ascent + descent) + leading);
HXDLIN(1651)											if ((heightValue > maxHeightValue)) {
HXLINE(1651)												maxHeightValue = heightValue;
            											}
HXDLIN(1651)											if ((ascent > maxAscent)) {
HXLINE(1651)												maxAscent = ascent;
            											}
            										}
HXDLIN(1651)										int i11 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1651)										while(true){
HXLINE(1651)											i11 = (i11 - (int)1);
HXDLIN(1651)											if (!((i11 > (int)-1))) {
HXLINE(1651)												goto _hx_goto_88;
            											}
HXDLIN(1651)											 ::openfl::_internal::text::TextLayoutGroup lg5 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i11)) );
HXDLIN(1651)											if ((lg5->lineIndex < lineIndex)) {
HXLINE(1651)												goto _hx_goto_88;
            											}
HXDLIN(1651)											if ((lg5->lineIndex > lineIndex)) {
HXLINE(1651)												continue;
            											}
HXDLIN(1651)											lg5->ascent = maxAscent;
HXDLIN(1651)											lg5->height = maxHeightValue;
            										}
            										_hx_goto_88:;
HXDLIN(1651)										offsetY = (offsetY + maxHeightValue);
HXDLIN(1651)										maxAscent = ((Float)0.0);
HXDLIN(1651)										maxHeightValue = ((Float)0.0);
HXDLIN(1651)										lineIndex = (lineIndex + (int)1);
HXDLIN(1651)										offsetX = (int)2;
            									}
HXDLIN(1651)									if ((endIndex5 <= formatRange->end)) {
HXLINE(1651)										::String text34 = _gthis->text;
HXDLIN(1651)										Float letterSpacing34 = ((Float)0.0);
HXDLIN(1651)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)											letterSpacing34 = formatRange->format->letterSpacing;
            										}
HXDLIN(1651)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1651)										Float width72 = ((Float)0.0);
HXDLIN(1651)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1651)										_gthis->_hx___textLayout->letterSpacing = letterSpacing34;
HXDLIN(1651)										bool positions25;
HXDLIN(1651)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)											positions25 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1651)											positions25 = true;
            										}
HXDLIN(1651)										_gthis->_hx___textLayout->autoHint = positions25;
HXDLIN(1651)										 ::openfl::_internal::text::TextLayout _gthis35 = _gthis->_hx___textLayout;
HXDLIN(1651)										_gthis35->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text34,placeIndex3,endIndex5));
HXDLIN(1651)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)										Float width73 = ((Float)0.0);
HXDLIN(1651)										{
HXLINE(1651)											int _g40 = (int)0;
HXDLIN(1651)											while((_g40 < positions->length)){
HXLINE(1651)												 ::openfl::_internal::text::GlyphPosition position38 = positions->__get(_g40).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)												_g40 = (_g40 + (int)1);
HXDLIN(1651)												width73 = (width73 + position38->advance->x);
            											}
            										}
HXDLIN(1651)										widthValue = width73;
            									}
            									else {
HXLINE(1651)										int tempIndex10 = placeIndex3;
HXDLIN(1651)										int tempRangeEnd17 = formatRange->end;
HXDLIN(1651)										int countRanges10 = (int)0;
HXDLIN(1651)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1651)										widthValue = (int)0;
HXDLIN(1651)										while(true){
HXLINE(1651)											if ((tempIndex10 != tempRangeEnd17)) {
HXLINE(1651)												::String text35 = _gthis->text;
HXDLIN(1651)												Float letterSpacing35 = ((Float)0.0);
HXDLIN(1651)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)													letterSpacing35 = formatRange->format->letterSpacing;
            												}
HXDLIN(1651)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1651)												Float width74 = ((Float)0.0);
HXDLIN(1651)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1651)												_gthis->_hx___textLayout->letterSpacing = letterSpacing35;
HXDLIN(1651)												bool _hx_tmp75;
HXDLIN(1651)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)													_hx_tmp75 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1651)													_hx_tmp75 = true;
            												}
HXDLIN(1651)												_gthis->_hx___textLayout->autoHint = _hx_tmp75;
HXDLIN(1651)												 ::openfl::_internal::text::TextLayout _gthis36 = _gthis->_hx___textLayout;
HXDLIN(1651)												_gthis36->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text35,tempIndex10,tempRangeEnd17));
HXDLIN(1651)												::Array< ::Dynamic> tempPositions14 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)												positions = positions->concat(tempPositions14);
HXDLIN(1651)												Float width75 = ((Float)0.0);
HXDLIN(1651)												{
HXLINE(1651)													int _g41 = (int)0;
HXDLIN(1651)													while((_g41 < positions->length)){
HXLINE(1651)														 ::openfl::_internal::text::GlyphPosition position39 = positions->__get(_g41).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)														_g41 = (_g41 + (int)1);
HXDLIN(1651)														width75 = (width75 + position39->advance->x);
            													}
            												}
HXDLIN(1651)												widthValue = (widthValue + width75);
            											}
HXDLIN(1651)											if ((tempRangeEnd17 != endIndex5)) {
HXLINE(1651)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1651)												tempIndex10 = tempRangeEnd17;
HXDLIN(1651)												if ((endIndex5 < formatRange->end)) {
HXLINE(1651)													tempRangeEnd17 = endIndex5;
            												}
            												else {
HXLINE(1651)													tempRangeEnd17 = formatRange->end;
            												}
HXDLIN(1651)												countRanges10 = (countRanges10 + (int)1);
            											}
            											else {
HXLINE(1651)												goto _hx_goto_90;
            											}
            										}
            										_hx_goto_90:;
HXDLIN(1651)										rangeIndex = (rangeIndex - (countRanges10 + (int)1));
HXDLIN(1651)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
            									}
HXDLIN(1651)									remainingPositions3 = positions;
HXDLIN(1651)									tempWidth3 = widthValue;
            								}
            								_hx_goto_79:;
            							}
HXDLIN(1651)							{
HXLINE(1651)								if ((endIndex5 <= formatRange->end)) {
HXLINE(1651)									::String text36 = _gthis->text;
HXDLIN(1651)									Float letterSpacing36 = ((Float)0.0);
HXDLIN(1651)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)										letterSpacing36 = formatRange->format->letterSpacing;
            									}
HXDLIN(1651)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1651)									Float width76 = ((Float)0.0);
HXDLIN(1651)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1651)									_gthis->_hx___textLayout->letterSpacing = letterSpacing36;
HXDLIN(1651)									bool positions26;
HXDLIN(1651)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)										positions26 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1651)										positions26 = true;
            									}
HXDLIN(1651)									_gthis->_hx___textLayout->autoHint = positions26;
HXDLIN(1651)									 ::openfl::_internal::text::TextLayout _gthis37 = _gthis->_hx___textLayout;
HXDLIN(1651)									_gthis37->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text36,textIndex,endIndex5));
HXDLIN(1651)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)									Float width77 = ((Float)0.0);
HXDLIN(1651)									{
HXLINE(1651)										int _g42 = (int)0;
HXDLIN(1651)										while((_g42 < positions->length)){
HXLINE(1651)											 ::openfl::_internal::text::GlyphPosition position40 = positions->__get(_g42).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)											_g42 = (_g42 + (int)1);
HXDLIN(1651)											width77 = (width77 + position40->advance->x);
            										}
            									}
HXDLIN(1651)									widthValue = width77;
HXDLIN(1651)									bool _hx_tmp76;
HXDLIN(1651)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1651)										_hx_tmp76 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1651)										_hx_tmp76 = true;
            									}
HXDLIN(1651)									if (_hx_tmp76) {
HXLINE(1651)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex5);
HXDLIN(1651)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1651)										layoutGroup->format = formatRange->format;
HXDLIN(1651)										layoutGroup->startIndex = textIndex;
HXDLIN(1651)										layoutGroup->endIndex = endIndex5;
            									}
HXDLIN(1651)									layoutGroup->positions = positions;
HXDLIN(1651)									layoutGroup->offsetX = offsetX;
HXDLIN(1651)									layoutGroup->ascent = ascent;
HXDLIN(1651)									layoutGroup->descent = descent;
HXDLIN(1651)									layoutGroup->leading = leading;
HXDLIN(1651)									layoutGroup->lineIndex = lineIndex;
HXDLIN(1651)									layoutGroup->offsetY = offsetY;
HXDLIN(1651)									layoutGroup->width = widthValue;
HXDLIN(1651)									layoutGroup->height = heightValue;
HXDLIN(1651)									offsetX = (offsetX + widthValue);
HXDLIN(1651)									if ((endIndex5 == formatRange->end)) {
HXLINE(1651)										layoutGroup = null();
HXDLIN(1651)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1651)										{
HXLINE(1651)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1651)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1651)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1651)												bool _hx_tmp77;
HXDLIN(1651)												if (hx::IsNotNull( font )) {
HXLINE(1651)													_hx_tmp77 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1651)													_hx_tmp77 = false;
            												}
HXDLIN(1651)												if (_hx_tmp77) {
HXLINE(1651)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1651)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1651)													ascent = currentFormat->size;
HXDLIN(1651)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1651)											leading = currentFormat->leading;
HXDLIN(1651)											heightValue = ((ascent + descent) + leading);
HXDLIN(1651)											if ((heightValue > maxHeightValue)) {
HXLINE(1651)												maxHeightValue = heightValue;
            											}
HXDLIN(1651)											if ((ascent > maxAscent)) {
HXLINE(1651)												maxAscent = ascent;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1651)									while(true){
HXLINE(1651)										int tempRangeEnd18;
HXDLIN(1651)										if ((endIndex5 < formatRange->end)) {
HXLINE(1651)											tempRangeEnd18 = endIndex5;
            										}
            										else {
HXLINE(1651)											tempRangeEnd18 = formatRange->end;
            										}
HXDLIN(1651)										if ((textIndex != tempRangeEnd18)) {
HXLINE(1651)											::String text37 = _gthis->text;
HXDLIN(1651)											Float letterSpacing37 = ((Float)0.0);
HXDLIN(1651)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1651)												letterSpacing37 = formatRange->format->letterSpacing;
            											}
HXDLIN(1651)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1651)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1651)											Float width78 = ((Float)0.0);
HXDLIN(1651)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1651)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1651)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1651)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1651)											_gthis->_hx___textLayout->letterSpacing = letterSpacing37;
HXDLIN(1651)											bool positions27;
HXDLIN(1651)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1651)												positions27 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1651)												positions27 = true;
            											}
HXDLIN(1651)											_gthis->_hx___textLayout->autoHint = positions27;
HXDLIN(1651)											 ::openfl::_internal::text::TextLayout _gthis38 = _gthis->_hx___textLayout;
HXDLIN(1651)											_gthis38->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text37,textIndex,tempRangeEnd18));
HXDLIN(1651)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1651)											Float width79 = ((Float)0.0);
HXDLIN(1651)											{
HXLINE(1651)												int _g43 = (int)0;
HXDLIN(1651)												while((_g43 < positions->length)){
HXLINE(1651)													 ::openfl::_internal::text::GlyphPosition position41 = positions->__get(_g43).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1651)													_g43 = (_g43 + (int)1);
HXDLIN(1651)													width79 = (width79 + position41->advance->x);
            												}
            											}
HXDLIN(1651)											widthValue = width79;
HXDLIN(1651)											bool _hx_tmp78;
HXDLIN(1651)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1651)												_hx_tmp78 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1651)												_hx_tmp78 = true;
            											}
HXDLIN(1651)											if (_hx_tmp78) {
HXLINE(1651)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd18);
HXDLIN(1651)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1651)												layoutGroup->format = formatRange->format;
HXDLIN(1651)												layoutGroup->startIndex = textIndex;
HXDLIN(1651)												layoutGroup->endIndex = tempRangeEnd18;
            											}
HXDLIN(1651)											layoutGroup->positions = positions;
HXDLIN(1651)											layoutGroup->offsetX = offsetX;
HXDLIN(1651)											layoutGroup->ascent = ascent;
HXDLIN(1651)											layoutGroup->descent = descent;
HXDLIN(1651)											layoutGroup->leading = leading;
HXDLIN(1651)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1651)											layoutGroup->offsetY = offsetY;
HXDLIN(1651)											layoutGroup->width = widthValue;
HXDLIN(1651)											layoutGroup->height = heightValue;
HXDLIN(1651)											offsetX = (offsetX + widthValue);
HXDLIN(1651)											textIndex = tempRangeEnd18;
            										}
HXDLIN(1651)										if ((tempRangeEnd18 == formatRange->end)) {
HXLINE(1651)											layoutGroup = null();
            										}
HXDLIN(1651)										if ((tempRangeEnd18 == endIndex5)) {
HXLINE(1651)											goto _hx_goto_93;
            										}
HXDLIN(1651)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1651)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1651)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1651)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1651)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1651)										{
HXLINE(1651)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1651)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1651)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1651)												bool _hx_tmp79;
HXDLIN(1651)												if (hx::IsNotNull( font )) {
HXLINE(1651)													_hx_tmp79 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1651)													_hx_tmp79 = false;
            												}
HXDLIN(1651)												if (_hx_tmp79) {
HXLINE(1651)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1651)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1651)													ascent = currentFormat->size;
HXDLIN(1651)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1651)											leading = currentFormat->leading;
HXDLIN(1651)											heightValue = ((ascent + descent) + leading);
HXDLIN(1651)											if ((heightValue > maxHeightValue)) {
HXLINE(1651)												maxHeightValue = heightValue;
            											}
HXDLIN(1651)											if ((ascent > maxAscent)) {
HXLINE(1651)												maxAscent = ascent;
            											}
            										}
            									}
            									_hx_goto_93:;
            								}
HXDLIN(1651)								textIndex = endIndex5;
            							}
            						}
HXLINE(1653)						{
HXLINE(1653)							{
HXLINE(1653)								if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1653)									ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1653)									descent = (currentFormat->size * currentFormat->_hx___descent);
            								}
            								else {
HXLINE(1653)									bool _hx_tmp80;
HXDLIN(1653)									if (hx::IsNotNull( font )) {
HXLINE(1653)										_hx_tmp80 = (font->unitsPerEM != (int)0);
            									}
            									else {
HXLINE(1653)										_hx_tmp80 = false;
            									}
HXDLIN(1653)									if (_hx_tmp80) {
HXLINE(1653)										ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1653)										descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            									}
            									else {
HXLINE(1653)										ascent = currentFormat->size;
HXDLIN(1653)										descent = (currentFormat->size * ((Float)0.185));
            									}
            								}
HXDLIN(1653)								leading = currentFormat->leading;
HXDLIN(1653)								heightValue = ((ascent + descent) + leading);
HXDLIN(1653)								if ((heightValue > maxHeightValue)) {
HXLINE(1653)									maxHeightValue = heightValue;
            								}
HXDLIN(1653)								if ((ascent > maxAscent)) {
HXLINE(1653)									maxAscent = ascent;
            								}
            							}
HXDLIN(1653)							int i12 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1653)							while(true){
HXLINE(1653)								i12 = (i12 - (int)1);
HXDLIN(1653)								if (!((i12 > (int)-1))) {
HXLINE(1653)									goto _hx_goto_95;
            								}
HXDLIN(1653)								 ::openfl::_internal::text::TextLayoutGroup lg6 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i12)) );
HXDLIN(1653)								if ((lg6->lineIndex < lineIndex)) {
HXLINE(1653)									goto _hx_goto_95;
            								}
HXDLIN(1653)								if ((lg6->lineIndex > lineIndex)) {
HXLINE(1653)									continue;
            								}
HXDLIN(1653)								lg6->ascent = maxAscent;
HXDLIN(1653)								lg6->height = maxHeightValue;
            							}
            							_hx_goto_95:;
HXDLIN(1653)							offsetY = (offsetY + maxHeightValue);
HXDLIN(1653)							maxAscent = ((Float)0.0);
HXDLIN(1653)							maxHeightValue = ((Float)0.0);
HXDLIN(1653)							lineIndex = (lineIndex + (int)1);
HXDLIN(1653)							offsetX = (int)2;
            						}
            					}
HXLINE(1657)					textIndex = (textIndex + (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1672_restrictText)
HXLINE(1674)		if (hx::IsNull( value )) {
HXLINE(1676)			return value;
            		}
HXLINE(1680)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1682)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1692)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1697_setTextAlignment)
HXLINE(1699)		int lineIndex = (int)-1;
HXLINE(1700)		Float offsetX = ((Float)0.0);
HXLINE(1701)		Float totalWidth = (this->width - (int)4);
HXLINE(1702)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1702)		int lineLength;
HXLINE(1703)		bool lineMeasurementsDirty = false;
HXLINE(1705)		{
HXLINE(1705)			int _g1 = (int)0;
HXDLIN(1705)			int _g = this->layoutGroups->get_length();
HXDLIN(1705)			while((_g1 < _g)){
HXLINE(1705)				_g1 = (_g1 + (int)1);
HXDLIN(1705)				int i = (_g1 - (int)1);
HXLINE(1707)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1709)				if ((group->lineIndex != lineIndex)) {
HXLINE(1711)					lineIndex = group->lineIndex;
HXLINE(1713)					{
HXLINE(1713)						 ::Dynamic _g2 = group->format->align;
HXDLIN(1713)						 ::Dynamic _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE(1717)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1719)								offsetX = ::Math_obj::round(((Float)(totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(int)2));
            							}
            							else {
HXLINE(1723)								offsetX = (int)0;
            							}
HXLINE(1717)							goto _hx_goto_99;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1741)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1743)								lineLength = (int)1;
HXLINE(1745)								{
HXLINE(1745)									int _g3 = (i + (int)1);
HXDLIN(1745)									int _g21 = ::openfl::_Vector::IVector_obj::get_length(this->layoutGroups);
HXDLIN(1745)									while((_g3 < _g21)){
HXLINE(1745)										_g3 = (_g3 + (int)1);
HXDLIN(1745)										int j = (_g3 - (int)1);
HXLINE(1747)										if ((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->lineIndex == lineIndex)) {
HXLINE(1749)											bool _hx_tmp;
HXDLIN(1749)											if ((j != (int)0)) {
HXLINE(1749)												::String _hx_tmp1 = this->text;
HXDLIN(1749)												_hx_tmp = hx::IsEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp1,(( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1749)												_hx_tmp = true;
            											}
HXDLIN(1749)											if (_hx_tmp) {
HXLINE(1751)												lineLength = (lineLength + (int)1);
            											}
            										}
            										else {
HXLINE(1757)											goto _hx_goto_100;
            										}
            									}
            									_hx_goto_100:;
            								}
HXLINE(1763)								if ((lineLength > (int)1)) {
HXLINE(1765)									group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,((i + lineLength) - (int)1))) );
HXLINE(1767)									 ::Dynamic endChar = ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(this->text,group->endIndex);
HXLINE(1768)									bool _hx_tmp2;
HXDLIN(1768)									bool _hx_tmp3;
HXDLIN(1768)									int group1 = group->endIndex;
HXDLIN(1768)									if ((group1 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1768)										_hx_tmp3 = hx::IsNotEq( endChar,(int)10 );
            									}
            									else {
HXLINE(1768)										_hx_tmp3 = false;
            									}
HXDLIN(1768)									if (_hx_tmp3) {
HXLINE(1768)										_hx_tmp2 = hx::IsNotEq( endChar,(int)13 );
            									}
            									else {
HXLINE(1768)										_hx_tmp2 = false;
            									}
HXDLIN(1768)									if (_hx_tmp2) {
HXLINE(1770)										Float offsetX1 = (totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ));
HXDLIN(1770)										offsetX = ((Float)offsetX1 / (Float)(lineLength - (int)1));
HXLINE(1771)										lineMeasurementsDirty = true;
HXLINE(1773)										int j1 = (int)1;
HXLINE(1774)										while(true){
HXLINE(1783)											 ::openfl::_internal::text::TextLayoutGroup _hx_tmp4 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1783)											_hx_tmp4->offsetX = (_hx_tmp4->offsetX + (offsetX * j1));
HXLINE(1785)											j1 = (j1 + (int)1);
HXLINE(1774)											if (!((j1 < lineLength))) {
HXLINE(1774)												goto _hx_goto_101;
            											}
            										}
            										_hx_goto_101:;
            									}
            								}
            							}
HXLINE(1793)							offsetX = (int)0;
HXLINE(1739)							goto _hx_goto_99;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE(1729)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1731)								offsetX = ::Math_obj::round((totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )));
            							}
            							else {
HXLINE(1735)								offsetX = (int)0;
            							}
HXLINE(1729)							goto _hx_goto_99;
            						}
            						/* default */{
HXLINE(1797)							offsetX = (int)0;
            						}
            						_hx_goto_99:;
            					}
            				}
HXLINE(1803)				if ((offsetX > (int)0)) {
HXLINE(1805)					 ::openfl::_internal::text::TextLayoutGroup group2 = group;
HXDLIN(1805)					group2->offsetX = (group2->offsetX + offsetX);
            				}
            			}
            		}
HXLINE(1811)		if (lineMeasurementsDirty) {
HXLINE(1815)			this->getLineMeasurements();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1822_trimText)
HXLINE(1824)		if (hx::IsNull( value )) {
HXLINE(1826)			return value;
            		}
HXLINE(1830)		bool _hx_tmp;
HXDLIN(1830)		if ((this->maxChars > (int)0)) {
HXLINE(1830)			int _hx_tmp1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value);
HXDLIN(1830)			_hx_tmp = (_hx_tmp1 > this->maxChars);
            		}
            		else {
HXLINE(1830)			_hx_tmp = false;
            		}
HXDLIN(1830)		if (_hx_tmp) {
HXLINE(1832)			value = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(value,(int)0,this->maxChars);
            		}
HXLINE(1836)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1841_update)
HXLINE(1843)		bool _hx_tmp;
HXDLIN(1843)		if (hx::IsNotNull( this->text )) {
HXLINE(1843)			_hx_tmp = (this->textFormatRanges->get_length() == (int)0);
            		}
            		else {
HXLINE(1843)			_hx_tmp = true;
            		}
HXDLIN(1843)		if (_hx_tmp) {
HXLINE(1845)			this->lineAscents->set_length((int)0);
HXLINE(1846)			this->lineBreaks->set_length((int)0);
HXLINE(1847)			this->lineDescents->set_length((int)0);
HXLINE(1848)			this->lineLeadings->set_length((int)0);
HXLINE(1849)			this->lineHeights->set_length((int)0);
HXLINE(1850)			this->lineWidths->set_length((int)0);
HXLINE(1851)			this->layoutGroups->set_length((int)0);
HXLINE(1853)			this->textWidth = (int)0;
HXLINE(1854)			this->textHeight = (int)0;
HXLINE(1855)			this->numLines = (int)1;
HXLINE(1856)			this->maxScrollH = (int)0;
HXLINE(1857)			this->maxScrollV = (int)1;
HXLINE(1858)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1862)			this->getLayoutGroups();
HXLINE(1863)			this->getLineMeasurements();
HXLINE(1864)			this->setTextAlignment();
            		}
HXLINE(1868)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1879_set_restrict)
HXLINE(1881)		if (::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->restrict,value)) {
HXLINE(1883)			return this->restrict;
            		}
HXLINE(1887)		this->restrict = value;
HXLINE(1889)		bool _hx_tmp;
HXDLIN(1889)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1889)			_hx_tmp = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->restrict) == (int)0);
            		}
            		else {
HXLINE(1889)			_hx_tmp = true;
            		}
HXDLIN(1889)		if (_hx_tmp) {
HXLINE(1891)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1895)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1899)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1906_set_text)
HXDLIN(1906)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_195_findFont)
HXLINE( 203)		{
HXLINE( 203)			int _g = (int)0;
HXDLIN( 203)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 203)			while((_g < _g1->length)){
HXLINE( 203)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 203)				_g = (_g + (int)1);
HXLINE( 205)				if (hx::IsNull( registeredFont )) {
HXLINE( 205)					continue;
            				}
HXLINE( 207)				bool _hx_tmp;
HXDLIN( 207)				if ((registeredFont->name != name)) {
HXLINE( 207)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 207)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 207)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 207)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 207)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 207)					_hx_tmp = true;
            				}
HXDLIN( 207)				if (_hx_tmp) {
HXLINE( 209)					if (registeredFont->_hx___initialize()) {
HXLINE( 211)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 223)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 225)		if (hx::IsNotNull( font )) {
HXLINE( 227)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 228)			return font;
            		}
HXLINE( 234)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_239_findFontVariant)
HXLINE( 241)		::String fontName = format->font;
HXLINE( 242)		 ::Dynamic bold = format->bold;
HXLINE( 243)		 ::Dynamic italic = format->italic;
HXLINE( 245)		if (hx::IsNull( fontName )) {
HXLINE( 245)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 246)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 248)		bool _hx_tmp;
HXDLIN( 248)		bool _hx_tmp1;
HXDLIN( 248)		if (bold) {
HXLINE( 248)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 248)			_hx_tmp1 = false;
            		}
HXDLIN( 248)		if (_hx_tmp1) {
HXLINE( 248)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 248)			_hx_tmp = false;
            		}
HXDLIN( 248)		if (_hx_tmp) {
HXLINE( 250)			return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 252)			bool _hx_tmp2;
HXDLIN( 252)			if (bold) {
HXLINE( 252)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 252)				_hx_tmp2 = false;
            			}
HXDLIN( 252)			if (_hx_tmp2) {
HXLINE( 254)				return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 256)				bool _hx_tmp3;
HXDLIN( 256)				if (italic) {
HXLINE( 256)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 256)					_hx_tmp3 = false;
            				}
HXDLIN( 256)				if (_hx_tmp3) {
HXLINE( 258)					return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 262)		return ::openfl::_internal::text::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_295_getFormatHeight)
HXLINE( 297)		Float ascent;
HXDLIN( 297)		Float descent;
HXDLIN( 297)		int leading;
HXLINE( 303)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 305)		if (hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 307)			ascent = (format->size * format->_hx___ascent);
HXLINE( 308)			descent = (format->size * format->_hx___descent);
            		}
            		else {
HXLINE( 310)			bool _hx_tmp;
HXDLIN( 310)			if (hx::IsNotNull( font )) {
HXLINE( 310)				_hx_tmp = (font->unitsPerEM != (int)0);
            			}
            			else {
HXLINE( 310)				_hx_tmp = false;
            			}
HXDLIN( 310)			if (_hx_tmp) {
HXLINE( 312)				ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * format->size);
HXLINE( 313)				descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * format->size));
            			}
            			else {
HXLINE( 317)				ascent = format->size;
HXLINE( 318)				descent = (format->size * ((Float)0.185));
            			}
            		}
HXLINE( 322)		leading = format->leading;
HXLINE( 324)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_329_getFont)
HXLINE( 331)		::String fontName = format->font;
HXLINE( 332)		 ::Dynamic bold = format->bold;
HXLINE( 333)		 ::Dynamic italic = format->italic;
HXLINE( 335)		if (hx::IsNull( fontName )) {
HXLINE( 335)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 336)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 338)		bool _hx_tmp;
HXDLIN( 338)		bool _hx_tmp1;
HXDLIN( 338)		if (bold) {
HXLINE( 338)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 338)			_hx_tmp1 = false;
            		}
HXDLIN( 338)		if (_hx_tmp1) {
HXLINE( 338)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 338)			_hx_tmp = false;
            		}
HXDLIN( 338)		if (_hx_tmp) {
HXLINE( 340)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 341)			bold = false;
HXLINE( 342)			italic = false;
            		}
            		else {
HXLINE( 344)			bool _hx_tmp2;
HXDLIN( 344)			if (bold) {
HXLINE( 344)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 344)				_hx_tmp2 = false;
            			}
HXDLIN( 344)			if (_hx_tmp2) {
HXLINE( 346)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 347)				bold = false;
            			}
            			else {
HXLINE( 349)				bool _hx_tmp3;
HXDLIN( 349)				if (italic) {
HXLINE( 349)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 349)					_hx_tmp3 = false;
            				}
HXDLIN( 349)				if (_hx_tmp3) {
HXLINE( 351)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 352)					italic = false;
            				}
            				else {
HXLINE( 358)					bool _hx_tmp4;
HXDLIN( 358)					if (bold) {
HXLINE( 358)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= (int)-1)) {
HXLINE( 358)							_hx_tmp4 = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 358)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 358)						_hx_tmp4 = false;
            					}
HXDLIN( 358)					if (_hx_tmp4) {
HXLINE( 360)						bold = false;
            					}
HXLINE( 364)					bool _hx_tmp5;
HXDLIN( 364)					if (italic) {
HXLINE( 364)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= (int)-1)) {
HXLINE( 364)							_hx_tmp5 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 364)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 364)						_hx_tmp5 = false;
            					}
HXDLIN( 364)					if (_hx_tmp5) {
HXLINE( 366)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 372)		::String font;
HXDLIN( 372)		if (italic) {
HXLINE( 372)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 372)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 373)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 374)		::String font1;
HXDLIN( 374)		if (bold) {
HXLINE( 374)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 374)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 374)		font = (font + font1);
HXLINE( 375)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 376)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + (int)3)) + HX_("px ",18,65,55,00)));
HXLINE( 378)		::String font2;
HXDLIN( 378)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 378)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 378)			goto _hx_goto_111;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 378)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 378)			goto _hx_goto_111;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 378)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 378)			goto _hx_goto_111;
            		}
            		/* default */{
HXLINE( 378)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_111:;
HXDLIN( 378)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 387)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_392_getFontInstance)
HXLINE( 400)		 ::openfl::text::Font instance = null();
HXLINE( 401)		::Array< ::String > fontList = null();
HXLINE( 403)		bool _hx_tmp;
HXDLIN( 403)		if (hx::IsNotNull( format )) {
HXLINE( 403)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 403)			_hx_tmp = false;
            		}
HXDLIN( 403)		if (_hx_tmp) {
HXLINE( 405)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 407)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 411)			instance = ::openfl::_internal::text::TextEngine_obj::findFontVariant(format);
HXLINE( 412)			if (hx::IsNotNull( instance )) {
HXLINE( 412)				return instance;
            			}
HXLINE( 414)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 416)			{
HXLINE( 416)				::String _g = format->font;
HXDLIN( 416)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 421)					if (format->bold) {
HXLINE( 423)						if (format->italic) {
HXLINE( 425)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)));
            						}
            						else {
HXLINE( 429)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
            						}
            					}
            					else {
HXLINE( 435)						if (format->italic) {
HXLINE( 437)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
            						}
            						else {
HXLINE( 441)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
            						}
            					}
HXLINE( 421)					goto _hx_goto_113;
            				}
            				if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 456)					goto _hx_goto_113;
            				}
            				if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 463)					if (format->bold) {
HXLINE( 465)						if (format->italic) {
HXLINE( 467)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)));
            						}
            						else {
HXLINE( 471)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
            						}
            					}
            					else {
HXLINE( 477)						if (format->italic) {
HXLINE( 479)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
            						}
            						else {
HXLINE( 483)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
            						}
            					}
HXLINE( 463)					goto _hx_goto_113;
            				}
            				/* default */{
HXLINE( 500)					fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            				}
            				_hx_goto_113:;
            			}
HXLINE( 504)			if (hx::IsNotNull( fontList )) {
HXLINE( 506)				int _g1 = (int)0;
HXDLIN( 506)				while((_g1 < fontList->length)){
HXLINE( 506)					::String font = fontList->__get(_g1);
HXDLIN( 506)					_g1 = (_g1 + (int)1);
HXLINE( 508)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 510)					if (hx::IsNotNull( instance )) {
HXLINE( 512)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 513)						return instance;
            					}
            				}
            			}
HXLINE( 521)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 522)			if (hx::IsNotNull( instance )) {
HXLINE( 522)				return instance;
            			}
            		}
HXLINE( 526)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 529)		if (format->bold) {
HXLINE( 531)			if (format->italic) {
HXLINE( 533)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbi.ttf",36,79,1a,28)));
            			}
            			else {
HXLINE( 537)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbd.ttf",b1,92,19,47)));
            			}
            		}
            		else {
HXLINE( 543)			if (format->italic) {
HXLINE( 545)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesi.ttf",ca,27,e8,a0)));
            			}
            			else {
HXLINE( 549)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/times.ttf",2f,58,44,c5)));
            			}
            		}
HXLINE( 564)		{
HXLINE( 564)			int _g2 = (int)0;
HXDLIN( 564)			while((_g2 < fontList->length)){
HXLINE( 564)				::String font1 = fontList->__get(_g2);
HXDLIN( 564)				_g2 = (_g2 + (int)1);
HXLINE( 566)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 568)				if (hx::IsNotNull( instance )) {
HXLINE( 570)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 571)					return instance;
            				}
            			}
            		}
HXLINE( 577)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 581)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textBounds,"textBounds");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textBounds,"textBounds");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { return hx::Val( textBounds ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBounds") ) { textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::openfl::_internal::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,textBounds),HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::openfl::_internal::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("createRestrictRegexp","\x41","\xd0","\x6b","\xe1"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("restrictText","\x09","\x12","\x3e","\x34"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("trimText","\xaf","\xae","\x63","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("findFontVariant","\xbd","\x22","\xbb","\xb2"),
	HX_HCSTRING("getFormatHeight","\x34","\x24","\x4b","\x62"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Object *dummy = new TextEngine_obj;
	TextEngine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_48_boot)
HXDLIN(  48)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_49_boot)
HXDLIN(  49)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_50_boot)
HXDLIN(  50)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_51_boot)
HXDLIN(  51)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_53_boot)
HXDLIN(  53)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
